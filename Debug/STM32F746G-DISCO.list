
STM32F746G-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00000000  20000000  20000000  0032d000  2**0
                  CONTENTS
  1 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b134  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000051ec  0800b308  0800b308  0000c308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .InternalFlashSection 0000a2a0  08010500  08010500  00011500  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801a7a0  0801a7a0  0032d000  2**0
                  CONTENTS
  6 .ARM          00000008  0801a7a0  0801a7a0  0001b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801a7a8  0801a7a8  0032d000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801a7a8  0801a7a8  0001b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0801a7ac  0801a7ac  0001b7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000ce4  20000000  0801a7b0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000608  20000ce8  0801b494  0001cce8  2**3
                  ALLOC
 12 ._user_heap_stack 00001000  200012f0  0801b494  0001d2f0  2**0
                  ALLOC
 13 .ext1flash_section 00310000  90000000  90000000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .ARM.attributes 00000030  00000000  00000000  0032d000  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024d5b  00000000  00000000  0032d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ae8  00000000  00000000  00351d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001428  00000000  00000000  00357878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fc32  00000000  00000000  00358ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002285e  00000000  00000000  003888d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108957  00000000  00000000  003ab130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000086  00000000  00000000  004b3a87  2**0
                  CONTENTS, READONLY
 22 .debug_rnglists 000013b9  00000000  00000000  004b3b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00004988  00000000  00000000  004b4ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0000b97c  00000000  00000000  004b9850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000097  00000000  00000000  004c51cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000ce8 	.word	0x20000ce8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b2ec 	.word	0x0800b2ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000cec 	.word	0x20000cec
 800020c:	0800b2ec 	.word	0x0800b2ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f824 	bl	8000c54 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fd09 	bl	8000638 <__aeabi_dmul>
 8000c26:	f000 f975 	bl	8000f14 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc8a 	bl	8000544 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fd00 	bl	8000638 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb42 	bl	80002c8 <__aeabi_dsub>
 8000c44:	f000 f966 	bl	8000f14 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9d08      	ldr	r5, [sp, #32]
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14e      	bne.n	8000cfe <__udivmoddi4+0xaa>
 8000c60:	4694      	mov	ip, r2
 8000c62:	458c      	cmp	ip, r1
 8000c64:	4686      	mov	lr, r0
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	d962      	bls.n	8000d32 <__udivmoddi4+0xde>
 8000c6c:	b14a      	cbz	r2, 8000c82 <__udivmoddi4+0x2e>
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	4091      	lsls	r1, r2
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f f68c 	uxth.w	r6, ip
 8000c8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c92:	fb07 1114 	mls	r1, r7, r4, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb04 f106 	mul.w	r1, r4, r6
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x64>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000caa:	f080 8112 	bcs.w	8000ed2 <__udivmoddi4+0x27e>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 810f 	bls.w	8000ed2 <__udivmoddi4+0x27e>
 8000cb4:	3c02      	subs	r4, #2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb00 f606 	mul.w	r6, r0, r6
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x94>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cda:	f080 80fc 	bcs.w	8000ed6 <__udivmoddi4+0x282>
 8000cde:	429e      	cmp	r6, r3
 8000ce0:	f240 80f9 	bls.w	8000ed6 <__udivmoddi4+0x282>
 8000ce4:	4463      	add	r3, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	1b9b      	subs	r3, r3, r6
 8000cea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa6>
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xba>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb4>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x150>
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xcc>
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	f0c0 80f0 	bcc.w	8000f00 <__udivmoddi4+0x2ac>
 8000d20:	1a86      	subs	r6, r0, r2
 8000d22:	eb64 0303 	sbc.w	r3, r4, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d0e6      	beq.n	8000cfa <__udivmoddi4+0xa6>
 8000d2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d30:	e7e3      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x204>
 8000d38:	eba1 040c 	sub.w	r4, r1, ip
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	2101      	movs	r1, #1
 8000d46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb07 f006 	mul.w	r0, r7, r6
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x11c>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x11a>
 8000d68:	4298      	cmp	r0, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2b4>
 8000d6e:	4626      	mov	r6, r4
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	fa1f f38e 	uxth.w	r3, lr
 8000d76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d82:	fb00 f707 	mul.w	r7, r0, r7
 8000d86:	429f      	cmp	r7, r3
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x148>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x146>
 8000d94:	429f      	cmp	r7, r3
 8000d96:	f200 80b0 	bhi.w	8000efa <__udivmoddi4+0x2a6>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	1bdb      	subs	r3, r3, r7
 8000d9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x9c>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db4:	fa04 f301 	lsl.w	r3, r4, r1
 8000db8:	ea43 030c 	orr.w	r3, r3, ip
 8000dbc:	40f4      	lsrs	r4, r6
 8000dbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dcc:	fa1f fc87 	uxth.w	ip, r7
 8000dd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a1      	cmp	r9, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x1a6>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dea:	f080 8084 	bcs.w	8000ef6 <__udivmoddi4+0x2a2>
 8000dee:	45a1      	cmp	r9, r4
 8000df0:	f240 8081 	bls.w	8000ef6 <__udivmoddi4+0x2a2>
 8000df4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	eba4 0409 	sub.w	r4, r4, r9
 8000dfe:	fa1f f983 	uxth.w	r9, r3
 8000e02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e06:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x1d2>
 8000e16:	193c      	adds	r4, r7, r4
 8000e18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e1c:	d267      	bcs.n	8000eee <__udivmoddi4+0x29a>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d965      	bls.n	8000eee <__udivmoddi4+0x29a>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2e:	eba4 040c 	sub.w	r4, r4, ip
 8000e32:	429c      	cmp	r4, r3
 8000e34:	46ce      	mov	lr, r9
 8000e36:	469c      	mov	ip, r3
 8000e38:	d351      	bcc.n	8000ede <__udivmoddi4+0x28a>
 8000e3a:	d04e      	beq.n	8000eda <__udivmoddi4+0x286>
 8000e3c:	b155      	cbz	r5, 8000e54 <__udivmoddi4+0x200>
 8000e3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e42:	eb64 040c 	sbc.w	r4, r4, ip
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	40cb      	lsrs	r3, r1
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	e9c5 6400 	strd	r6, r4, [r5]
 8000e54:	2100      	movs	r1, #0
 8000e56:	e750      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa24 f303 	lsr.w	r3, r4, r3
 8000e68:	4094      	lsls	r4, r2
 8000e6a:	430c      	orrs	r4, r1
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e74:	fa1f f78c 	uxth.w	r7, ip
 8000e78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e80:	0c23      	lsrs	r3, r4, #16
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb00 f107 	mul.w	r1, r0, r7
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x24c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e96:	d22c      	bcs.n	8000ef2 <__udivmoddi4+0x29e>
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	d92a      	bls.n	8000ef2 <__udivmoddi4+0x29e>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea8:	fb08 3311 	mls	r3, r8, r1, r3
 8000eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb0:	fb01 f307 	mul.w	r3, r1, r7
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x276>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ec0:	d213      	bcs.n	8000eea <__udivmoddi4+0x296>
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	d911      	bls.n	8000eea <__udivmoddi4+0x296>
 8000ec6:	3902      	subs	r1, #2
 8000ec8:	4464      	add	r4, ip
 8000eca:	1ae4      	subs	r4, r4, r3
 8000ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed0:	e739      	b.n	8000d46 <__udivmoddi4+0xf2>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	e6f0      	b.n	8000cb8 <__udivmoddi4+0x64>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e706      	b.n	8000ce8 <__udivmoddi4+0x94>
 8000eda:	45c8      	cmp	r8, r9
 8000edc:	d2ae      	bcs.n	8000e3c <__udivmoddi4+0x1e8>
 8000ede:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7a8      	b.n	8000e3c <__udivmoddi4+0x1e8>
 8000eea:	4631      	mov	r1, r6
 8000eec:	e7ed      	b.n	8000eca <__udivmoddi4+0x276>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e799      	b.n	8000e26 <__udivmoddi4+0x1d2>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e7d4      	b.n	8000ea0 <__udivmoddi4+0x24c>
 8000ef6:	46d6      	mov	lr, sl
 8000ef8:	e77f      	b.n	8000dfa <__udivmoddi4+0x1a6>
 8000efa:	4463      	add	r3, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e74d      	b.n	8000d9c <__udivmoddi4+0x148>
 8000f00:	4606      	mov	r6, r0
 8000f02:	4623      	mov	r3, r4
 8000f04:	4608      	mov	r0, r1
 8000f06:	e70f      	b.n	8000d28 <__udivmoddi4+0xd4>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	e730      	b.n	8000d70 <__udivmoddi4+0x11c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2uiz>:
 8000f14:	004a      	lsls	r2, r1, #1
 8000f16:	d211      	bcs.n	8000f3c <__aeabi_d2uiz+0x28>
 8000f18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f1c:	d211      	bcs.n	8000f42 <__aeabi_d2uiz+0x2e>
 8000f1e:	d50d      	bpl.n	8000f3c <__aeabi_d2uiz+0x28>
 8000f20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f28:	d40e      	bmi.n	8000f48 <__aeabi_d2uiz+0x34>
 8000f2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f36:	fa23 f002 	lsr.w	r0, r3, r2
 8000f3a:	4770      	bx	lr
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4770      	bx	lr
 8000f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f46:	d102      	bne.n	8000f4e <__aeabi_d2uiz+0x3a>
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	4770      	bx	lr
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	4770      	bx	lr

08000f54 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f58:	f3bf 8f4f 	dsb	sy
}
 8000f5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f5e:	f3bf 8f6f 	isb	sy
}
 8000f62:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <SCB_EnableICache+0x48>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6c:	f3bf 8f4f 	dsb	sy
}
 8000f70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f72:	f3bf 8f6f 	isb	sy
}
 8000f76:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <SCB_EnableICache+0x48>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <SCB_EnableICache+0x48>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <SCB_EnableDCache+0x84>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fae:	f3bf 8f4f 	dsb	sy
}
 8000fb2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <SCB_EnableDCache+0x84>)
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	0b5b      	lsrs	r3, r3, #13
 8000fc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fc4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	015a      	lsls	r2, r3, #5
 8000fd4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000fd8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fde:	4911      	ldr	r1, [pc, #68]	@ (8001024 <SCB_EnableDCache+0x84>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	60ba      	str	r2, [r7, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ef      	bne.n	8000fd0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	60fa      	str	r2, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1e5      	bne.n	8000fc6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <SCB_EnableDCache+0x84>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <SCB_EnableDCache+0x84>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800100c:	f3bf 8f4f 	dsb	sy
}
 8001010:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001012:	f3bf 8f6f 	isb	sy
}
 8001016:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800102c:	f000 fe0e 	bl	8001c4c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001030:	f7ff ff90 	bl	8000f54 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001034:	f7ff ffb4 	bl	8000fa0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 fa84 	bl	8002544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f902 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART1_UART_Init();
 8001040:	f000 f9c0 	bl	80013c4 <MX_USART1_UART_Init>
  MX_GPIO_Init();
 8001044:	f000 f9ee 	bl	8001424 <MX_GPIO_Init>
  //MX_LTDC_Init();
  MX_DMA2D_Init();
 8001048:	f000 f98a 	bl	8001360 <MX_DMA2D_Init>
  MX_CRC_Init();
 800104c:	f000 f966 	bl	800131c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8001050:	f003 feb4 	bl	8004dbc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //process_and_display_prediction();
	  test_ai_model();
 8001054:	f000 f86a 	bl	800112c <test_ai_model>
      //ai_run();
	  HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f001 fa90 	bl	8002580 <HAL_Delay>
	  test_ai_model();
 8001060:	bf00      	nop
 8001062:	e7f7      	b.n	8001054 <main+0x2c>

08001064 <preprocess_image>:
  }
  /* USER CODE END 3 */
}

//normolized image data  to [0 1]
void preprocess_image(const uint32_t* raw_image, float* processed_image, size_t size) {
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e04c      	b.n	8001110 <preprocess_image+0xac>
        // Normalize each RGB channel to [0, 1] and flatten the image
        processed_image[3*i] = ((float)((raw_image[i] >> 16) & 0xFF)) / 255.0f;  // Red channel
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	b2db      	uxtb	r3, r3
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	461a      	mov	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001128 <preprocess_image+0xc4>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	edc3 7a00 	vstr	s15, [r3]
        processed_image[3*i + 1] = ((float)((raw_image[i] >> 8) & 0xFF)) / 255.0f; // Green channel
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3304      	adds	r3, #4
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4413      	add	r3, r2
 80010ce:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001128 <preprocess_image+0xc4>
 80010d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d6:	edc3 7a00 	vstr	s15, [r3]
        processed_image[3*i + 2] = ((float)(raw_image[i] & 0xFF)) / 255.0f;      // Blue channel
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3308      	adds	r3, #8
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001128 <preprocess_image+0xc4>
 8001102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001106:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < size; i++) {
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3ae      	bcc.n	8001076 <preprocess_image+0x12>
    }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	437f0000 	.word	0x437f0000

0800112c <test_ai_model>:

void test_ai_model(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af00      	add	r7, sp, #0
    // 1. Prepare input data
    float input_data[AI_NETWORK_IN_1_SIZE];  // Buffer for input
    preprocess_image(images, input_data, AI_NETWORK_IN_1_SIZE); //  preprocessing img
 8001136:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <test_ai_model+0xec>)
 8001138:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800113c:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8001140:	443b      	add	r3, r7
 8001142:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001146:	4619      	mov	r1, r3
 8001148:	4834      	ldr	r0, [pc, #208]	@ (800121c <test_ai_model+0xf0>)
 800114a:	f7ff ff8b 	bl	8001064 <preprocess_image>
    ai_error ai_err;
    ai_buffer ai_input[AI_NETWORK_IN_NUM]; //hold preprecessed image
    ai_buffer ai_output[AI_NETWORK_OUT_NUM];
    float output_data[AI_NETWORK_OUT_1_SIZE]; // Buffer for output

    ai_input[0].data = AI_HANDLE_PTR(input_data); //define a pointer to the specific type
 800114e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001152:	461a      	mov	r2, r3
 8001154:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <test_ai_model+0xec>)
 8001156:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800115a:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800115e:	443b      	add	r3, r7
 8001160:	f842 3c20 	str.w	r3, [r2, #-32]
    ai_output[0].data = AI_HANDLE_PTR(output_data);
 8001164:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001168:	461a      	mov	r2, r3
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <test_ai_model+0xf4>)
 800116c:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001170:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8001174:	443b      	add	r3, r7
 8001176:	f842 3c3c 	str.w	r3, [r2, #-60]

    // 3. Run inference
    nbatch = ai_network_run(network, ai_input, ai_output);
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <test_ai_model+0xf8>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	4a2a      	ldr	r2, [pc, #168]	@ (8001228 <test_ai_model+0xfc>)
 8001180:	f24c 0348 	movw	r3, #49224	@ 0xc048
 8001184:	4413      	add	r3, r2
 8001186:	19da      	adds	r2, r3, r7
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <test_ai_model+0x100>)
 800118a:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800118e:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8001192:	443b      	add	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	f004 fa87 	bl	80056a8 <ai_network_run>
 800119a:	f24c 0344 	movw	r3, #49220	@ 0xc044
 800119e:	443b      	add	r3, r7
 80011a0:	6018      	str	r0, [r3, #0]
    if (nbatch != 1) {
 80011a2:	f24c 0344 	movw	r3, #49220	@ 0xc044
 80011a6:	443b      	add	r3, r7
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d003      	beq.n	80011b6 <test_ai_model+0x8a>
        printf("Error during inference\n");
 80011ae:	4820      	ldr	r0, [pc, #128]	@ (8001230 <test_ai_model+0x104>)
 80011b0:	f008 f94a 	bl	8009448 <puts>
 80011b4:	e02b      	b.n	800120e <test_ai_model+0xe2>
        return;
    }

    // 4. Process the output
    printf("Cat confidence: %.2f\n", output_data[0]);
 80011b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9e2 	bl	8000588 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	481a      	ldr	r0, [pc, #104]	@ (8001234 <test_ai_model+0x108>)
 80011ca:	f008 f8d5 	bl	8009378 <iprintf>
    printf("Dog confidence: %.2f\n", output_data[1]);
 80011ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9d6 	bl	8000588 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4815      	ldr	r0, [pc, #84]	@ (8001238 <test_ai_model+0x10c>)
 80011e2:	f008 f8c9 	bl	8009378 <iprintf>

    if (output_data[0] > output_data[1]) {
 80011e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011ea:	ed13 7a11 	vldr	s14, [r3, #-68]	@ 0xffffffbc
 80011ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011f2:	ed53 7a10 	vldr	s15, [r3, #-64]	@ 0xffffffc0
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd03      	ble.n	8001208 <test_ai_model+0xdc>
        printf("It's a Cat!\n");
 8001200:	480e      	ldr	r0, [pc, #56]	@ (800123c <test_ai_model+0x110>)
 8001202:	f008 f921 	bl	8009448 <puts>
 8001206:	e002      	b.n	800120e <test_ai_model+0xe2>
    } else {
        printf("It's a Dog!\n");
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <test_ai_model+0x114>)
 800120a:	f008 f91d 	bl	8009448 <puts>
    }
}
 800120e:	f507 4740 	add.w	r7, r7, #49152	@ 0xc000
 8001212:	3748      	adds	r7, #72	@ 0x48
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	ffff3ffc 	.word	0xffff3ffc
 800121c:	0800c004 	.word	0x0800c004
 8001220:	ffff3fbc 	.word	0xffff3fbc
 8001224:	20000df0 	.word	0x20000df0
 8001228:	ffff3fc0 	.word	0xffff3fc0
 800122c:	ffff3fdc 	.word	0xffff3fdc
 8001230:	0800b308 	.word	0x0800b308
 8001234:	0800b320 	.word	0x0800b320
 8001238:	0800b338 	.word	0x0800b338
 800123c:	0800b350 	.word	0x0800b350
 8001240:	0800b35c 	.word	0x0800b35c

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 f9d8 	bl	8009608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <SystemClock_Config+0xd0>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	4a29      	ldr	r2, [pc, #164]	@ (8001314 <SystemClock_Config+0xd0>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	@ 0x40
 8001274:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <SystemClock_Config+0xd0>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <SystemClock_Config+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a24      	ldr	r2, [pc, #144]	@ (8001318 <SystemClock_Config+0xd4>)
 8001286:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80012ac:	230c      	movs	r3, #12
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012b0:	2332      	movs	r3, #50	@ 0x32
 80012b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012b8:	2309      	movs	r3, #9
 80012ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f8ad 	bl	8003420 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012cc:	f000 fcf4 	bl	8001cb8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d0:	f001 fd42 	bl	8002d58 <HAL_PWREx_EnableOverDrive>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012da:	f000 fced 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012de:	230f      	movs	r3, #15
 80012e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e2:	2302      	movs	r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2101      	movs	r1, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fa78 	bl	80037f0 <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001306:	f000 fcd7 	bl	8001cb8 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3750      	adds	r7, #80	@ 0x50
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <MX_CRC_Init+0x3c>)
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <MX_CRC_Init+0x40>)
 8001324:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_CRC_Init+0x3c>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_CRC_Init+0x3c>)
 800132e:	2200      	movs	r2, #0
 8001330:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_CRC_Init+0x3c>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <MX_CRC_Init+0x3c>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_CRC_Init+0x3c>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_CRC_Init+0x3c>)
 8001346:	f001 f9ef 	bl	8002728 <HAL_CRC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001350:	f000 fcb2 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000d04 	.word	0x20000d04
 800135c:	40023000 	.word	0x40023000

08001360 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <MX_DMA2D_Init+0x60>)
 8001368:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 800138a:	2200      	movs	r2, #0
 800138c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001390:	2200      	movs	r2, #0
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 8001396:	f001 fb23 	bl	80029e0 <HAL_DMA2D_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80013a0:	f000 fc8a 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013a4:	2101      	movs	r1, #1
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_DMA2D_Init+0x5c>)
 80013a8:	f001 fb46 	bl	8002a38 <HAL_DMA2D_ConfigLayer>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80013b2:	f000 fc81 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000d28 	.word	0x20000d28
 80013c0:	4002b000 	.word	0x4002b000

080013c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	@ (8001420 <MX_USART1_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <MX_USART1_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_USART1_UART_Init+0x58>)
 8001408:	f002 ffde 	bl	80043c8 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 fc51 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000d68 	.word	0x20000d68
 8001420:	40011000 	.word	0x40011000

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b090      	sub	sp, #64	@ 0x40
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4bad      	ldr	r3, [pc, #692]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4aac      	ldr	r2, [pc, #688]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4baa      	ldr	r3, [pc, #680]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001452:	4ba7      	ldr	r3, [pc, #668]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4aa6      	ldr	r2, [pc, #664]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4ba4      	ldr	r3, [pc, #656]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4ba1      	ldr	r3, [pc, #644]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4aa0      	ldr	r2, [pc, #640]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b9e      	ldr	r3, [pc, #632]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b9b      	ldr	r3, [pc, #620]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a9a      	ldr	r2, [pc, #616]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b98      	ldr	r3, [pc, #608]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b95      	ldr	r3, [pc, #596]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a94      	ldr	r2, [pc, #592]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b92      	ldr	r3, [pc, #584]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b8f      	ldr	r3, [pc, #572]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a8e      	ldr	r2, [pc, #568]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b8c      	ldr	r3, [pc, #560]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014ca:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a88      	ldr	r2, [pc, #544]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b86      	ldr	r3, [pc, #536]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014e2:	4b83      	ldr	r3, [pc, #524]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a82      	ldr	r2, [pc, #520]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b80      	ldr	r3, [pc, #512]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014fa:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a7c      	ldr	r2, [pc, #496]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b7a      	ldr	r3, [pc, #488]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	4b77      	ldr	r3, [pc, #476]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a76      	ldr	r2, [pc, #472]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	4b71      	ldr	r3, [pc, #452]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a70      	ldr	r2, [pc, #448]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b6e      	ldr	r3, [pc, #440]	@ (80016f0 <MX_GPIO_Init+0x2cc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2120      	movs	r1, #32
 8001546:	486b      	ldr	r0, [pc, #428]	@ (80016f4 <MX_GPIO_Init+0x2d0>)
 8001548:	f001 fba0 	bl	8002c8c <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|LED_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f241 010d 	movw	r1, #4109	@ 0x100d
 8001552:	4869      	ldr	r0, [pc, #420]	@ (80016f8 <MX_GPIO_Init+0x2d4>)
 8001554:	f001 fb9a 	bl	8002c8c <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2108      	movs	r1, #8
 800155c:	4867      	ldr	r0, [pc, #412]	@ (80016fc <MX_GPIO_Init+0x2d8>)
 800155e:	f001 fb95 	bl	8002c8c <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001568:	4865      	ldr	r0, [pc, #404]	@ (8001700 <MX_GPIO_Init+0x2dc>)
 800156a:	f001 fb8f 	bl	8002c8c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	21c8      	movs	r1, #200	@ 0xc8
 8001572:	4864      	ldr	r0, [pc, #400]	@ (8001704 <MX_GPIO_Init+0x2e0>)
 8001574:	f001 fb8a 	bl	8002c8c <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001578:	2308      	movs	r3, #8
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	485f      	ldr	r0, [pc, #380]	@ (8001708 <MX_GPIO_Init+0x2e4>)
 800158c:	f001 fa9a 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001590:	2304      	movs	r3, #4
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015a0:	2309      	movs	r3, #9
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4857      	ldr	r0, [pc, #348]	@ (8001708 <MX_GPIO_Init+0x2e4>)
 80015ac:	f001 fa8a 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80015b0:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c2:	230b      	movs	r3, #11
 80015c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	484d      	ldr	r0, [pc, #308]	@ (8001704 <MX_GPIO_Init+0x2e0>)
 80015ce:	f001 fa79 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80015d2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e4:	230c      	movs	r3, #12
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ec:	4619      	mov	r1, r3
 80015ee:	4846      	ldr	r0, [pc, #280]	@ (8001708 <MX_GPIO_Init+0x2e4>)
 80015f0:	f001 fa68 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80015f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fa:	2312      	movs	r3, #18
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001606:	2304      	movs	r3, #4
 8001608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	483e      	ldr	r0, [pc, #248]	@ (800170c <MX_GPIO_Init+0x2e8>)
 8001612:	f001 fa57 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001616:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001628:	230a      	movs	r3, #10
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001630:	4619      	mov	r1, r3
 8001632:	4836      	ldr	r0, [pc, #216]	@ (800170c <MX_GPIO_Init+0x2e8>)
 8001634:	f001 fa46 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001638:	2310      	movs	r3, #16
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001648:	2302      	movs	r3, #2
 800164a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	482e      	ldr	r0, [pc, #184]	@ (800170c <MX_GPIO_Init+0x2e8>)
 8001654:	f001 fa36 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001668:	2308      	movs	r3, #8
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001670:	4619      	mov	r1, r3
 8001672:	4820      	ldr	r0, [pc, #128]	@ (80016f4 <MX_GPIO_Init+0x2d0>)
 8001674:	f001 fa26 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D2_Pin PC9 PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D2_Pin|GPIO_PIN_9|GPIO_PIN_8;
 8001678:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800168a:	230c      	movs	r3, #12
 800168c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	481e      	ldr	r0, [pc, #120]	@ (8001710 <MX_GPIO_Init+0x2ec>)
 8001696:	f001 fa15 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800169a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ac:	2301      	movs	r3, #1
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b4:	4619      	mov	r1, r3
 80016b6:	4817      	ldr	r0, [pc, #92]	@ (8001714 <MX_GPIO_Init+0x2f0>)
 80016b8:	f001 fa04 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80016bc:	2360      	movs	r3, #96	@ 0x60
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016cc:	230d      	movs	r3, #13
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	@ (8001708 <MX_GPIO_Init+0x2e4>)
 80016d8:	f001 f9f4 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80016dc:	2340      	movs	r3, #64	@ 0x40
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ec:	230a      	movs	r3, #10
 80016ee:	e013      	b.n	8001718 <MX_GPIO_Init+0x2f4>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40022800 	.word	0x40022800
 8001700:	40021c00 	.word	0x40021c00
 8001704:	40021800 	.word	0x40021800
 8001708:	40021000 	.word	0x40021000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020000 	.word	0x40020000
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171e:	4619      	mov	r1, r3
 8001720:	48bc      	ldr	r0, [pc, #752]	@ (8001a14 <MX_GPIO_Init+0x5f0>)
 8001722:	f001 f9cf 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001726:	f248 1333 	movw	r3, #33075	@ 0x8133
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001738:	230c      	movs	r3, #12
 800173a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800173c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001740:	4619      	mov	r1, r3
 8001742:	48b5      	ldr	r0, [pc, #724]	@ (8001a18 <MX_GPIO_Init+0x5f4>)
 8001744:	f001 f9be 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175a:	4619      	mov	r1, r3
 800175c:	48af      	ldr	r0, [pc, #700]	@ (8001a1c <MX_GPIO_Init+0x5f8>)
 800175e:	f001 f9b1 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001762:	2340      	movs	r3, #64	@ 0x40
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001766:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001774:	4619      	mov	r1, r3
 8001776:	48aa      	ldr	r0, [pc, #680]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 8001778:	f001 f9a4 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800177c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800178e:	230c      	movs	r3, #12
 8001790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	48a1      	ldr	r0, [pc, #644]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 800179a:	f001 f993 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800179e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b0:	230a      	movs	r3, #10
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	489a      	ldr	r0, [pc, #616]	@ (8001a24 <MX_GPIO_Init+0x600>)
 80017bc:	f001 f982 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80017c0:	23f0      	movs	r3, #240	@ 0xf0
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017d0:	230a      	movs	r3, #10
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	4893      	ldr	r0, [pc, #588]	@ (8001a28 <MX_GPIO_Init+0x604>)
 80017dc:	f001 f972 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80017e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017f2:	230a      	movs	r3, #10
 80017f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4886      	ldr	r0, [pc, #536]	@ (8001a18 <MX_GPIO_Init+0x5f4>)
 80017fe:	f001 f961 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001802:	2320      	movs	r3, #32
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001816:	4619      	mov	r1, r3
 8001818:	4881      	ldr	r0, [pc, #516]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 800181a:	f001 f953 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800181e:	2308      	movs	r3, #8
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800182e:	230d      	movs	r3, #13
 8001830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001836:	4619      	mov	r1, r3
 8001838:	4879      	ldr	r0, [pc, #484]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 800183a:	f001 f943 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin LED_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|LED_Pin;
 800183e:	f241 030d 	movw	r3, #4109	@ 0x100d
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	4874      	ldr	r0, [pc, #464]	@ (8001a28 <MX_GPIO_Init+0x604>)
 8001858:	f001 f934 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800185c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	486e      	ldr	r0, [pc, #440]	@ (8001a2c <MX_GPIO_Init+0x608>)
 8001872:	f001 f927 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001876:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001888:	230c      	movs	r3, #12
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	4867      	ldr	r0, [pc, #412]	@ (8001a30 <MX_GPIO_Init+0x60c>)
 8001894:	f001 f916 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001898:	2308      	movs	r3, #8
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ac:	4619      	mov	r1, r3
 80018ae:	4861      	ldr	r0, [pc, #388]	@ (8001a34 <MX_GPIO_Init+0x610>)
 80018b0:	f001 f908 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80018b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80018c6:	230d      	movs	r3, #13
 80018c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4851      	ldr	r0, [pc, #324]	@ (8001a18 <MX_GPIO_Init+0x5f4>)
 80018d2:	f001 f8f7 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018d6:	2310      	movs	r3, #16
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	484d      	ldr	r0, [pc, #308]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 80018ea:	f001 f8eb 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80018ee:	2304      	movs	r3, #4
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018fe:	230c      	movs	r3, #12
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001906:	4619      	mov	r1, r3
 8001908:	4845      	ldr	r0, [pc, #276]	@ (8001a20 <MX_GPIO_Init+0x5fc>)
 800190a:	f001 f8db 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800190e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	4845      	ldr	r0, [pc, #276]	@ (8001a38 <MX_GPIO_Init+0x614>)
 8001924:	f001 f8ce 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001928:	2302      	movs	r3, #2
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001938:	2305      	movs	r3, #5
 800193a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4839      	ldr	r0, [pc, #228]	@ (8001a28 <MX_GPIO_Init+0x604>)
 8001944:	f001 f8be 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4835      	ldr	r0, [pc, #212]	@ (8001a38 <MX_GPIO_Init+0x614>)
 8001962:	f001 f8af 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001966:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001978:	230d      	movs	r3, #13
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	482d      	ldr	r0, [pc, #180]	@ (8001a38 <MX_GPIO_Init+0x614>)
 8001984:	f001 f89e 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800199a:	2301      	movs	r3, #1
 800199c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	481f      	ldr	r0, [pc, #124]	@ (8001a24 <MX_GPIO_Init+0x600>)
 80019a6:	f001 f88d 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <MX_GPIO_Init+0x604>)
 80019c2:	f001 f87f 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80019c6:	23c0      	movs	r3, #192	@ 0xc0
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019d6:	2308      	movs	r3, #8
 80019d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019de:	4619      	mov	r1, r3
 80019e0:	4812      	ldr	r0, [pc, #72]	@ (8001a2c <MX_GPIO_Init+0x608>)
 80019e2:	f001 f86f 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019e6:	2310      	movs	r3, #16
 80019e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019f6:	230a      	movs	r3, #10
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <MX_GPIO_Init+0x614>)
 8001a02:	f001 f85f 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001a06:	2328      	movs	r3, #40	@ 0x28
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e014      	b.n	8001a3c <MX_GPIO_Init+0x618>
 8001a12:	bf00      	nop
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40022400 	.word	0x40022400
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40022800 	.word	0x40022800
 8001a38:	40021c00 	.word	0x40021c00
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	230c      	movs	r3, #12
 8001a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4878      	ldr	r0, [pc, #480]	@ (8001c30 <MX_GPIO_Init+0x80c>)
 8001a4e:	f001 f839 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a52:	23c8      	movs	r3, #200	@ 0xc8
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a66:	4619      	mov	r1, r3
 8001a68:	4872      	ldr	r0, [pc, #456]	@ (8001c34 <MX_GPIO_Init+0x810>)
 8001a6a:	f001 f82b 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001a6e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	486d      	ldr	r0, [pc, #436]	@ (8001c38 <MX_GPIO_Init+0x814>)
 8001a84:	f001 f81e 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4866      	ldr	r0, [pc, #408]	@ (8001c3c <MX_GPIO_Init+0x818>)
 8001aa4:	f001 f80e 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	485e      	ldr	r0, [pc, #376]	@ (8001c3c <MX_GPIO_Init+0x818>)
 8001ac4:	f000 fffe 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ac8:	2332      	movs	r3, #50	@ 0x32
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4856      	ldr	r0, [pc, #344]	@ (8001c3c <MX_GPIO_Init+0x818>)
 8001ae4:	f000 ffee 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001af8:	2309      	movs	r3, #9
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b00:	4619      	mov	r1, r3
 8001b02:	484f      	ldr	r0, [pc, #316]	@ (8001c40 <MX_GPIO_Init+0x81c>)
 8001b04:	f000 ffde 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001b08:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4847      	ldr	r0, [pc, #284]	@ (8001c44 <MX_GPIO_Init+0x820>)
 8001b26:	f000 ffcd 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	483d      	ldr	r0, [pc, #244]	@ (8001c34 <MX_GPIO_Init+0x810>)
 8001b3e:	f000 ffc1 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b42:	2386      	movs	r3, #134	@ 0x86
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b52:	230b      	movs	r3, #11
 8001b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	483a      	ldr	r0, [pc, #232]	@ (8001c48 <MX_GPIO_Init+0x824>)
 8001b5e:	f000 ffb1 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b72:	2308      	movs	r3, #8
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4832      	ldr	r0, [pc, #200]	@ (8001c48 <MX_GPIO_Init+0x824>)
 8001b7e:	f000 ffa1 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b82:	2350      	movs	r3, #80	@ 0x50
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b92:	230d      	movs	r3, #13
 8001b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	482a      	ldr	r0, [pc, #168]	@ (8001c48 <MX_GPIO_Init+0x824>)
 8001b9e:	f000 ff91 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ba2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481c      	ldr	r0, [pc, #112]	@ (8001c30 <MX_GPIO_Init+0x80c>)
 8001bc0:	f000 ff80 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bc4:	2328      	movs	r3, #40	@ 0x28
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <MX_GPIO_Init+0x824>)
 8001be0:	f000 ff70 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001be4:	2340      	movs	r3, #64	@ 0x40
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <MX_GPIO_Init+0x80c>)
 8001c00:	f000 ff60 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001c04:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c16:	2305      	movs	r3, #5
 8001c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_GPIO_Init+0x81c>)
 8001c22:	f000 ff4f 	bl	8002ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c26:	bf00      	nop
 8001c28:	3740      	adds	r7, #64	@ 0x40
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40020000 	.word	0x40020000

08001c4c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c52:	463b      	mov	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c5e:	f000 fd19 	bl	8002694 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001c6a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8001c6e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001c70:	2317      	movs	r3, #23
 8001c72:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c90:	463b      	mov	r3, r7
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fd1c 	bl	80026d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8001c9c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001ca0:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd13 	bl	80026d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001caa:	2004      	movs	r0, #4
 8001cac:	f000 fd00 	bl	80026b0 <HAL_MPU_Enable>

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <Error_Handler+0x8>

08001cc4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_MspInit+0x2c>)
{
 8001cc6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	b002      	add	sp, #8
 8001cee:	4770      	bx	lr
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001cf4:	6802      	ldr	r2, [r0, #0]
{
 8001cf6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_CRC_MspInit+0x28>)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10b      	bne.n	8001d16 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cfe:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 8001d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d16:	b002      	add	sp, #8
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023000 	.word	0x40023000

08001d20 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001d20:	6802      	ldr	r2, [r0, #0]
{
 8001d22:	b082      	sub	sp, #8
  if(hdma2d->Instance==DMA2D)
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_DMA2D_MspInit+0x24>)
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d10a      	bne.n	8001d40 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d2a:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d40:	b002      	add	sp, #8
 8001d42:	4770      	bx	lr
 8001d44:	4002b000 	.word	0x4002b000

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	b0aa      	sub	sp, #168	@ 0xa8
 8001d4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	2214      	movs	r2, #20
 8001d50:	2100      	movs	r1, #0
 8001d52:	a804      	add	r0, sp, #16
 8001d54:	f007 fc58 	bl	8009608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d58:	2284      	movs	r2, #132	@ 0x84
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	a809      	add	r0, sp, #36	@ 0x24
 8001d5e:	f007 fc53 	bl	8009608 <memset>
  if(huart->Instance==USART1)
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <HAL_UART_MspInit+0xa0>)
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d13c      	bne.n	8001de4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d6a:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6c:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d6e:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d70:	f001 fe02 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8001d74:	b108      	cbz	r0, 8001d7a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001d76:	f7ff ff9f 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_UART_MspInit+0xa4>)
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d80:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d84:	a904      	add	r1, sp, #16
 8001d86:	481a      	ldr	r0, [pc, #104]	@ (8001df0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d88:	f042 0210 	orr.w	r2, r2, #16
 8001d8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d90:	f002 0210 	and.w	r2, r2, #16
 8001d94:	9201      	str	r2, [sp, #4]
 8001d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d9a:	f042 0202 	orr.w	r2, r2, #2
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001da2:	f002 0202 	and.w	r2, r2, #2
 8001da6:	9202      	str	r2, [sp, #8]
 8001da8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db4:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	9303      	str	r3, [sp, #12]
 8001dbc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f000 fe7b 	bl	8002ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	a904      	add	r1, sp, #16
 8001dd4:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f000 fe70 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de4:	b02a      	add	sp, #168	@ 0xa8
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020000 	.word	0x40020000

08001df8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler>

08001dfa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <HardFault_Handler>

08001dfc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler>

08001dfe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler>

08001e00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler>

08001e02 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	4770      	bx	lr

08001e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 bba8 	b.w	800255c <HAL_IncTick>

08001e0c <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */

void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8001e0c:	4801      	ldr	r0, [pc, #4]	@ (8001e14 <LTDC_IRQHandler+0x8>)
 8001e0e:	f000 bf45 	b.w	8002c9c <HAL_LTDC_IRQHandler>
 8001e12:	bf00      	nop
 8001e14:	20000df8 	.word	0x20000df8

08001e18 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e18:	2001      	movs	r0, #1
 8001e1a:	4770      	bx	lr

08001e1c <_kill>:

int _kill(int pid, int sig)
{
 8001e1c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1e:	f007 fc67 	bl	80096f0 <__errno>
 8001e22:	2316      	movs	r3, #22
 8001e24:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e2a:	bd08      	pop	{r3, pc}

08001e2c <_exit>:

void _exit (int status)
{
 8001e2c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001e2e:	f007 fc5f 	bl	80096f0 <__errno>
 8001e32:	2316      	movs	r3, #22
 8001e34:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001e36:	e7fe      	b.n	8001e36 <_exit+0xa>

08001e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	460d      	mov	r5, r1
 8001e3c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	460e      	mov	r6, r1
 8001e40:	1b73      	subs	r3, r6, r5
 8001e42:	429c      	cmp	r4, r3
 8001e44:	dc01      	bgt.n	8001e4a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001e46:	4620      	mov	r0, r4
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001e4a:	f3af 8000 	nop.w
 8001e4e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	e7f5      	b.n	8001e40 <_read+0x8>

08001e54 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e58:	4770      	bx	lr

08001e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001e5e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001e60:	604b      	str	r3, [r1, #4]
}
 8001e62:	4770      	bx	lr

08001e64 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001e64:	2001      	movs	r0, #1
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001e68:	2000      	movs	r0, #0
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <_sbrk+0x30>)
{
 8001e6e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001e70:	6811      	ldr	r1, [r2, #0]
{
 8001e72:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001e74:	b909      	cbnz	r1, 8001e7a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001e76:	490a      	ldr	r1, [pc, #40]	@ (8001ea0 <_sbrk+0x34>)
 8001e78:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	6810      	ldr	r0, [r2, #0]
 8001e7c:	4909      	ldr	r1, [pc, #36]	@ (8001ea4 <_sbrk+0x38>)
 8001e7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea8 <_sbrk+0x3c>)
 8001e80:	4403      	add	r3, r0
 8001e82:	1b09      	subs	r1, r1, r4
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d906      	bls.n	8001e96 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001e88:	f007 fc32 	bl	80096f0 <__errno>
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001e94:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001e96:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001e98:	e7fc      	b.n	8001e94 <_sbrk+0x28>
 8001e9a:	bf00      	nop
 8001e9c:	20000df4 	.word	0x20000df4
 8001ea0:	200012f0 	.word	0x200012f0
 8001ea4:	20050000 	.word	0x20050000
 8001ea8:	00000800 	.word	0x00000800

08001eac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <SystemInit+0x10>)
 8001eae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001eb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	@ (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffdf 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f007 fc05 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff f899 	bl	8001028 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000ce4 	.word	0x20000ce4
  ldr r2, =_sidata
 8001f04:	0801a7b0 	.word	0x0801a7b0
  ldr r2, =_sbss
 8001f08:	20000ce8 	.word	0x20000ce8
  ldr r4, =_ebss
 8001f0c:	200012f0 	.word	0x200012f0

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001f14:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001f1a:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001f1c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001f20:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f22:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001f24:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001f26:	910f      	str	r1, [sp, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8001f28:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001f2a:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001f2c:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8001f2e:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8001f30:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f32:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8001f34:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001f36:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8001f38:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f3c:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f40:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8001f44:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001f46:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8001f48:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001f4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f4e:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001f50:	466a      	mov	r2, sp
 8001f52:	f001 f8c6 	bl	80030e2 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8001f56:	3800      	subs	r0, #0
 8001f58:	bf18      	it	ne
 8001f5a:	2001      	movne	r0, #1
 8001f5c:	b015      	add	sp, #84	@ 0x54
 8001f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f62:	bf00      	nop
 8001f64:	20000ea0 	.word	0x20000ea0

08001f68 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001f68:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001f6e:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4817      	ldr	r0, [pc, #92]	@ (8001fd4 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f76:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001f78:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f7a:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001f7c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001f7e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f80:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8001f84:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8001f86:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f88:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f8a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f8e:	f001 f863 	bl	8003058 <HAL_QSPI_Command>
 8001f92:	b9e0      	cbnz	r0, 8001fce <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8001f94:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8001f96:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001f98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001f9c:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8001fa0:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001faa:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fac:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001fae:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fb6:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001fb8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fbe:	f001 f890 	bl	80030e2 <HAL_QSPI_AutoPolling>
 8001fc2:	3800      	subs	r0, #0
 8001fc4:	bf18      	it	ne
 8001fc6:	2001      	movne	r0, #1
}
 8001fc8:	b015      	add	sp, #84	@ 0x54
 8001fca:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e7fa      	b.n	8001fc8 <QSPI_WriteEnable.constprop.0+0x60>
 8001fd2:	bf00      	nop
 8001fd4:	20000ea0 	.word	0x20000ea0

08001fd8 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8001fd8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8001fde:	b091      	sub	sp, #68	@ 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001fe0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001fe4:	480e      	ldr	r0, [pc, #56]	@ (8002020 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fe6:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001fe8:	23eb      	movs	r3, #235	@ 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001fea:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001fec:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001fee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ff2:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001ff4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff8:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002000:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002002:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002004:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002006:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002008:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800200c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002010:	f001 f8b8 	bl	8003184 <HAL_QSPI_MemoryMapped>
}
 8002014:	3800      	subs	r0, #0
 8002016:	bf18      	it	ne
 8002018:	2001      	movne	r0, #1
 800201a:	b011      	add	sp, #68	@ 0x44
 800201c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002020:	20000ea0 	.word	0x20000ea0

08002024 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8002024:	4b45      	ldr	r3, [pc, #276]	@ (800213c <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002026:	2101      	movs	r1, #1
  QSPI_CLK_ENABLE();
 8002028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800202a:	f042 0202 	orr.w	r2, r2, #2
{
 800202e:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8002030:	639a      	str	r2, [r3, #56]	@ 0x38
{
 8002032:	b08d      	sub	sp, #52	@ 0x34
  QSPI_CLK_ENABLE();
 8002034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002036:	2409      	movs	r4, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002038:	4d41      	ldr	r5, [pc, #260]	@ (8002140 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800203a:	2704      	movs	r7, #4
  QSPI_CLK_ENABLE();
 800203c:	f002 0202 	and.w	r2, r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002040:	2600      	movs	r6, #0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002042:	4628      	mov	r0, r5
  QSPI_CLK_ENABLE();
 8002044:	9200      	str	r2, [sp, #0]
 8002046:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	f042 0202 	orr.w	r2, r2, #2
 800204e:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	f022 0202 	bic.w	r2, r2, #2
 8002056:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8002058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800205a:	f042 0202 	orr.w	r2, r2, #2
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002062:	f002 0202 	and.w	r2, r2, #2
 8002066:	9201      	str	r2, [sp, #4]
 8002068:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800206a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800206c:	f042 0202 	orr.w	r2, r2, #2
 8002070:	631a      	str	r2, [r3, #48]	@ 0x30
 8002072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002074:	f002 0202 	and.w	r2, r2, #2
 8002078:	9202      	str	r2, [sp, #8]
 800207a:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 800207c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
 8002084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002086:	f002 0208 	and.w	r2, r2, #8
 800208a:	9203      	str	r2, [sp, #12]
 800208c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800208e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002090:	f042 0208 	orr.w	r2, r2, #8
 8002094:	631a      	str	r2, [r3, #48]	@ 0x30
 8002096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002098:	f002 0208 	and.w	r2, r2, #8
 800209c:	9204      	str	r2, [sp, #16]
 800209e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80020a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020aa:	f002 0210 	and.w	r2, r2, #16
 80020ae:	9205      	str	r2, [sp, #20]
 80020b0:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 80020b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b4:	f042 0208 	orr.w	r2, r2, #8
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80020ba:	2240      	movs	r2, #64	@ 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	9306      	str	r3, [sp, #24]
 80020c4:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80020d2:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80020d4:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80020d6:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80020d8:	f000 fcf4 	bl	8002ac4 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80020dc:	a907      	add	r1, sp, #28
 80020de:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80020e0:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80020e2:	9609      	str	r6, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80020e4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80020e6:	f000 fced 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80020ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80020ee:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80020f0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80020f2:	441d      	add	r5, r3
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80020f4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80020f6:	4628      	mov	r0, r5
 80020f8:	f000 fce4 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80020fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002100:	a907      	add	r1, sp, #28
 8002102:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002104:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002106:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002108:	f000 fcdc 	bl	8002ac4 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800210c:	a907      	add	r1, sp, #28
 800210e:	480d      	ldr	r0, [pc, #52]	@ (8002144 <BSP_QSPI_MspInit+0x120>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002110:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002112:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002114:	f000 fcd6 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800211c:	a907      	add	r1, sp, #28
 800211e:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002120:	940b      	str	r4, [sp, #44]	@ 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002122:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002124:	f000 fcce 	bl	8002ac4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002128:	4632      	mov	r2, r6
 800212a:	210f      	movs	r1, #15
 800212c:	205c      	movs	r0, #92	@ 0x5c
 800212e:	f000 fa5d 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002132:	205c      	movs	r0, #92	@ 0x5c
 8002134:	f000 fa8c 	bl	8002650 <HAL_NVIC_EnableIRQ>
}
 8002138:	b00d      	add	sp, #52	@ 0x34
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	40020400 	.word	0x40020400
 8002144:	40021000 	.word	0x40021000

08002148 <BSP_QSPI_Init>:
{ 
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800214a:	4c49      	ldr	r4, [pc, #292]	@ (8002270 <BSP_QSPI_Init+0x128>)
{ 
 800214c:	b091      	sub	sp, #68	@ 0x44
  QSPIHandle.Instance = QUADSPI;
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002150:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8002152:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002154:	f000 ff6d 	bl	8003032 <HAL_QSPI_DeInit>
 8002158:	4605      	mov	r5, r0
 800215a:	b110      	cbz	r0, 8002162 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 800215c:	2001      	movs	r0, #1
}
 800215e:	b011      	add	sp, #68	@ 0x44
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002162:	4601      	mov	r1, r0
 8002164:	4620      	mov	r0, r4
 8002166:	f7ff ff5d 	bl	8002024 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 800216a:	2601      	movs	r6, #1
 800216c:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
 8002172:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002176:	2310      	movs	r3, #16
 8002178:	60e3      	str	r3, [r4, #12]
 800217a:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800217e:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002182:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002184:	3b01      	subs	r3, #1
 8002186:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8002188:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 800218c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002190:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002194:	f000 fefa 	bl	8002f8c <HAL_QSPI_Init>
 8002198:	2800      	cmp	r0, #0
 800219a:	d1df      	bne.n	800215c <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800219c:	f44f 7580 	mov.w	r5, #256	@ 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80021a0:	2366      	movs	r3, #102	@ 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 80021a2:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 80021a8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021aa:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80021ac:	900f      	str	r0, [sp, #60]	@ 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80021ae:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80021b0:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021b2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80021b6:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021ba:	4620      	mov	r0, r4
 80021bc:	f000 ff4c 	bl	8003058 <HAL_QSPI_Command>
 80021c0:	b108      	cbz	r0, 80021c6 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 80021c2:	2004      	movs	r0, #4
 80021c4:	e7cb      	b.n	800215e <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80021c6:	2399      	movs	r3, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	a902      	add	r1, sp, #8
 80021ce:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 80021d0:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021d2:	f000 ff41 	bl	8003058 <HAL_QSPI_Command>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d1f3      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80021da:	f241 3088 	movw	r0, #5000	@ 0x1388
 80021de:	f7ff fe99 	bl	8001f14 <QSPI_AutoPollingMemReady.constprop.0>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d1ed      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80021e6:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 80021e8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80021f0:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80021f2:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80021f4:	970b      	str	r7, [sp, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80021fa:	e9cd 600c 	strd	r6, r0, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80021fe:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002202:	4620      	mov	r0, r4
 8002204:	f000 ff28 	bl	8003058 <HAL_QSPI_Command>
 8002208:	2800      	cmp	r0, #0
 800220a:	d1da      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800220c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002210:	f10d 0107 	add.w	r1, sp, #7
 8002214:	4620      	mov	r0, r4
 8002216:	f001 f89f 	bl	8003358 <HAL_QSPI_Receive>
 800221a:	2800      	cmp	r0, #0
 800221c:	d1d1      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800221e:	f7ff fea3 	bl	8001f68 <QSPI_WriteEnable.constprop.0>
 8002222:	2800      	cmp	r0, #0
 8002224:	d1cd      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002226:	2381      	movs	r3, #129	@ 0x81
 8002228:	22f0      	movs	r2, #240	@ 0xf0
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8002230:	210a      	movs	r1, #10
 8002232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002236:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800223a:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002244:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8002246:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800224c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002250:	f000 ff02 	bl	8003058 <HAL_QSPI_Command>
 8002254:	2800      	cmp	r0, #0
 8002256:	d1b4      	bne.n	80021c2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225c:	f10d 0107 	add.w	r1, sp, #7
 8002260:	4620      	mov	r0, r4
 8002262:	f001 f81a 	bl	800329a <HAL_QSPI_Transmit>
 8002266:	2800      	cmp	r0, #0
 8002268:	f43f af79 	beq.w	800215e <BSP_QSPI_Init+0x16>
 800226c:	e7a9      	b.n	80021c2 <BSP_QSPI_Init+0x7a>
 800226e:	bf00      	nop
 8002270:	20000ea0 	.word	0x20000ea0
 8002274:	a0001000 	.word	0xa0001000

08002278 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800227c:	4c21      	ldr	r4, [pc, #132]	@ (8002304 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800227e:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002280:	4d21      	ldr	r5, [pc, #132]	@ (8002308 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8002282:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002286:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002288:	4621      	mov	r1, r4
{
 800228a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800228c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002290:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8002292:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002296:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800229a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800229e:	f001 fe16 	bl	8003ece <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80022a2:	4630      	mov	r0, r6
 80022a4:	f000 f96c 	bl	8002580 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80022a8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022aa:	4621      	mov	r1, r4
 80022ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b0:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022b2:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80022b6:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022ba:	f001 fe08 	bl	8003ece <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022be:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022c0:	4621      	mov	r1, r4
 80022c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c6:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022c8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80022cc:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80022ce:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022d2:	f001 fdfc 	bl	8003ece <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022d6:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022da:	4621      	mov	r1, r4
 80022dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022e0:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022e2:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022e4:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80022e6:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022e8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80022ec:	9b01      	ldr	r3, [sp, #4]
 80022ee:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022f0:	f001 fded 	bl	8003ece <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022f4:	4649      	mov	r1, r9
 80022f6:	4628      	mov	r0, r5
}
 80022f8:	b003      	add	sp, #12
 80022fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022fe:	f001 be05 	b.w	8003f0c <HAL_SDRAM_ProgramRefreshRate>
 8002302:	bf00      	nop
 8002304:	20000f4c 	.word	0x20000f4c
 8002308:	20000f78 	.word	0x20000f78

0800230c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800230c:	4b54      	ldr	r3, [pc, #336]	@ (8002460 <BSP_SDRAM_MspInit+0x154>)
 800230e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002310:	f042 0201 	orr.w	r2, r2, #1
{  
 8002314:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 8002318:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800231a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 800231c:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800231e:	a909      	add	r1, sp, #36	@ 0x24
 8002320:	4850      	ldr	r0, [pc, #320]	@ (8002464 <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002322:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002326:	4c50      	ldr	r4, [pc, #320]	@ (8002468 <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002328:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 800232a:	9201      	str	r2, [sp, #4]
 800232c:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800232e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002330:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
 8002336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002338:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800233c:	9202      	str	r2, [sp, #8]
 800233e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002342:	f042 0204 	orr.w	r2, r2, #4
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
 8002348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234a:	f002 0204 	and.w	r2, r2, #4
 800234e:	9203      	str	r2, [sp, #12]
 8002350:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002354:	f042 0208 	orr.w	r2, r2, #8
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
 800235a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235c:	f002 0208 	and.w	r2, r2, #8
 8002360:	9204      	str	r2, [sp, #16]
 8002362:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002366:	f042 0210 	orr.w	r2, r2, #16
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
 800236c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236e:	f002 0210 	and.w	r2, r2, #16
 8002372:	9205      	str	r2, [sp, #20]
 8002374:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
 800237e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002380:	f002 0220 	and.w	r2, r2, #32
 8002384:	9206      	str	r2, [sp, #24]
 8002386:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002392:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002396:	9207      	str	r2, [sp, #28]
 8002398:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800239c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023a2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	9308      	str	r3, [sp, #32]
 80023ac:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80023b4:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023b6:	230c      	movs	r3, #12
 80023b8:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80023ba:	2308      	movs	r3, #8
 80023bc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80023be:	f000 fb81 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80023c2:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023c6:	a909      	add	r1, sp, #36	@ 0x24
 80023c8:	4828      	ldr	r0, [pc, #160]	@ (800246c <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80023ca:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023cc:	f000 fb7a 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023d0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023d4:	a909      	add	r1, sp, #36	@ 0x24
 80023d6:	4826      	ldr	r0, [pc, #152]	@ (8002470 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023d8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023da:	f000 fb73 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023de:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023e2:	a909      	add	r1, sp, #36	@ 0x24
 80023e4:	4823      	ldr	r0, [pc, #140]	@ (8002474 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023e6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023e8:	f000 fb6c 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80023ec:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023f0:	a909      	add	r1, sp, #36	@ 0x24
 80023f2:	4821      	ldr	r0, [pc, #132]	@ (8002478 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80023f4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023f6:	f000 fb65 	bl	8002ac4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80023fa:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80023fc:	a909      	add	r1, sp, #36	@ 0x24
 80023fe:	481f      	ldr	r0, [pc, #124]	@ (800247c <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002400:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002402:	f000 fb5f 	bl	8002ac4 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002406:	2380      	movs	r3, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002408:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800240c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002410:	6325      	str	r5, [r4, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002412:	6334      	str	r4, [r6, #48]	@ 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002414:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002416:	63a6      	str	r6, [r4, #56]	@ 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002418:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800241c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002420:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002424:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002428:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800242c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002430:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002432:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002436:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002438:	e9c4 350a 	strd	r3, r5, [r4, #40]	@ 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800243c:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <BSP_SDRAM_MspInit+0x174>)
 800243e:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 8002440:	f000 fa66 	bl	8002910 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002444:	4620      	mov	r0, r4
 8002446:	f000 f9e5 	bl	8002814 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800244a:	462a      	mov	r2, r5
 800244c:	210f      	movs	r1, #15
 800244e:	2038      	movs	r0, #56	@ 0x38
 8002450:	f000 f8cc 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002454:	2038      	movs	r0, #56	@ 0x38
 8002456:	f000 f8fb 	bl	8002650 <HAL_NVIC_EnableIRQ>
}
 800245a:	b00e      	add	sp, #56	@ 0x38
 800245c:	bd70      	pop	{r4, r5, r6, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40020800 	.word	0x40020800
 8002468:	20000eec 	.word	0x20000eec
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800
 800247c:	40021c00 	.word	0x40021c00
 8002480:	40026410 	.word	0x40026410

08002484 <BSP_SDRAM_Init>:
{ 
 8002484:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002486:	4c19      	ldr	r4, [pc, #100]	@ (80024ec <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8002488:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 800248c:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 800248e:	4d19      	ldr	r5, [pc, #100]	@ (80024f4 <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002490:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002494:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002496:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002498:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 800249a:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 800249c:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 80024a0:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 80024a4:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024a8:	2210      	movs	r2, #16
 80024aa:	2340      	movs	r3, #64	@ 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80024ac:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024ae:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80024b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80024b6:	62a1      	str	r1, [r4, #40]	@ 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024b8:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80024bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c0:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80024c4:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024c6:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80024ca:	f7ff ff1f 	bl	800230c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80024ce:	4629      	mov	r1, r5
 80024d0:	4620      	mov	r0, r4
 80024d2:	4c09      	ldr	r4, [pc, #36]	@ (80024f8 <BSP_SDRAM_Init+0x74>)
 80024d4:	f001 fcdb 	bl	8003e8e <HAL_SDRAM_Init>
 80024d8:	3800      	subs	r0, #0
 80024da:	bf18      	it	ne
 80024dc:	2001      	movne	r0, #1
 80024de:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80024e0:	f240 6003 	movw	r0, #1539	@ 0x603
 80024e4:	f7ff fec8 	bl	8002278 <BSP_SDRAM_Initialization_sequence>
}
 80024e8:	7820      	ldrb	r0, [r4, #0]
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
 80024ec:	20000f78 	.word	0x20000f78
 80024f0:	a0000140 	.word	0xa0000140
 80024f4:	20000f5c 	.word	0x20000f5c
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_InitTick+0x3c>)
{
 8002500:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002508:	fbb3 f3f2 	udiv	r3, r3, r2
 800250c:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_InitTick+0x40>)
 800250e:	6810      	ldr	r0, [r2, #0]
 8002510:	fbb0 f0f3 	udiv	r0, r0, r3
 8002514:	f000 f8aa 	bl	800266c <HAL_SYSTICK_Config>
 8002518:	4604      	mov	r4, r0
 800251a:	b958      	cbnz	r0, 8002534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251c:	2d0f      	cmp	r5, #15
 800251e:	d809      	bhi.n	8002534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	4602      	mov	r2, r0
 8002522:	4629      	mov	r1, r5
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002528:	f000 f860 	bl	80025ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_InitTick+0x44>)
 800252e:	4620      	mov	r0, r4
 8002530:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
 8002536:	e7fc      	b.n	8002532 <HAL_InitTick+0x36>
 8002538:	20000005 	.word	0x20000005
 800253c:	20000000 	.word	0x20000000
 8002540:	20000008 	.word	0x20000008

08002544 <HAL_Init>:
{
 8002544:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002546:	2003      	movs	r0, #3
 8002548:	f000 f83e 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff ffd5 	bl	80024fc <HAL_InitTick>
  HAL_MspInit();
 8002552:	f7ff fbb7 	bl	8001cc4 <HAL_MspInit>
}
 8002556:	2000      	movs	r0, #0
 8002558:	bd08      	pop	{r3, pc}
	...

0800255c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800255c:	4a03      	ldr	r2, [pc, #12]	@ (800256c <HAL_IncTick+0x10>)
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_IncTick+0x14>)
 8002560:	6811      	ldr	r1, [r2, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	440b      	add	r3, r1
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000fac 	.word	0x20000fac
 8002570:	20000005 	.word	0x20000005

08002574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002574:	4b01      	ldr	r3, [pc, #4]	@ (800257c <HAL_GetTick+0x8>)
 8002576:	6818      	ldr	r0, [r3, #0]
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000fac 	.word	0x20000fac

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fff6 	bl	8002574 <HAL_GetTick>
 8002588:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800258c:	bf1e      	ittt	ne
 800258e:	4b04      	ldrne	r3, [pc, #16]	@ (80025a0 <HAL_Delay+0x20>)
 8002590:	781b      	ldrbne	r3, [r3, #0]
 8002592:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	1b43      	subs	r3, r0, r5
 800259a:	42a3      	cmp	r3, r4
 800259c:	d3fa      	bcc.n	8002594 <HAL_Delay+0x14>
  {
  }
}
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	20000005 	.word	0x20000005

080025a4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 80025a4:	4800      	ldr	r0, [pc, #0]	@ (80025a8 <HAL_GetHalVersion+0x4>)
 80025a6:	4770      	bx	lr
 80025a8:	01030000 	.word	0x01030000

080025ac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80025ac:	4b01      	ldr	r3, [pc, #4]	@ (80025b4 <HAL_GetREVID+0x8>)
 80025ae:	6818      	ldr	r0, [r3, #0]
}
 80025b0:	0c00      	lsrs	r0, r0, #16
 80025b2:	4770      	bx	lr
 80025b4:	e0042000 	.word	0xe0042000

080025b8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80025b8:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <HAL_GetDEVID+0xc>)
 80025ba:	6818      	ldr	r0, [r3, #0]
}
 80025bc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e0042000 	.word	0xe0042000

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4907      	ldr	r1, [pc, #28]	@ (80025e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ca:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ce:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025d6:	0412      	lsls	r2, r2, #16
 80025d8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80025e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ee:	b530      	push	{r4, r5, lr}
 80025f0:	68dc      	ldr	r4, [r3, #12]
 80025f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	bf28      	it	cs
 8002600:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002608:	bf8c      	ite	hi
 800260a:	3c03      	subhi	r4, #3
 800260c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002612:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	fa03 f304 	lsl.w	r3, r3, r4
 8002624:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800262c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800262e:	db06      	blt.n	800263e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002634:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002638:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800263c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	f000 000f 	and.w	r0, r0, #15
 8002642:	4a02      	ldr	r2, [pc, #8]	@ (800264c <HAL_NVIC_SetPriority+0x60>)
 8002644:	5413      	strb	r3, [r2, r0]
 8002646:	e7f9      	b.n	800263c <HAL_NVIC_SetPriority+0x50>
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	e000ed14 	.word	0xe000ed14

08002650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002650:	2800      	cmp	r0, #0
 8002652:	db07      	blt.n	8002664 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002654:	0941      	lsrs	r1, r0, #5
 8002656:	2301      	movs	r3, #1
 8002658:	f000 001f 	and.w	r0, r0, #31
 800265c:	4a02      	ldr	r2, [pc, #8]	@ (8002668 <HAL_NVIC_EnableIRQ+0x18>)
 800265e:	4083      	lsls	r3, r0
 8002660:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	3801      	subs	r0, #1
 800266e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002672:	d20b      	bcs.n	800268c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002674:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_SYSTICK_Config+0x24>)
 800267a:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002684:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002686:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002688:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800268c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002694:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_MPU_Disable+0x18>)
 800269a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800269c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_MPU_Enable+0x1c>)
 80026b2:	f040 0001 	orr.w	r0, r0, #1
 80026b6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026c6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026d0:	7843      	ldrb	r3, [r0, #1]
 80026d2:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <HAL_MPU_ConfigRegion+0x54>)
{
 80026d4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80026d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 80026da:	7801      	ldrb	r1, [r0, #0]
 80026dc:	b1e9      	cbz	r1, 800271a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80026de:	6843      	ldr	r3, [r0, #4]
 80026e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026e6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026ea:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ee:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026f0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026f2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026f6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026fc:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026fe:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002702:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002704:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002708:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800270a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800270e:	7a01      	ldrb	r1, [r0, #8]
 8002710:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002714:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002718:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800271a:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 800271e:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 8002722:	e7f9      	b.n	8002718 <HAL_MPU_ConfigRegion+0x48>
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002728:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800272a:	4604      	mov	r4, r0
 800272c:	b908      	cbnz	r0, 8002732 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002730:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002732:	7f43      	ldrb	r3, [r0, #29]
 8002734:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002738:	b913      	cbnz	r3, 8002740 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800273a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800273c:	f7ff fada 	bl	8001cf4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002740:	2302      	movs	r3, #2
 8002742:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002744:	7923      	ldrb	r3, [r4, #4]
 8002746:	b9e3      	cbnz	r3, 8002782 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <HAL_CRC_Init+0x70>)
 800274c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	f022 0218 	bic.w	r2, r2, #24
 8002754:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002756:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002758:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800275a:	b9d2      	cbnz	r2, 8002792 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800275c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002760:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8002762:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	6961      	ldr	r1, [r4, #20]
 8002768:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800276c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800276e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002770:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800277c:	2301      	movs	r3, #1
 800277e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002780:	e7d6      	b.n	8002730 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002782:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002786:	4620      	mov	r0, r4
 8002788:	f000 f808 	bl	800279c <HAL_CRCEx_Polynomial_Set>
 800278c:	2800      	cmp	r0, #0
 800278e:	d0e2      	beq.n	8002756 <HAL_CRC_Init+0x2e>
 8002790:	e7cd      	b.n	800272e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002792:	6922      	ldr	r2, [r4, #16]
 8002794:	e7e4      	b.n	8002760 <HAL_CRC_Init+0x38>
 8002796:	bf00      	nop
 8002798:	04c11db7 	.word	0x04c11db7

0800279c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800279c:	231f      	movs	r3, #31
{
 800279e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80027a0:	3b01      	subs	r3, #1
 80027a2:	d31d      	bcc.n	80027e0 <HAL_CRCEx_Polynomial_Set+0x44>
 80027a4:	fa21 f403 	lsr.w	r4, r1, r3
 80027a8:	07e4      	lsls	r4, r4, #31
 80027aa:	d5f9      	bpl.n	80027a0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80027ac:	2a10      	cmp	r2, #16
 80027ae:	d013      	beq.n	80027d8 <HAL_CRCEx_Polynomial_Set+0x3c>
 80027b0:	2a10      	cmp	r2, #16
 80027b2:	d804      	bhi.n	80027be <HAL_CRCEx_Polynomial_Set+0x22>
 80027b4:	b13a      	cbz	r2, 80027c6 <HAL_CRCEx_Polynomial_Set+0x2a>
 80027b6:	2a08      	cmp	r2, #8
 80027b8:	d010      	beq.n	80027dc <HAL_CRCEx_Polynomial_Set+0x40>
 80027ba:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80027bc:	e00b      	b.n	80027d6 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 80027be:	2a18      	cmp	r2, #24
 80027c0:	d1fb      	bne.n	80027ba <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 80027c2:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80027c4:	d8f9      	bhi.n	80027ba <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80027c6:	6800      	ldr	r0, [r0, #0]
 80027c8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80027ca:	6883      	ldr	r3, [r0, #8]
 80027cc:	f023 0318 	bic.w	r3, r3, #24
 80027d0:	4313      	orrs	r3, r2
 80027d2:	6083      	str	r3, [r0, #8]
 80027d4:	2000      	movs	r0, #0
}
 80027d6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80027d8:	2b07      	cmp	r3, #7
 80027da:	e7f3      	b.n	80027c4 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	e7f1      	b.n	80027c4 <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 80027e0:	2a10      	cmp	r2, #16
 80027e2:	d1e5      	bne.n	80027b0 <HAL_CRCEx_Polynomial_Set+0x14>
 80027e4:	e7e9      	b.n	80027ba <HAL_CRCEx_Polynomial_Set+0x1e>
	...

080027e8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e8:	6803      	ldr	r3, [r0, #0]
{
 80027ea:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027ec:	2018      	movs	r0, #24
 80027ee:	b2d9      	uxtb	r1, r3
 80027f0:	3910      	subs	r1, #16
 80027f2:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80027f6:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027f8:	4c05      	ldr	r4, [pc, #20]	@ (8002810 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80027fa:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027fc:	5c20      	ldrb	r0, [r4, r0]
 80027fe:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002800:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8002804:	f020 0003 	bic.w	r0, r0, #3
 8002808:	bf88      	it	hi
 800280a:	3004      	addhi	r0, #4
 800280c:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800280e:	bd10      	pop	{r4, pc}
 8002810:	0801001c 	.word	0x0801001c

08002814 <HAL_DMA_Init>:
{
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff feac 	bl	8002574 <HAL_GetTick>
 800281c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800281e:	2c00      	cmp	r4, #0
 8002820:	d060      	beq.n	80028e4 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002822:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8002824:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002826:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800282a:	2300      	movs	r3, #0
 800282c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	07d8      	lsls	r0, r3, #31
 800283e:	d42e      	bmi.n	800289e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002840:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002842:	4832      	ldr	r0, [pc, #200]	@ (800290c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002844:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002846:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002848:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800284c:	432b      	orrs	r3, r5
 800284e:	68e5      	ldr	r5, [r4, #12]
 8002850:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	6925      	ldr	r5, [r4, #16]
 8002854:	432b      	orrs	r3, r5
 8002856:	6965      	ldr	r5, [r4, #20]
 8002858:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	69e5      	ldr	r5, [r4, #28]
 800285c:	430b      	orrs	r3, r1
 800285e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002860:	6a25      	ldr	r5, [r4, #32]
 8002862:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002864:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002866:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002868:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800286a:	bf02      	ittt	eq
 800286c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8002870:	4335      	orreq	r5, r6
 8002872:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002874:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8002876:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8002878:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800287a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800287e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002882:	d135      	bne.n	80028f0 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8002884:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002886:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002888:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800288a:	b38d      	cbz	r5, 80028f0 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800288c:	b991      	cbnz	r1, 80028b4 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800288e:	2801      	cmp	r0, #1
 8002890:	d020      	beq.n	80028d4 <HAL_DMA_Init+0xc0>
 8002892:	f030 0102 	bics.w	r1, r0, #2
 8002896:	d12b      	bne.n	80028f0 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	01e9      	lsls	r1, r5, #7
 800289a:	d529      	bpl.n	80028f0 <HAL_DMA_Init+0xdc>
 800289c:	e01d      	b.n	80028da <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289e:	f7ff fe69 	bl	8002574 <HAL_GetTick>
 80028a2:	1b40      	subs	r0, r0, r5
 80028a4:	2805      	cmp	r0, #5
 80028a6:	d9c7      	bls.n	8002838 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ac:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ae:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028b4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80028b8:	d116      	bne.n	80028e8 <HAL_DMA_Init+0xd4>
    switch (tmp)
 80028ba:	2803      	cmp	r0, #3
 80028bc:	d818      	bhi.n	80028f0 <HAL_DMA_Init+0xdc>
 80028be:	a101      	add	r1, pc, #4	@ (adr r1, 80028c4 <HAL_DMA_Init+0xb0>)
 80028c0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80028c4:	080028db 	.word	0x080028db
 80028c8:	08002899 	.word	0x08002899
 80028cc:	080028db 	.word	0x080028db
 80028d0:	080028d5 	.word	0x080028d5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d4:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80028d8:	d10a      	bne.n	80028f0 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028da:	2340      	movs	r3, #64	@ 0x40
 80028dc:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80028de:	2301      	movs	r3, #1
 80028e0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7e4      	b.n	80028b2 <HAL_DMA_Init+0x9e>
    switch (tmp)
 80028e8:	2802      	cmp	r0, #2
 80028ea:	d9f6      	bls.n	80028da <HAL_DMA_Init+0xc6>
 80028ec:	2803      	cmp	r0, #3
 80028ee:	d0d3      	beq.n	8002898 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80028f0:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7ff ff78 	bl	80027e8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80028fa:	233f      	movs	r3, #63	@ 0x3f
 80028fc:	4093      	lsls	r3, r2
 80028fe:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002902:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002904:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800290a:	e7d2      	b.n	80028b2 <HAL_DMA_Init+0x9e>
 800290c:	f010803f 	.word	0xf010803f

08002910 <HAL_DMA_DeInit>:
{
 8002910:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002912:	4605      	mov	r5, r0
 8002914:	b320      	cbz	r0, 8002960 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002916:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800291a:	2b02      	cmp	r3, #2
 800291c:	b2dc      	uxtb	r4, r3
 800291e:	d01d      	beq.n	800295c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002920:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002922:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800292c:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 800292e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002930:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002932:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002934:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002936:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002938:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293a:	f7ff ff55 	bl	80027e8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002940:	233f      	movs	r3, #63	@ 0x3f
 8002942:	4093      	lsls	r3, r2
 8002944:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002946:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8002948:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800294c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002950:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002954:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8002958:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 800295c:	4620      	mov	r0, r4
 800295e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002960:	2401      	movs	r4, #1
 8002962:	e7fb      	b.n	800295c <HAL_DMA_DeInit+0x4c>

08002964 <HAL_DMA_Abort>:
{
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800296a:	f7ff fe03 	bl	8002574 <HAL_GetTick>
 800296e:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002970:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002974:	2b02      	cmp	r3, #2
 8002976:	d006      	beq.n	8002986 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002978:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800297e:	2300      	movs	r3, #0
 8002980:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002984:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f022 0216 	bic.w	r2, r2, #22
 800298e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002996:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002998:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800299a:	b90a      	cbnz	r2, 80029a0 <HAL_DMA_Abort+0x3c>
 800299c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800299e:	b11a      	cbz	r2, 80029a8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f022 0208 	bic.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f010 0001 	ands.w	r0, r0, #1
 80029b8:	d107      	bne.n	80029ca <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80029bc:	233f      	movs	r3, #63	@ 0x3f
 80029be:	4093      	lsls	r3, r2
 80029c0:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80029c8:	e7d9      	b.n	800297e <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ca:	f7ff fdd3 	bl	8002574 <HAL_GetTick>
 80029ce:	1b40      	subs	r0, r0, r5
 80029d0:	2805      	cmp	r0, #5
 80029d2:	d9ed      	bls.n	80029b0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d4:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d6:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029da:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 80029de:	e7ce      	b.n	800297e <HAL_DMA_Abort+0x1a>

080029e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029e0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80029e2:	4604      	mov	r4, r0
 80029e4:	b330      	cbz	r0, 8002a34 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029e6:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80029ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80029ee:	b91b      	cbnz	r3, 80029f8 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029f0:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029f4:	f7ff f994 	bl	8001d20 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029f8:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029fa:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029fc:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029fe:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a00:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a0a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a0c:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a0e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a10:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002a12:	f023 0307 	bic.w	r3, r3, #7
 8002a16:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a18:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a1a:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a1c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a1e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a2a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a2c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a2e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8002a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
 8002a36:	e7fc      	b.n	8002a32 <HAL_DMA2D_Init+0x52>

08002a38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a3a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	d02b      	beq.n	8002a9e <HAL_DMA2D_ConfigLayer+0x66>
 8002a46:	2201      	movs	r2, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a48:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a4c:	010e      	lsls	r6, r1, #4
 8002a4e:	4f1c      	ldr	r7, [pc, #112]	@ (8002ac0 <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 8002a50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a54:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8002a58:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8002a5c:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8002a5e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a62:	3c09      	subs	r4, #9
 8002a64:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a66:	bf96      	itet	ls
 8002a68:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a6c:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a70:	4310      	orrls	r0, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a72:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a74:	b9a1      	cbnz	r1, 8002aa0 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a76:	6a51      	ldr	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a78:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a7a:	ea01 0107 	and.w	r1, r1, r7
 8002a7e:	ea41 0100 	orr.w	r1, r1, r0
 8002a82:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a88:	d803      	bhi.n	8002a92 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a8c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8002a90:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a92:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a94:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8002a9a:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002aa0:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002aa2:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002aa4:	ea01 0107 	and.w	r1, r1, r7
 8002aa8:	ea41 0100 	orr.w	r1, r1, r0
 8002aac:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002aae:	eb03 0106 	add.w	r1, r3, r6
 8002ab2:	6989      	ldr	r1, [r1, #24]
 8002ab4:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ab6:	d8ec      	bhi.n	8002a92 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ab8:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 8002abc:	6215      	str	r5, [r2, #32]
 8002abe:	e7e8      	b.n	8002a92 <HAL_DMA2D_ConfigLayer+0x5a>
 8002ac0:	00fcfff0 	.word	0x00fcfff0

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ac8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8002c88 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4a6c      	ldr	r2, [pc, #432]	@ (8002c80 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002ad0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002ad4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8002ada:	43ac      	bics	r4, r5
 8002adc:	f040 80b7 	bne.w	8002c4e <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae0:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ae2:	2703      	movs	r7, #3
 8002ae4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aec:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002af2:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af6:	2f01      	cmp	r7, #1
 8002af8:	d834      	bhi.n	8002b64 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002afa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002afc:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b00:	68cf      	ldr	r7, [r1, #12]
 8002b02:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b06:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8002b0a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b0c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0e:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b12:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002b16:	409f      	lsls	r7, r3
 8002b18:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002b1c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002b1e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b22:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b26:	688f      	ldr	r7, [r1, #8]
 8002b28:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b2c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8002b30:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	d119      	bne.n	8002b68 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8002b34:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b38:	f003 0a07 	and.w	sl, r3, #7
 8002b3c:	f04f 0b0f 	mov.w	fp, #15
 8002b40:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002b44:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002b48:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b4c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002b50:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b54:	690f      	ldr	r7, [r1, #16]
 8002b56:	fa07 f70a 	lsl.w	r7, r7, sl
 8002b5a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002b5e:	f8c8 7020 	str.w	r7, [r8, #32]
 8002b62:	e001      	b.n	8002b68 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b64:	2c03      	cmp	r4, #3
 8002b66:	d1da      	bne.n	8002b1e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002b68:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b6a:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b6e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b72:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b76:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8002b7a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7c:	d067      	beq.n	8002c4e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8002b82:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b86:	f003 0c03 	and.w	ip, r3, #3
 8002b8a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002b92:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b96:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8002b9e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8002ba2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ba6:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002bae:	9401      	str	r4, [sp, #4]
 8002bb0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002bb2:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bb4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bb8:	4c32      	ldr	r4, [pc, #200]	@ (8002c84 <HAL_GPIO_Init+0x1c0>)
 8002bba:	42a0      	cmp	r0, r4
 8002bbc:	d04e      	beq.n	8002c5c <HAL_GPIO_Init+0x198>
 8002bbe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bc2:	42a0      	cmp	r0, r4
 8002bc4:	d04c      	beq.n	8002c60 <HAL_GPIO_Init+0x19c>
 8002bc6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bca:	42a0      	cmp	r0, r4
 8002bcc:	d04a      	beq.n	8002c64 <HAL_GPIO_Init+0x1a0>
 8002bce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bd2:	42a0      	cmp	r0, r4
 8002bd4:	d048      	beq.n	8002c68 <HAL_GPIO_Init+0x1a4>
 8002bd6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bda:	42a0      	cmp	r0, r4
 8002bdc:	d046      	beq.n	8002c6c <HAL_GPIO_Init+0x1a8>
 8002bde:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002be2:	42a0      	cmp	r0, r4
 8002be4:	d044      	beq.n	8002c70 <HAL_GPIO_Init+0x1ac>
 8002be6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bea:	42a0      	cmp	r0, r4
 8002bec:	d042      	beq.n	8002c74 <HAL_GPIO_Init+0x1b0>
 8002bee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bf2:	42a0      	cmp	r0, r4
 8002bf4:	d040      	beq.n	8002c78 <HAL_GPIO_Init+0x1b4>
 8002bf6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002bfa:	42a0      	cmp	r0, r4
 8002bfc:	d03e      	beq.n	8002c7c <HAL_GPIO_Init+0x1b8>
 8002bfe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002c02:	42a0      	cmp	r0, r4
 8002c04:	bf14      	ite	ne
 8002c06:	240a      	movne	r4, #10
 8002c08:	2409      	moveq	r4, #9
 8002c0a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c0e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c12:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c16:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8002c1c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	bf0c      	ite	eq
 8002c20:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002c22:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c24:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8002c28:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8002c2a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	bf0c      	ite	eq
 8002c2e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002c30:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c32:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8002c36:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002c38:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	bf0c      	ite	eq
 8002c3c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002c3e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c40:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002c42:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002c44:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	bf54      	ite	pl
 8002c48:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002c4a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8002c4c:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c4e:	3301      	adds	r3, #1
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	f47f af3d 	bne.w	8002ad0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002c56:	b003      	add	sp, #12
 8002c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c5c:	2400      	movs	r4, #0
 8002c5e:	e7d4      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c60:	2401      	movs	r4, #1
 8002c62:	e7d2      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c64:	2402      	movs	r4, #2
 8002c66:	e7d0      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c68:	2403      	movs	r4, #3
 8002c6a:	e7ce      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c6c:	2404      	movs	r4, #4
 8002c6e:	e7cc      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c70:	2405      	movs	r4, #5
 8002c72:	e7ca      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c74:	2406      	movs	r4, #6
 8002c76:	e7c8      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c78:	2407      	movs	r4, #7
 8002c7a:	e7c6      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c7c:	2408      	movs	r4, #8
 8002c7e:	e7c4      	b.n	8002c0a <HAL_GPIO_Init+0x146>
 8002c80:	40013c00 	.word	0x40013c00
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	b10a      	cbz	r2, 8002c92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c8e:	6181      	str	r1, [r0, #24]
  }
}
 8002c90:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c92:	0409      	lsls	r1, r1, #16
 8002c94:	e7fb      	b.n	8002c8e <HAL_GPIO_WritePin+0x2>

08002c96 <HAL_LTDC_ErrorCallback>:
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8002c96:	4770      	bx	lr

08002c98 <HAL_LTDC_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8002c98:	4770      	bx	lr

08002c9a <HAL_LTDC_ReloadEventCallback>:
  * @brief  Reload Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8002c9a:	4770      	bx	lr

08002c9c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002c9c:	6803      	ldr	r3, [r0, #0]
{
 8002c9e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002ca0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8002ca2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002ca4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002ca6:	0772      	lsls	r2, r6, #29
 8002ca8:	d514      	bpl.n	8002cd4 <HAL_LTDC_IRQHandler+0x38>
 8002caa:	0769      	lsls	r1, r5, #29
 8002cac:	d512      	bpl.n	8002cd4 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb0:	f022 0204 	bic.w	r2, r2, #4
 8002cb4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002cba:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8002cc6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002cc8:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002ccc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002cd0:	f7ff ffe1 	bl	8002c96 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002cd4:	07b2      	lsls	r2, r6, #30
 8002cd6:	d516      	bpl.n	8002d06 <HAL_LTDC_IRQHandler+0x6a>
 8002cd8:	07ab      	lsls	r3, r5, #30
 8002cda:	d514      	bpl.n	8002d06 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002cdc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8002cde:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce2:	f022 0202 	bic.w	r2, r2, #2
 8002ce6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002ce8:	2202      	movs	r2, #2
 8002cea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002cec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002d02:	f7ff ffc8 	bl	8002c96 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002d06:	07f0      	lsls	r0, r6, #31
 8002d08:	d510      	bpl.n	8002d2c <HAL_LTDC_IRQHandler+0x90>
 8002d0a:	07e9      	lsls	r1, r5, #31
 8002d0c:	d50e      	bpl.n	8002d2c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002d0e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8002d10:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8002d1e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8002d20:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002d24:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002d28:	f7ff ffb6 	bl	8002c98 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002d2c:	0732      	lsls	r2, r6, #28
 8002d2e:	d511      	bpl.n	8002d54 <HAL_LTDC_IRQHandler+0xb8>
 8002d30:	072b      	lsls	r3, r5, #28
 8002d32:	d50f      	bpl.n	8002d54 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002d34:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002d36:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002d40:	2208      	movs	r2, #8
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002d50:	f7ff ffa3 	bl	8002c9a <HAL_LTDC_ReloadEventCallback>
}
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d58 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002d5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d5e:	4c19      	ldr	r4, [pc, #100]	@ (8002dc4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d76:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d78:	f7ff fbfc 	bl	8002574 <HAL_GetTick>
 8002d7c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d7e:	6863      	ldr	r3, [r4, #4]
 8002d80:	03da      	lsls	r2, r3, #15
 8002d82:	d50c      	bpl.n	8002d9e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d84:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d86:	4d0f      	ldr	r5, [pc, #60]	@ (8002dc4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002d8e:	f7ff fbf1 	bl	8002574 <HAL_GetTick>
 8002d92:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d94:	686b      	ldr	r3, [r5, #4]
 8002d96:	039b      	lsls	r3, r3, #14
 8002d98:	d50a      	bpl.n	8002db0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	e006      	b.n	8002dac <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d9e:	f7ff fbe9 	bl	8002574 <HAL_GetTick>
 8002da2:	1b40      	subs	r0, r0, r5
 8002da4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002da8:	d9e9      	bls.n	8002d7e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
}
 8002dac:	b003      	add	sp, #12
 8002dae:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002db0:	f7ff fbe0 	bl	8002574 <HAL_GetTick>
 8002db4:	1b00      	subs	r0, r0, r4
 8002db6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002dba:	d9eb      	bls.n	8002d94 <HAL_PWREx_EnableOverDrive+0x3c>
 8002dbc:	e7f5      	b.n	8002daa <HAL_PWREx_EnableOverDrive+0x52>
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002dcc:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8002dce:	b136      	cbz	r6, 8002dde <QSPI_Config+0x16>
 8002dd0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8002dd4:	d003      	beq.n	8002dde <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002dd6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002dd8:	6804      	ldr	r4, [r0, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002dde:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002de2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002de6:	f1ba 0f00 	cmp.w	sl, #0
 8002dea:	d04c      	beq.n	8002e86 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002dec:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002dee:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002df0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8002df4:	ea4a 0406 	orr.w	r4, sl, r6
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8002dfe:	ea44 0a02 	orr.w	sl, r4, r2
 8002e02:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002e06:	f1be 0f00 	cmp.w	lr, #0
 8002e0a:	d024      	beq.n	8002e56 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002e0c:	688e      	ldr	r6, [r1, #8]
 8002e0e:	ea4a 040e 	orr.w	r4, sl, lr
 8002e12:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e14:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e16:	b19f      	cbz	r7, 8002e40 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e18:	433b      	orrs	r3, r7
 8002e1a:	4303      	orrs	r3, r0
 8002e1c:	68c8      	ldr	r0, [r1, #12]
 8002e1e:	ea43 0309 	orr.w	r3, r3, r9
 8002e22:	ea43 0308 	orr.w	r3, r3, r8
 8002e26:	4333      	orrs	r3, r6
 8002e28:	4303      	orrs	r3, r0
 8002e2a:	ea43 030c 	orr.w	r3, r3, ip
 8002e2e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e30:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e34:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e36:	d001      	beq.n	8002e3c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002e38:	684b      	ldr	r3, [r1, #4]
 8002e3a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e40:	4303      	orrs	r3, r0
 8002e42:	ea43 0309 	orr.w	r3, r3, r9
 8002e46:	ea43 0308 	orr.w	r3, r3, r8
 8002e4a:	4333      	orrs	r3, r6
 8002e4c:	ea43 030c 	orr.w	r3, r3, ip
 8002e50:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e52:	616b      	str	r3, [r5, #20]
 8002e54:	e7f2      	b.n	8002e3c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e56:	b167      	cbz	r7, 8002e72 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e58:	433b      	orrs	r3, r7
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	68c8      	ldr	r0, [r1, #12]
 8002e5e:	ea43 0309 	orr.w	r3, r3, r9
 8002e62:	ea43 0308 	orr.w	r3, r3, r8
 8002e66:	4303      	orrs	r3, r0
 8002e68:	ea43 030c 	orr.w	r3, r3, ip
 8002e6c:	ea43 030a 	orr.w	r3, r3, sl
 8002e70:	e7de      	b.n	8002e30 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e72:	4303      	orrs	r3, r0
 8002e74:	ea43 0309 	orr.w	r3, r3, r9
 8002e78:	ea43 0408 	orr.w	r4, r3, r8
 8002e7c:	ea44 030c 	orr.w	r3, r4, ip
 8002e80:	ea43 030a 	orr.w	r3, r3, sl
 8002e84:	e7e5      	b.n	8002e52 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002e86:	f1be 0f00 	cmp.w	lr, #0
 8002e8a:	d02c      	beq.n	8002ee6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002e8c:	ea46 050e 	orr.w	r5, r6, lr
 8002e90:	688b      	ldr	r3, [r1, #8]
 8002e92:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e94:	694e      	ldr	r6, [r1, #20]
 8002e96:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002e98:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e9a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e9e:	04b6      	lsls	r6, r6, #18
 8002ea0:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ea2:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ea6:	b1a7      	cbz	r7, 8002ed2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ea8:	433b      	orrs	r3, r7
 8002eaa:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002eac:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002eb0:	ea43 0308 	orr.w	r3, r3, r8
 8002eb4:	ea43 030e 	orr.w	r3, r3, lr
 8002eb8:	ea43 030c 	orr.w	r3, r3, ip
 8002ebc:	ea43 0300 	orr.w	r3, r3, r0
 8002ec0:	ea43 0306 	orr.w	r3, r3, r6
 8002ec4:	ea43 0305 	orr.w	r3, r3, r5
 8002ec8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002eca:	d0b7      	beq.n	8002e3c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002ecc:	684b      	ldr	r3, [r1, #4]
 8002ece:	61a3      	str	r3, [r4, #24]
 8002ed0:	e7b4      	b.n	8002e3c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ed2:	ea43 0308 	orr.w	r3, r3, r8
 8002ed6:	ea43 030e 	orr.w	r3, r3, lr
 8002eda:	ea43 030c 	orr.w	r3, r3, ip
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	432b      	orrs	r3, r5
 8002ee2:	6163      	str	r3, [r4, #20]
 8002ee4:	e7aa      	b.n	8002e3c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ee6:	b1d7      	cbz	r7, 8002f1e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ee8:	ea46 0307 	orr.w	r3, r6, r7
 8002eec:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8002eee:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002ef0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ef4:	ea43 0302 	orr.w	r3, r3, r2
 8002ef8:	ea43 0304 	orr.w	r3, r3, r4
 8002efc:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8002efe:	ea43 0304 	orr.w	r3, r3, r4
 8002f02:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8002f04:	ea43 0304 	orr.w	r3, r3, r4
 8002f08:	68cc      	ldr	r4, [r1, #12]
 8002f0a:	ea43 0304 	orr.w	r3, r3, r4
 8002f0e:	694c      	ldr	r4, [r1, #20]
 8002f10:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8002f14:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002f16:	d091      	beq.n	8002e3c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002f18:	684b      	ldr	r3, [r1, #4]
 8002f1a:	6183      	str	r3, [r0, #24]
 8002f1c:	e78e      	b.n	8002e3c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d08c      	beq.n	8002e3c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f22:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002f24:	6800      	ldr	r0, [r0, #0]
 8002f26:	4333      	orrs	r3, r6
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8002f30:	4313      	orrs	r3, r2
 8002f32:	694a      	ldr	r2, [r1, #20]
 8002f34:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002f38:	6143      	str	r3, [r0, #20]
}
 8002f3a:	e77f      	b.n	8002e3c <QSPI_Config+0x74>

08002f3c <QSPI_WaitFlagStateUntilTimeout>:
{
 8002f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002f44:	4604      	mov	r4, r0
 8002f46:	460e      	mov	r6, r1
 8002f48:	4615      	mov	r5, r2
 8002f4a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	4233      	tst	r3, r6
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	d101      	bne.n	8002f60 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e012      	b.n	8002f86 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002f64:	d0f3      	beq.n	8002f4e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7ff fb05 	bl	8002574 <HAL_GetTick>
 8002f6a:	1bc0      	subs	r0, r0, r7
 8002f6c:	4540      	cmp	r0, r8
 8002f6e:	d802      	bhi.n	8002f76 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8002f70:	f1b8 0f00 	cmp.w	r8, #0
 8002f74:	d1ea      	bne.n	8002f4c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f76:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f78:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8002f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f8a <HAL_QSPI_MspInit>:
}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_QSPI_Init>:
{
 8002f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7ff faf0 	bl	8002574 <HAL_GetTick>
 8002f94:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d046      	beq.n	8003028 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002f9a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002f9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002fa2:	b93b      	cbnz	r3, 8002fb4 <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 8002fa4:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8002fa6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 8002faa:	f7ff ffee 	bl	8002f8a <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002fae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fb2:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002fb4:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002fb6:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002fb8:	68a3      	ldr	r3, [r4, #8]
 8002fba:	680a      	ldr	r2, [r1, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8002fc2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002fc6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002fc8:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2120      	movs	r1, #32
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f7ff ffb3 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002fd6:	bb10      	cbnz	r0, 800301e <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	69e5      	ldr	r5, [r4, #28]
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	432b      	orrs	r3, r5
 8002fe2:	6a25      	ldr	r5, [r4, #32]
 8002fe4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	6865      	ldr	r5, [r4, #4]
 8002fec:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8002ff0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002ff8:	6855      	ldr	r5, [r2, #4]
 8002ffa:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002ffe:	430b      	orrs	r3, r1
 8003000:	6921      	ldr	r1, [r4, #16]
 8003002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003006:	4909      	ldr	r1, [pc, #36]	@ (800302c <HAL_QSPI_Init+0xa0>)
 8003008:	4029      	ands	r1, r5
 800300a:	430b      	orrs	r3, r1
 800300c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003016:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003018:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800301a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800301e:	2300      	movs	r3, #0
 8003020:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003024:	b003      	add	sp, #12
 8003026:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e7fb      	b.n	8003024 <HAL_QSPI_Init+0x98>
 800302c:	ffe0f8fe 	.word	0xffe0f8fe

08003030 <HAL_QSPI_MspDeInit>:
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
 8003030:	4770      	bx	lr

08003032 <HAL_QSPI_DeInit>:
{
 8003032:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8003034:	4604      	mov	r4, r0
 8003036:	b168      	cbz	r0, 8003054 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8003038:	6802      	ldr	r2, [r0, #0]
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8003042:	f7ff fff5 	bl	8003030 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003046:	2000      	movs	r0, #0
 8003048:	6460      	str	r0, [r4, #68]	@ 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800304a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800304e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8003052:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e7fc      	b.n	8003052 <HAL_QSPI_DeInit+0x20>

08003058 <HAL_QSPI_Command>:
{
 8003058:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	468a      	mov	sl, r1
 8003060:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003062:	f7ff fa87 	bl	8002574 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003066:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800306a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800306c:	2b01      	cmp	r3, #1
 800306e:	d036      	beq.n	80030de <HAL_QSPI_Command+0x86>
 8003070:	2301      	movs	r3, #1
 8003072:	2602      	movs	r6, #2
 8003074:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003078:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800307c:	2b01      	cmp	r3, #1
 800307e:	fa5f f983 	uxtb.w	r9, r3
 8003082:	d128      	bne.n	80030d6 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003084:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003086:	4603      	mov	r3, r0
 8003088:	2120      	movs	r1, #32
 800308a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800308c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800308e:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003092:	f8cd 8000 	str.w	r8, [sp]
 8003096:	f7ff ff51 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800309a:	4605      	mov	r5, r0
 800309c:	b9a0      	cbnz	r0, 80030c8 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800309e:	4602      	mov	r2, r0
 80030a0:	4651      	mov	r1, sl
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fe90 	bl	8002dc8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80030a8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 80030ac:	b953      	cbnz	r3, 80030c4 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80030ae:	463b      	mov	r3, r7
 80030b0:	464a      	mov	r2, r9
 80030b2:	4631      	mov	r1, r6
 80030b4:	4620      	mov	r0, r4
 80030b6:	f8cd 8000 	str.w	r8, [sp]
 80030ba:	f7ff ff3f 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80030be:	b960      	cbnz	r0, 80030da <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80030c4:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80030c8:	2300      	movs	r3, #0
 80030ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80030ce:	4628      	mov	r0, r5
 80030d0:	b002      	add	sp, #8
 80030d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 80030d6:	4635      	mov	r5, r6
 80030d8:	e7f6      	b.n	80030c8 <HAL_QSPI_Command+0x70>
 80030da:	4605      	mov	r5, r0
 80030dc:	e7f4      	b.n	80030c8 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80030de:	2502      	movs	r5, #2
 80030e0:	e7f5      	b.n	80030ce <HAL_QSPI_Command+0x76>

080030e2 <HAL_QSPI_AutoPolling>:
{
 80030e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030e6:	4604      	mov	r4, r0
 80030e8:	461f      	mov	r7, r3
 80030ea:	4689      	mov	r9, r1
 80030ec:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80030ee:	f7ff fa41 	bl	8002574 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80030f2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80030f6:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d041      	beq.n	8003180 <HAL_QSPI_AutoPolling+0x9e>
 80030fc:	2301      	movs	r3, #1
 80030fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003102:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003106:	2b01      	cmp	r3, #1
 8003108:	fa5f f883 	uxtb.w	r8, r3
 800310c:	d136      	bne.n	800317c <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800310e:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003110:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003112:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003114:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003116:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800311a:	4603      	mov	r3, r0
 800311c:	9700      	str	r7, [sp, #0]
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff0c 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003124:	bb20      	cbnz	r0, 8003170 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003126:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003128:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800312a:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800312c:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800312e:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003130:	686b      	ldr	r3, [r5, #4]
 8003132:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003134:	68ab      	ldr	r3, [r5, #8]
 8003136:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003138:	6813      	ldr	r3, [r2, #0]
 800313a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800313e:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003140:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003142:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003146:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003148:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800314c:	68eb      	ldr	r3, [r5, #12]
 800314e:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003152:	f7ff fe39 	bl	8002dc8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003156:	4633      	mov	r3, r6
 8003158:	4642      	mov	r2, r8
 800315a:	2108      	movs	r1, #8
 800315c:	4620      	mov	r0, r4
 800315e:	9700      	str	r7, [sp, #0]
 8003160:	f7ff feec 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003164:	b920      	cbnz	r0, 8003170 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800316c:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003170:	2300      	movs	r3, #0
 8003172:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003176:	b003      	add	sp, #12
 8003178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800317c:	2002      	movs	r0, #2
 800317e:	e7f7      	b.n	8003170 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8003180:	2002      	movs	r0, #2
 8003182:	e7f8      	b.n	8003176 <HAL_QSPI_AutoPolling+0x94>

08003184 <HAL_QSPI_MemoryMapped>:
{
 8003184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003186:	4604      	mov	r4, r0
 8003188:	4616      	mov	r6, r2
 800318a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff f9f2 	bl	8002574 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003190:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8003194:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8003196:	2a01      	cmp	r2, #1
 8003198:	d033      	beq.n	8003202 <HAL_QSPI_MemoryMapped+0x7e>
 800319a:	2201      	movs	r2, #1
 800319c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80031a0:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80031a4:	2a01      	cmp	r2, #1
 80031a6:	d12a      	bne.n	80031fe <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031a8:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80031aa:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031ac:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031ae:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80031b0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031b4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80031b6:	9100      	str	r1, [sp, #0]
 80031b8:	2120      	movs	r1, #32
 80031ba:	f7ff febf 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80031be:	4605      	mov	r5, r0
 80031c0:	b9b8      	cbnz	r0, 80031f2 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	6872      	ldr	r2, [r6, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80031c8:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80031ca:	f020 0008 	bic.w	r0, r0, #8
 80031ce:	ea40 0002 	orr.w	r0, r0, r2
 80031d2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80031d4:	d107      	bne.n	80031e6 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80031d6:	6832      	ldr	r2, [r6, #0]
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80031da:	2210      	movs	r2, #16
 80031dc:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80031e4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80031e6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80031ea:	4639      	mov	r1, r7
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7ff fdeb 	bl	8002dc8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80031f2:	2300      	movs	r3, #0
 80031f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80031f8:	4628      	mov	r0, r5
 80031fa:	b003      	add	sp, #12
 80031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80031fe:	2502      	movs	r5, #2
 8003200:	e7f7      	b.n	80031f2 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8003202:	2502      	movs	r5, #2
 8003204:	e7f8      	b.n	80031f8 <HAL_QSPI_MemoryMapped+0x74>

08003206 <HAL_QSPI_Abort>:
{
 8003206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003208:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800320a:	f7ff f9b3 	bl	8002574 <HAL_GetTick>
 800320e:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003210:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003214:	0798      	lsls	r0, r3, #30
 8003216:	d534      	bpl.n	8003282 <HAL_QSPI_Abort+0x7c>
    __HAL_UNLOCK(hqspi);
 8003218:	2300      	movs	r3, #0
 800321a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	0751      	lsls	r1, r2, #29
 8003224:	d507      	bpl.n	8003236 <HAL_QSPI_Abort+0x30>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003226:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003228:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800322a:	f022 0204 	bic.w	r2, r2, #4
 800322e:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003230:	f7ff fb98 	bl	8002964 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8003234:	bb40      	cbnz	r0, 8003288 <HAL_QSPI_Abort+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2000      	movs	r0, #0
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	0692      	lsls	r2, r2, #26
 800323e:	d528      	bpl.n	8003292 <HAL_QSPI_Abort+0x8c>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003240:	681a      	ldr	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003242:	2102      	movs	r1, #2
 8003244:	4620      	mov	r0, r4
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003246:	f042 0202 	orr.w	r2, r2, #2
 800324a:	601a      	str	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800324c:	2201      	movs	r2, #1
 800324e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	462b      	mov	r3, r5
 8003254:	f7ff fe72 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003258:	b9a0      	cbnz	r0, 8003284 <HAL_QSPI_Abort+0x7e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	2202      	movs	r2, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800325e:	2120      	movs	r1, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003260:	60da      	str	r2, [r3, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003262:	4602      	mov	r2, r0
 8003264:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003266:	4620      	mov	r0, r4
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	462b      	mov	r3, r5
 800326c:	f7ff fe66 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003270:	b940      	cbnz	r0, 8003284 <HAL_QSPI_Abort+0x7e>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6953      	ldr	r3, [r2, #20]
 8003276:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800327a:	6153      	str	r3, [r2, #20]
        hqspi->State = HAL_QSPI_STATE_READY;
 800327c:	2301      	movs	r3, #1
 800327e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2000      	movs	r0, #0
}
 8003284:	b003      	add	sp, #12
 8003286:	bd30      	pop	{r4, r5, pc}
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003288:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6463      	str	r3, [r4, #68]	@ 0x44
 8003290:	e7d2      	b.n	8003238 <HAL_QSPI_Abort+0x32>
      hqspi->State = HAL_QSPI_STATE_READY;
 8003292:	2301      	movs	r3, #1
 8003294:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003298:	e7f4      	b.n	8003284 <HAL_QSPI_Abort+0x7e>

0800329a <HAL_QSPI_Transmit>:
{
 800329a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	4688      	mov	r8, r1
 80032a2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff f966 	bl	8002574 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80032a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80032ac:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80032ae:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d04f      	beq.n	8003354 <HAL_QSPI_Transmit+0xba>
 80032b4:	2301      	movs	r3, #1
 80032b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80032ba:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80032be:	2b01      	cmp	r3, #1
 80032c0:	b2d8      	uxtb	r0, r3
 80032c2:	d145      	bne.n	8003350 <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80032c8:	f1b8 0f00 	cmp.w	r8, #0
 80032cc:	d03b      	beq.n	8003346 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80032ce:	2312      	movs	r3, #18
 80032d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80032d4:	692b      	ldr	r3, [r5, #16]
 80032d6:	3301      	adds	r3, #1
 80032d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80032da:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80032dc:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80032e0:	3301      	adds	r3, #1
 80032e2:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80032e4:	696b      	ldr	r3, [r5, #20]
 80032e6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80032ea:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80032ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032ee:	b9b3      	cbnz	r3, 800331e <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80032f0:	4633      	mov	r3, r6
 80032f2:	2201      	movs	r2, #1
 80032f4:	2102      	movs	r1, #2
 80032f6:	4620      	mov	r0, r4
 80032f8:	9700      	str	r7, [sp, #0]
 80032fa:	f7ff fe1f 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80032fe:	b928      	cbnz	r0, 800330c <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8003304:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003306:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8003308:	f7ff ff7d 	bl	8003206 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800330c:	2301      	movs	r3, #1
 800330e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003312:	2300      	movs	r3, #0
 8003314:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003318:	b002      	add	sp, #8
 800331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800331e:	4633      	mov	r3, r6
 8003320:	2201      	movs	r2, #1
 8003322:	2104      	movs	r1, #4
 8003324:	4620      	mov	r0, r4
 8003326:	9700      	str	r7, [sp, #0]
 8003328:	f7ff fe08 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800332c:	2800      	cmp	r0, #0
 800332e:	d1ed      	bne.n	800330c <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003330:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8003338:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800333a:	3301      	adds	r3, #1
 800333c:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800333e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003340:	3b01      	subs	r3, #1
 8003342:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003344:	e7d2      	b.n	80032ec <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003346:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800334e:	e7e0      	b.n	8003312 <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 8003350:	2002      	movs	r0, #2
 8003352:	e7de      	b.n	8003312 <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 8003354:	2002      	movs	r0, #2
 8003356:	e7df      	b.n	8003318 <HAL_QSPI_Transmit+0x7e>

08003358 <HAL_QSPI_Receive>:
{
 8003358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	4616      	mov	r6, r2
 8003360:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8003362:	f7ff f907 	bl	8002574 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003366:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8003368:	4607      	mov	r7, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800336a:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800336c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003370:	2b01      	cmp	r3, #1
 8003372:	d052      	beq.n	800341a <HAL_QSPI_Receive+0xc2>
 8003374:	2301      	movs	r3, #1
 8003376:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800337a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800337e:	2b01      	cmp	r3, #1
 8003380:	b2d8      	uxtb	r0, r3
 8003382:	d148      	bne.n	8003416 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003384:	2300      	movs	r3, #0
 8003386:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	d03e      	beq.n	800340c <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800338e:	2322      	movs	r3, #34	@ 0x22
 8003390:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003394:	692b      	ldr	r3, [r5, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800339a:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800339c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80033a0:	3301      	adds	r3, #1
 80033a2:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80033a4:	6969      	ldr	r1, [r5, #20]
 80033a6:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80033aa:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80033ae:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80033b0:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80033b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033b4:	b9b3      	cbnz	r3, 80033e4 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80033b6:	463b      	mov	r3, r7
 80033b8:	2201      	movs	r2, #1
 80033ba:	2102      	movs	r1, #2
 80033bc:	4620      	mov	r0, r4
 80033be:	9600      	str	r6, [sp, #0]
 80033c0:	f7ff fdbc 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80033c4:	b928      	cbnz	r0, 80033d2 <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80033ca:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80033cc:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80033ce:	f7ff ff1a 	bl	8003206 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80033d8:	2300      	movs	r3, #0
 80033da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80033de:	b002      	add	sp, #8
 80033e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80033e4:	463b      	mov	r3, r7
 80033e6:	2201      	movs	r2, #1
 80033e8:	2106      	movs	r1, #6
 80033ea:	4620      	mov	r0, r4
 80033ec:	9600      	str	r6, [sp, #0]
 80033ee:	f7ff fda5 	bl	8002f3c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d1ed      	bne.n	80033d2 <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80033f6:	f895 2020 	ldrb.w	r2, [r5, #32]
 80033fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033fc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80033fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003400:	3301      	adds	r3, #1
 8003402:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8003404:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003406:	3b01      	subs	r3, #1
 8003408:	63a3      	str	r3, [r4, #56]	@ 0x38
 800340a:	e7d2      	b.n	80033b2 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800340c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800340e:	f043 0308 	orr.w	r3, r3, #8
 8003412:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8003414:	e7e0      	b.n	80033d8 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 8003416:	2002      	movs	r0, #2
 8003418:	e7de      	b.n	80033d8 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 800341a:	2002      	movs	r0, #2
 800341c:	e7df      	b.n	80033de <HAL_QSPI_Receive+0x86>
	...

08003420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003424:	4604      	mov	r4, r0
 8003426:	b340      	cbz	r0, 800347a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	07de      	lsls	r6, r3, #31
 800342c:	d410      	bmi.n	8003450 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	079d      	lsls	r5, r3, #30
 8003432:	d461      	bmi.n	80034f8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	0719      	lsls	r1, r3, #28
 8003438:	f100 80a6 	bmi.w	8003588 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	075a      	lsls	r2, r3, #29
 8003440:	f100 80c7 	bmi.w	80035d2 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	69a2      	ldr	r2, [r4, #24]
 8003446:	2a00      	cmp	r2, #0
 8003448:	f040 8130 	bne.w	80036ac <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800344c:	2000      	movs	r0, #0
 800344e:	e02c      	b.n	80034aa <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003450:	4b94      	ldr	r3, [pc, #592]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	f002 020c 	and.w	r2, r2, #12
 8003458:	2a04      	cmp	r2, #4
 800345a:	d007      	beq.n	800346c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	f002 020c 	and.w	r2, r2, #12
 8003462:	2a08      	cmp	r2, #8
 8003464:	d10b      	bne.n	800347e <HAL_RCC_OscConfig+0x5e>
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0259      	lsls	r1, r3, #9
 800346a:	d508      	bpl.n	800347e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b8d      	ldr	r3, [pc, #564]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	039a      	lsls	r2, r3, #14
 8003472:	d5dc      	bpl.n	800342e <HAL_RCC_OscConfig+0xe>
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1d9      	bne.n	800342e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800347a:	2001      	movs	r0, #1
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	4d88      	ldr	r5, [pc, #544]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 8003482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003486:	d113      	bne.n	80034b0 <HAL_RCC_OscConfig+0x90>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003490:	f7ff f870 	bl	8002574 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003494:	4e83      	ldr	r6, [pc, #524]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8003496:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	039b      	lsls	r3, r3, #14
 800349c:	d4c7      	bmi.n	800342e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349e:	f7ff f869 	bl	8002574 <HAL_GetTick>
 80034a2:	1b40      	subs	r0, r0, r5
 80034a4:	2864      	cmp	r0, #100	@ 0x64
 80034a6:	d9f7      	bls.n	8003498 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80034a8:	2003      	movs	r0, #3
}
 80034aa:	b002      	add	sp, #8
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b0:	b99b      	cbnz	r3, 80034da <HAL_RCC_OscConfig+0xba>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	682b      	ldr	r3, [r5, #0]
 80034bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034c2:	f7ff f857 	bl	8002574 <HAL_GetTick>
 80034c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	039f      	lsls	r7, r3, #14
 80034cc:	d5af      	bpl.n	800342e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ce:	f7ff f851 	bl	8002574 <HAL_GetTick>
 80034d2:	1b80      	subs	r0, r0, r6
 80034d4:	2864      	cmp	r0, #100	@ 0x64
 80034d6:	d9f7      	bls.n	80034c8 <HAL_RCC_OscConfig+0xa8>
 80034d8:	e7e6      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	d103      	bne.n	80034ea <HAL_RCC_OscConfig+0xca>
 80034e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	e7ce      	b.n	8003488 <HAL_RCC_OscConfig+0x68>
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034f6:	e7ca      	b.n	800348e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f8:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	f012 0f0c 	tst.w	r2, #12
 8003500:	d007      	beq.n	8003512 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	f002 020c 	and.w	r2, r2, #12
 8003508:	2a08      	cmp	r2, #8
 800350a:	d111      	bne.n	8003530 <HAL_RCC_OscConfig+0x110>
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	025d      	lsls	r5, r3, #9
 8003510:	d40e      	bmi.n	8003530 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4a64      	ldr	r2, [pc, #400]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	0799      	lsls	r1, r3, #30
 8003518:	d502      	bpl.n	8003520 <HAL_RCC_OscConfig+0x100>
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d1ac      	bne.n	800347a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	6921      	ldr	r1, [r4, #16]
 8003524:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003528:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800352c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	e781      	b.n	8003434 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003530:	68e3      	ldr	r3, [r4, #12]
 8003532:	4d5c      	ldr	r5, [pc, #368]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 8003534:	b1bb      	cbz	r3, 8003566 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800353e:	f7ff f819 	bl	8002574 <HAL_GetTick>
 8003542:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	079b      	lsls	r3, r3, #30
 8003548:	d507      	bpl.n	800355a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	e76c      	b.n	8003434 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355a:	f7ff f80b 	bl	8002574 <HAL_GetTick>
 800355e:	1b80      	subs	r0, r0, r6
 8003560:	2802      	cmp	r0, #2
 8003562:	d9ef      	bls.n	8003544 <HAL_RCC_OscConfig+0x124>
 8003564:	e7a0      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003566:	682b      	ldr	r3, [r5, #0]
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800356e:	f7ff f801 	bl	8002574 <HAL_GetTick>
 8003572:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	079f      	lsls	r7, r3, #30
 8003578:	f57f af5c 	bpl.w	8003434 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357c:	f7fe fffa 	bl	8002574 <HAL_GetTick>
 8003580:	1b80      	subs	r0, r0, r6
 8003582:	2802      	cmp	r0, #2
 8003584:	d9f6      	bls.n	8003574 <HAL_RCC_OscConfig+0x154>
 8003586:	e78f      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003588:	6963      	ldr	r3, [r4, #20]
 800358a:	4d46      	ldr	r5, [pc, #280]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 800358c:	b183      	cbz	r3, 80035b0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800358e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003596:	f7fe ffed 	bl	8002574 <HAL_GetTick>
 800359a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800359e:	079b      	lsls	r3, r3, #30
 80035a0:	f53f af4c 	bmi.w	800343c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a4:	f7fe ffe6 	bl	8002574 <HAL_GetTick>
 80035a8:	1b80      	subs	r0, r0, r6
 80035aa:	2802      	cmp	r0, #2
 80035ac:	d9f6      	bls.n	800359c <HAL_RCC_OscConfig+0x17c>
 80035ae:	e77b      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80035b0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80035b8:	f7fe ffdc 	bl	8002574 <HAL_GetTick>
 80035bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035be:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035c0:	079f      	lsls	r7, r3, #30
 80035c2:	f57f af3b 	bpl.w	800343c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe ffd5 	bl	8002574 <HAL_GetTick>
 80035ca:	1b80      	subs	r0, r0, r6
 80035cc:	2802      	cmp	r0, #2
 80035ce:	d9f6      	bls.n	80035be <HAL_RCC_OscConfig+0x19e>
 80035d0:	e76a      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 80035d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035d6:	00d5      	lsls	r5, r2, #3
 80035d8:	d427      	bmi.n	800362a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80035dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ee:	4d2e      	ldr	r5, [pc, #184]	@ (80036a8 <HAL_RCC_OscConfig+0x288>)
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	05d8      	lsls	r0, r3, #23
 80035f4:	d51b      	bpl.n	800362e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f6:	68a3      	ldr	r3, [r4, #8]
 80035f8:	4d2a      	ldr	r5, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d127      	bne.n	800364e <HAL_RCC_OscConfig+0x22e>
 80035fe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800360a:	f7fe ffb3 	bl	8002574 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4e25      	ldr	r6, [pc, #148]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8003610:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003614:	079a      	lsls	r2, r3, #30
 8003616:	d53f      	bpl.n	8003698 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8003618:	2f00      	cmp	r7, #0
 800361a:	f43f af13 	beq.w	8003444 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800361e:	4a21      	ldr	r2, [pc, #132]	@ (80036a4 <HAL_RCC_OscConfig+0x284>)
 8003620:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	@ 0x40
 8003628:	e70c      	b.n	8003444 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800362a:	2700      	movs	r7, #0
 800362c:	e7df      	b.n	80035ee <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003634:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003636:	f7fe ff9d 	bl	8002574 <HAL_GetTick>
 800363a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	05d9      	lsls	r1, r3, #23
 8003640:	d4d9      	bmi.n	80035f6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe ff97 	bl	8002574 <HAL_GetTick>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	2864      	cmp	r0, #100	@ 0x64
 800364a:	d9f7      	bls.n	800363c <HAL_RCC_OscConfig+0x21c>
 800364c:	e72c      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364e:	b9ab      	cbnz	r3, 800367c <HAL_RCC_OscConfig+0x25c>
 8003650:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	672b      	str	r3, [r5, #112]	@ 0x70
 800365c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003664:	f7fe ff86 	bl	8002574 <HAL_GetTick>
 8003668:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800366c:	079b      	lsls	r3, r3, #30
 800366e:	d5d3      	bpl.n	8003618 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fe ff80 	bl	8002574 <HAL_GetTick>
 8003674:	1b80      	subs	r0, r0, r6
 8003676:	4540      	cmp	r0, r8
 8003678:	d9f7      	bls.n	800366a <HAL_RCC_OscConfig+0x24a>
 800367a:	e715      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	2b05      	cmp	r3, #5
 800367e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003680:	d103      	bne.n	800368a <HAL_RCC_OscConfig+0x26a>
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	672b      	str	r3, [r5, #112]	@ 0x70
 8003688:	e7b9      	b.n	80035fe <HAL_RCC_OscConfig+0x1de>
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	672b      	str	r3, [r5, #112]	@ 0x70
 8003690:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	e7b5      	b.n	8003604 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe ff6c 	bl	8002574 <HAL_GetTick>
 800369c:	1b40      	subs	r0, r0, r5
 800369e:	4540      	cmp	r0, r8
 80036a0:	d9b7      	bls.n	8003612 <HAL_RCC_OscConfig+0x1f2>
 80036a2:	e701      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ac:	4d38      	ldr	r5, [pc, #224]	@ (8003790 <HAL_RCC_OscConfig+0x370>)
 80036ae:	68ab      	ldr	r3, [r5, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d041      	beq.n	800373c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80036b8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c2:	d12e      	bne.n	8003722 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80036c4:	f7fe ff56 	bl	8002574 <HAL_GetTick>
 80036c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	0199      	lsls	r1, r3, #6
 80036ce:	d422      	bmi.n	8003716 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80036da:	430b      	orrs	r3, r1
 80036dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80036e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80036e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036f0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80036f2:	682b      	ldr	r3, [r5, #0]
 80036f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036fa:	f7fe ff3b 	bl	8002574 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4d24      	ldr	r5, [pc, #144]	@ (8003790 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8003700:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	019a      	lsls	r2, r3, #6
 8003706:	f53f aea1 	bmi.w	800344c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe ff33 	bl	8002574 <HAL_GetTick>
 800370e:	1b00      	subs	r0, r0, r4
 8003710:	2802      	cmp	r0, #2
 8003712:	d9f6      	bls.n	8003702 <HAL_RCC_OscConfig+0x2e2>
 8003714:	e6c8      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe ff2d 	bl	8002574 <HAL_GetTick>
 800371a:	1b80      	subs	r0, r0, r6
 800371c:	2802      	cmp	r0, #2
 800371e:	d9d4      	bls.n	80036ca <HAL_RCC_OscConfig+0x2aa>
 8003720:	e6c2      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8003722:	f7fe ff27 	bl	8002574 <HAL_GetTick>
 8003726:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	f57f ae8e 	bpl.w	800344c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe ff20 	bl	8002574 <HAL_GetTick>
 8003734:	1b00      	subs	r0, r0, r4
 8003736:	2802      	cmp	r0, #2
 8003738:	d9f6      	bls.n	8003728 <HAL_RCC_OscConfig+0x308>
 800373a:	e6b5      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800373e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	f43f ae9b 	beq.w	800347a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003748:	69e1      	ldr	r1, [r4, #28]
 800374a:	428a      	cmp	r2, r1
 800374c:	f47f ae95 	bne.w	800347a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003750:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003754:	6a21      	ldr	r1, [r4, #32]
 8003756:	428a      	cmp	r2, r1
 8003758:	f47f ae8f 	bne.w	800347a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800375c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003762:	401a      	ands	r2, r3
 8003764:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003768:	f47f ae87 	bne.w	800347a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800376c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800376e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003776:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800377a:	f47f ae7e 	bne.w	800347a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800377e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003780:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003784:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003788:	bf14      	ite	ne
 800378a:	2001      	movne	r0, #1
 800378c:	2000      	moveq	r0, #0
 800378e:	e68c      	b.n	80034aa <HAL_RCC_OscConfig+0x8a>
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003794:	4913      	ldr	r1, [pc, #76]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003796:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	688b      	ldr	r3, [r1, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d01b      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x46>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d11b      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037a8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037b0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037b8:	bf1a      	itte	ne
 80037ba:	480b      	ldrne	r0, [pc, #44]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x54>)
 80037bc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	480b      	ldreq	r0, [pc, #44]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x58>)
 80037c0:	fba1 0100 	umull	r0, r1, r1, r0
 80037c4:	f7fd fa10 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x50>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80037d4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037d8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037da:	4803      	ldr	r0, [pc, #12]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x54>)
 80037dc:	e7fc      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80037de:	4803      	ldr	r0, [pc, #12]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80037e0:	e7fa      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x44>
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	017d7840 	.word	0x017d7840
 80037ec:	00f42400 	.word	0x00f42400

080037f0 <HAL_RCC_ClockConfig>:
{
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80037f6:	4604      	mov	r4, r0
 80037f8:	b910      	cbnz	r0, 8003800 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
}
 80037fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4a45      	ldr	r2, [pc, #276]	@ (8003918 <HAL_RCC_ClockConfig+0x128>)
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	428b      	cmp	r3, r1
 800380a:	d328      	bcc.n	800385e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	6821      	ldr	r1, [r4, #0]
 800380e:	078f      	lsls	r7, r1, #30
 8003810:	d430      	bmi.n	8003874 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	07c8      	lsls	r0, r1, #31
 8003814:	d443      	bmi.n	800389e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003816:	4a40      	ldr	r2, [pc, #256]	@ (8003918 <HAL_RCC_ClockConfig+0x128>)
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	42ab      	cmp	r3, r5
 8003820:	d866      	bhi.n	80038f0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	0751      	lsls	r1, r2, #29
 8003826:	d46f      	bmi.n	8003908 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	0713      	lsls	r3, r2, #28
 800382a:	d507      	bpl.n	800383c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382c:	4a3b      	ldr	r2, [pc, #236]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
 800382e:	6921      	ldr	r1, [r4, #16]
 8003830:	6893      	ldr	r3, [r2, #8]
 8003832:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003836:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800383a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383c:	f7ff ffaa 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003840:	4b36      	ldr	r3, [pc, #216]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
 8003842:	4a37      	ldr	r2, [pc, #220]	@ (8003920 <HAL_RCC_ClockConfig+0x130>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	40d8      	lsrs	r0, r3
 800384e:	4b35      	ldr	r3, [pc, #212]	@ (8003924 <HAL_RCC_ClockConfig+0x134>)
 8003850:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003852:	4b35      	ldr	r3, [pc, #212]	@ (8003928 <HAL_RCC_ClockConfig+0x138>)
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f7fe fe51 	bl	80024fc <HAL_InitTick>
  return HAL_OK;
 800385a:	2000      	movs	r0, #0
 800385c:	e7ce      	b.n	80037fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	430b      	orrs	r3, r1
 8003866:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003868:	6813      	ldr	r3, [r2, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	428b      	cmp	r3, r1
 8003870:	d1c3      	bne.n	80037fa <HAL_RCC_ClockConfig+0xa>
 8003872:	e7cb      	b.n	800380c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	f011 0f04 	tst.w	r1, #4
 8003878:	4b28      	ldr	r3, [pc, #160]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
 800387a:	d003      	beq.n	8003884 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003882:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	070e      	lsls	r6, r1, #28
 8003886:	d503      	bpl.n	8003890 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800388e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68a0      	ldr	r0, [r4, #8]
 8003894:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003898:	4302      	orrs	r2, r0
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e7b9      	b.n	8003812 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	6861      	ldr	r1, [r4, #4]
 80038a0:	4b1e      	ldr	r3, [pc, #120]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
 80038a2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	d11b      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	d0a5      	beq.n	80037fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b4:	4f19      	ldr	r7, [pc, #100]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	f022 0203 	bic.w	r2, r2, #3
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80038be:	f7fe fe59 	bl	8002574 <HAL_GetTick>
 80038c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038d0:	d0a1      	beq.n	8003816 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d2:	f7fe fe4f 	bl	8002574 <HAL_GetTick>
 80038d6:	1b80      	subs	r0, r0, r6
 80038d8:	4540      	cmp	r0, r8
 80038da:	d9f3      	bls.n	80038c4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80038dc:	2003      	movs	r0, #3
 80038de:	e78d      	b.n	80037fc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e0:	2902      	cmp	r1, #2
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80038e8:	e7e0      	b.n	80038ac <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	f012 0f02 	tst.w	r2, #2
 80038ee:	e7dd      	b.n	80038ac <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	f023 030f 	bic.w	r3, r3, #15
 80038f6:	432b      	orrs	r3, r5
 80038f8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	42ab      	cmp	r3, r5
 8003902:	f47f af7a 	bne.w	80037fa <HAL_RCC_ClockConfig+0xa>
 8003906:	e78c      	b.n	8003822 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4904      	ldr	r1, [pc, #16]	@ (800391c <HAL_RCC_ClockConfig+0x12c>)
 800390a:	68e0      	ldr	r0, [r4, #12]
 800390c:	688b      	ldr	r3, [r1, #8]
 800390e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003912:	4303      	orrs	r3, r0
 8003914:	608b      	str	r3, [r1, #8]
 8003916:	e787      	b.n	8003828 <HAL_RCC_ClockConfig+0x38>
 8003918:	40023c00 	.word	0x40023c00
 800391c:	40023800 	.word	0x40023800
 8003920:	0801000c 	.word	0x0801000c
 8003924:	20000000 	.word	0x20000000
 8003928:	20000008 	.word	0x20000008

0800392c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800392c:	4b01      	ldr	r3, [pc, #4]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x8>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003938:	4b04      	ldr	r3, [pc, #16]	@ (800394c <HAL_RCC_GetPCLK1Freq+0x14>)
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x18>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	4a03      	ldr	r2, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003946:	6810      	ldr	r0, [r2, #0]
}
 8003948:	40d8      	lsrs	r0, r3
 800394a:	4770      	bx	lr
 800394c:	40023800 	.word	0x40023800
 8003950:	08010004 	.word	0x08010004
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x14>)
 800395a:	4a05      	ldr	r2, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x18>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	4a03      	ldr	r2, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003966:	6810      	ldr	r0, [r2, #0]
}
 8003968:	40d8      	lsrs	r0, r3
 800396a:	4770      	bx	lr
 800396c:	40023800 	.word	0x40023800
 8003970:	08010004 	.word	0x08010004
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003978:	6803      	ldr	r3, [r0, #0]
{
 800397a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800397e:	f013 0601 	ands.w	r6, r3, #1
{
 8003982:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003984:	d00b      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003986:	4aad      	ldr	r2, [pc, #692]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003988:	6891      	ldr	r1, [r2, #8]
 800398a:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800398e:	6091      	str	r1, [r2, #8]
 8003990:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003992:	6891      	ldr	r1, [r2, #8]
 8003994:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003996:	fab6 f686 	clz	r6, r6
 800399a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800399c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800399e:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 80039a2:	d012      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a4:	49a5      	ldr	r1, [pc, #660]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039a6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80039a8:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039ac:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b0:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 80039b4:	bf08      	it	eq
 80039b6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039bc:	bf16      	itet	ne
 80039be:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80039c2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039c4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039c6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ca:	02d8      	lsls	r0, r3, #11
 80039cc:	d510      	bpl.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ce:	489b      	ldr	r0, [pc, #620]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039d0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80039d2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039d6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039da:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80039de:	ea42 0201 	orr.w	r2, r2, r1
 80039e2:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039e6:	f000 8186 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80039ea:	2900      	cmp	r1, #0
 80039ec:	bf08      	it	eq
 80039ee:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80039f0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80039f4:	bf18      	it	ne
 80039f6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f8:	0699      	lsls	r1, r3, #26
 80039fa:	d532      	bpl.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039fe:	4f90      	ldr	r7, [pc, #576]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a18:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1a:	f7fe fdab 	bl	8002574 <HAL_GetTick>
 8003a1e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	05da      	lsls	r2, r3, #23
 8003a24:	f140 8169 	bpl.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a28:	4f84      	ldr	r7, [pc, #528]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003a32:	f040 816d 	bne.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a38:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003a3c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003a40:	4a7e      	ldr	r2, [pc, #504]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a42:	f040 818a 	bne.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003a46:	6891      	ldr	r1, [r2, #8]
 8003a48:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8003a4c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8003a50:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003a54:	4301      	orrs	r1, r0
 8003a56:	6091      	str	r1, [r2, #8]
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	06d9      	lsls	r1, r3, #27
 8003a66:	d50c      	bpl.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a68:	4a74      	ldr	r2, [pc, #464]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a6a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8003a6e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003a72:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8003a76:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8003a7a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a7c:	4301      	orrs	r1, r0
 8003a7e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a82:	045a      	lsls	r2, r3, #17
 8003a84:	d508      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a86:	496d      	ldr	r1, [pc, #436]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a88:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003a8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003a8e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003a92:	4302      	orrs	r2, r0
 8003a94:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a98:	041f      	lsls	r7, r3, #16
 8003a9a:	d508      	bpl.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9c:	4967      	ldr	r1, [pc, #412]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a9e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003aa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003aa4:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003aa8:	4302      	orrs	r2, r0
 8003aaa:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aae:	03d8      	lsls	r0, r3, #15
 8003ab0:	d508      	bpl.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab2:	4962      	ldr	r1, [pc, #392]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ab4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003ab6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003aba:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ac4:	0399      	lsls	r1, r3, #14
 8003ac6:	d508      	bpl.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ac8:	495c      	ldr	r1, [pc, #368]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aca:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003acc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003ad0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003ad4:	4302      	orrs	r2, r0
 8003ad6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ada:	065a      	lsls	r2, r3, #25
 8003adc:	d508      	bpl.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ade:	4957      	ldr	r1, [pc, #348]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003ae2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003ae6:	f022 0203 	bic.w	r2, r2, #3
 8003aea:	4302      	orrs	r2, r0
 8003aec:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af0:	061f      	lsls	r7, r3, #24
 8003af2:	d508      	bpl.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af4:	4951      	ldr	r1, [pc, #324]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003af6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003af8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003afc:	f022 020c 	bic.w	r2, r2, #12
 8003b00:	4302      	orrs	r2, r0
 8003b02:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b06:	05d8      	lsls	r0, r3, #23
 8003b08:	d508      	bpl.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0a:	494c      	ldr	r1, [pc, #304]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b0c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003b0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b12:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003b16:	4302      	orrs	r2, r0
 8003b18:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b1c:	0599      	lsls	r1, r3, #22
 8003b1e:	d508      	bpl.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b20:	4946      	ldr	r1, [pc, #280]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b22:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003b24:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b28:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003b2c:	4302      	orrs	r2, r0
 8003b2e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b32:	055a      	lsls	r2, r3, #21
 8003b34:	d508      	bpl.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b36:	4941      	ldr	r1, [pc, #260]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b38:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003b3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b3e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b42:	4302      	orrs	r2, r0
 8003b44:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b48:	051f      	lsls	r7, r3, #20
 8003b4a:	d508      	bpl.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b4c:	493b      	ldr	r1, [pc, #236]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b50:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b58:	4302      	orrs	r2, r0
 8003b5a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b5e:	04d8      	lsls	r0, r3, #19
 8003b60:	d508      	bpl.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b62:	4936      	ldr	r1, [pc, #216]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b64:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003b66:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b6a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003b6e:	4302      	orrs	r2, r0
 8003b70:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b74:	0499      	lsls	r1, r3, #18
 8003b76:	d508      	bpl.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b78:	4930      	ldr	r1, [pc, #192]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b7a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003b7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b80:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003b84:	4302      	orrs	r2, r0
 8003b86:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b8a:	025a      	lsls	r2, r3, #9
 8003b8c:	d508      	bpl.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b8e:	492b      	ldr	r1, [pc, #172]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b90:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003b92:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b96:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003b9a:	4302      	orrs	r2, r0
 8003b9c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ba0:	029f      	lsls	r7, r3, #10
 8003ba2:	d50c      	bpl.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ba4:	4825      	ldr	r0, [pc, #148]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ba6:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003ba8:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003bac:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bb0:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8003bb4:	bf08      	it	eq
 8003bb6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003bbe:	f013 0f08 	tst.w	r3, #8
 8003bc2:	bf18      	it	ne
 8003bc4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bc6:	0358      	lsls	r0, r3, #13
 8003bc8:	d508      	bpl.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bca:	491c      	ldr	r1, [pc, #112]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bcc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003bce:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003bd2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bd6:	4302      	orrs	r2, r0
 8003bd8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bdc:	0219      	lsls	r1, r3, #8
 8003bde:	d509      	bpl.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be0:	4916      	ldr	r1, [pc, #88]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003be2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003be6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003bea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003bee:	4302      	orrs	r2, r0
 8003bf0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bf4:	2e01      	cmp	r6, #1
 8003bf6:	f000 80b4 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	f100 80b1 	bmi.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c00:	2d01      	cmp	r5, #1
 8003c02:	d176      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c04:	4d0d      	ldr	r5, [pc, #52]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fcb1 	bl	8002574 <HAL_GetTick>
 8003c12:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	009f      	lsls	r7, r3, #2
 8003c18:	f100 8127 	bmi.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c1c:	6821      	ldr	r1, [r4, #0]
 8003c1e:	030e      	lsls	r6, r1, #12
 8003c20:	d501      	bpl.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8003c22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c24:	b11b      	cbz	r3, 8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003c26:	02cd      	lsls	r5, r1, #11
 8003c28:	d523      	bpl.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c2c:	bb0b      	cbnz	r3, 8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c2e:	4a03      	ldr	r2, [pc, #12]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c30:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c34:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c48:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003c4c:	4303      	orrs	r3, r0
 8003c4e:	6960      	ldr	r0, [r4, #20]
 8003c50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c54:	69a0      	ldr	r0, [r4, #24]
 8003c56:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c5e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8003c62:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003c64:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003c68:	3801      	subs	r0, #1
 8003c6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c72:	0288      	lsls	r0, r1, #10
 8003c74:	d515      	bpl.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003c76:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c7c:	d111      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c7e:	4a82      	ldr	r2, [pc, #520]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c80:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c84:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c88:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003c8c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003c90:	4303      	orrs	r3, r0
 8003c92:	6960      	ldr	r0, [r4, #20]
 8003c94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c98:	6a20      	ldr	r0, [r4, #32]
 8003c9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ca2:	070a      	lsls	r2, r1, #28
 8003ca4:	d519      	bpl.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ca6:	4a78      	ldr	r2, [pc, #480]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003ca8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cac:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cb0:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6961      	ldr	r1, [r4, #20]
 8003cbc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003cc0:	69e1      	ldr	r1, [r4, #28]
 8003cc2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003cc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cca:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8003cce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003cd0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cda:	4c6b      	ldr	r4, [pc, #428]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fc46 	bl	8002574 <HAL_GetTick>
 8003ce8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f140 80c3 	bpl.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e009      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8003cf6:	2601      	movs	r6, #1
 8003cf8:	e67a      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fe fc3b 	bl	8002574 <HAL_GetTick>
 8003cfe:	eba0 0008 	sub.w	r0, r0, r8
 8003d02:	2864      	cmp	r0, #100	@ 0x64
 8003d04:	f67f ae8c 	bls.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
}
 8003d0a:	b003      	add	sp, #12
 8003d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d10:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003d14:	4293      	cmp	r3, r2
 8003d16:	f43f ae8e 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d26:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003d2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d2e:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8003d30:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d34:	07db      	lsls	r3, r3, #31
 8003d36:	f57f ae7e 	bpl.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fc1b 	bl	8002574 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003d42:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d46:	0798      	lsls	r0, r3, #30
 8003d48:	f53f ae75 	bmi.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fe fc12 	bl	8002574 <HAL_GetTick>
 8003d50:	eba0 0008 	sub.w	r0, r0, r8
 8003d54:	4548      	cmp	r0, r9
 8003d56:	d9f5      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d58:	e7d6      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d5a:	6891      	ldr	r1, [r2, #8]
 8003d5c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8003d60:	e679      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8003d62:	4e49      	ldr	r6, [pc, #292]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d64:	6833      	ldr	r3, [r6, #0]
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d6a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d6c:	f7fe fc02 	bl	8002574 <HAL_GetTick>
 8003d70:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d72:	6833      	ldr	r3, [r6, #0]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	d472      	bmi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d78:	6822      	ldr	r2, [r4, #0]
 8003d7a:	07d7      	lsls	r7, r2, #31
 8003d7c:	d512      	bpl.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003d7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d80:	b983      	cbnz	r3, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d82:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d86:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d8e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6861      	ldr	r1, [r4, #4]
 8003d96:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003d9a:	68a1      	ldr	r1, [r4, #8]
 8003d9c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003da0:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da4:	0316      	lsls	r6, r2, #12
 8003da6:	d503      	bpl.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003da8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dae:	d005      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003db0:	02d0      	lsls	r0, r2, #11
 8003db2:	d51e      	bpl.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003db4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dba:	d11a      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dbc:	4932      	ldr	r1, [pc, #200]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003dbe:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc2:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dca:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003dce:	4303      	orrs	r3, r0
 8003dd0:	6860      	ldr	r0, [r4, #4]
 8003dd2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003dd6:	68e0      	ldr	r0, [r4, #12]
 8003dd8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003de0:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8003de4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003de6:	f020 001f 	bic.w	r0, r0, #31
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4303      	orrs	r3, r0
 8003dee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df2:	01d1      	lsls	r1, r2, #7
 8003df4:	d511      	bpl.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003df6:	4924      	ldr	r1, [pc, #144]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003df8:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dfc:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e00:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003e04:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003e08:	4303      	orrs	r3, r0
 8003e0a:	6860      	ldr	r0, [r4, #4]
 8003e0c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003e10:	6920      	ldr	r0, [r4, #16]
 8003e12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003e16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e1a:	0192      	lsls	r2, r2, #6
 8003e1c:	d50d      	bpl.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	6862      	ldr	r2, [r4, #4]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e28:	68e2      	ldr	r2, [r4, #12]
 8003e2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e2e:	68a2      	ldr	r2, [r4, #8]
 8003e30:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003e34:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003e3a:	4e13      	ldr	r6, [pc, #76]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e3c:	6833      	ldr	r3, [r6, #0]
 8003e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e42:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e44:	f7fe fb96 	bl	8002574 <HAL_GetTick>
 8003e48:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4a:	6833      	ldr	r3, [r6, #0]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	f53f aed7 	bmi.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e52:	f7fe fb8f 	bl	8002574 <HAL_GetTick>
 8003e56:	1bc0      	subs	r0, r0, r7
 8003e58:	2864      	cmp	r0, #100	@ 0x64
 8003e5a:	d9f6      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e5c:	e754      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e5e:	f7fe fb89 	bl	8002574 <HAL_GetTick>
 8003e62:	1bc0      	subs	r0, r0, r7
 8003e64:	2864      	cmp	r0, #100	@ 0x64
 8003e66:	d984      	bls.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003e68:	e74e      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e6a:	f7fe fb83 	bl	8002574 <HAL_GetTick>
 8003e6e:	1b80      	subs	r0, r0, r6
 8003e70:	2864      	cmp	r0, #100	@ 0x64
 8003e72:	f67f aecf 	bls.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003e76:	e747      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e78:	f7fe fb7c 	bl	8002574 <HAL_GetTick>
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	2864      	cmp	r0, #100	@ 0x64
 8003e80:	f67f af33 	bls.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e84:	e740      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800

08003e8c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_SDRAM_Init>:
{
 8003e8e:	b538      	push	{r3, r4, r5, lr}
 8003e90:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8003e92:	4604      	mov	r4, r0
 8003e94:	b1c8      	cbz	r0, 8003eca <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e96:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003e9a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003e9e:	b91b      	cbnz	r3, 8003ea8 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8003ea0:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003ea4:	f7ff fff2 	bl	8003e8c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ea8:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003eaa:	1d21      	adds	r1, r4, #4
 8003eac:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eae:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003eb2:	f000 fab7 	bl	8004424 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	4629      	mov	r1, r5
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	f000 faea 	bl	8004494 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ec0:	2301      	movs	r3, #1
  return HAL_OK;
 8003ec2:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ec4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8003ec8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e7fc      	b.n	8003ec8 <HAL_SDRAM_Init+0x3a>

08003ece <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003ece:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003ed0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003ed8:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003eda:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8003edc:	d010      	beq.n	8003f00 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003ede:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8003ee2:	2c01      	cmp	r4, #1
 8003ee4:	d110      	bne.n	8003f08 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ee6:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003ee8:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eea:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003eee:	f000 fb07 	bl	8004500 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003ef2:	6833      	ldr	r3, [r6, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d104      	bne.n	8003f02 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003ef8:	2305      	movs	r3, #5
 8003efa:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003efe:	2000      	movs	r0, #0
}
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003f02:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8003f06:	e7fa      	b.n	8003efe <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
 8003f0a:	e7f9      	b.n	8003f00 <HAL_SDRAM_SendCommand+0x32>

08003f0c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f0e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8003f12:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	b2d8      	uxtb	r0, r3
 8003f18:	d00d      	beq.n	8003f36 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003f1a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	b2dd      	uxtb	r5, r3
 8003f22:	d109      	bne.n	8003f38 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f24:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003f26:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f28:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003f2c:	f000 fafa 	bl	8004524 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003f30:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f32:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e7fc      	b.n	8003f36 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08003f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f40:	69c0      	ldr	r0, [r0, #28]
 8003f42:	6921      	ldr	r1, [r4, #16]
 8003f44:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f46:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f4c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f4e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f50:	497d      	ldr	r1, [pc, #500]	@ (8004148 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f52:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f54:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8003f56:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f58:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f5c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f68:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6a:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003f6c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f76:	4a75      	ldr	r2, [pc, #468]	@ (800414c <UART_SetConfig+0x210>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d113      	bne.n	8003fa4 <UART_SetConfig+0x68>
 8003f7c:	4b74      	ldr	r3, [pc, #464]	@ (8004150 <UART_SetConfig+0x214>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	f000 80a8 	beq.w	80040dc <UART_SetConfig+0x1a0>
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d021      	beq.n	8003fd4 <UART_SetConfig+0x98>
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 80bd 	bne.w	8004110 <UART_SetConfig+0x1d4>

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003f9a:	f040 809c 	bne.w	80040d6 <UART_SetConfig+0x19a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7ff fbf9 	bl	8003794 <HAL_RCC_GetSysClockFreq>
        break;
 8003fa2:	e092      	b.n	80040ca <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8004154 <UART_SetConfig+0x218>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d11b      	bne.n	8003fe2 <UART_SetConfig+0xa6>
 8003faa:	4b69      	ldr	r3, [pc, #420]	@ (8004150 <UART_SetConfig+0x214>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	f000 8091 	beq.w	80040dc <UART_SetConfig+0x1a0>
 8003fba:	d809      	bhi.n	8003fd0 <UART_SetConfig+0x94>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80ad 	beq.w	800411c <UART_SetConfig+0x1e0>
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d0e7      	beq.n	8003f96 <UART_SetConfig+0x5a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003fca:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68

  return ret;
}
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d1f8      	bne.n	8003fc6 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003fd8:	f000 8084 	beq.w	80040e4 <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 8003fdc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003fe0:	e0a3      	b.n	800412a <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8004158 <UART_SetConfig+0x21c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d10e      	bne.n	8004006 <UART_SetConfig+0xca>
 8003fe8:	4b59      	ldr	r3, [pc, #356]	@ (8004150 <UART_SetConfig+0x214>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d072      	beq.n	80040dc <UART_SetConfig+0x1a0>
 8003ff6:	d804      	bhi.n	8004002 <UART_SetConfig+0xc6>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 808f 	beq.w	800411c <UART_SetConfig+0x1e0>
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	e7e0      	b.n	8003fc4 <UART_SetConfig+0x88>
 8004002:	2b30      	cmp	r3, #48	@ 0x30
 8004004:	e7e5      	b.n	8003fd2 <UART_SetConfig+0x96>
 8004006:	4a55      	ldr	r2, [pc, #340]	@ (800415c <UART_SetConfig+0x220>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10d      	bne.n	8004028 <UART_SetConfig+0xec>
 800400c:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <UART_SetConfig+0x214>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004016:	2b80      	cmp	r3, #128	@ 0x80
 8004018:	d060      	beq.n	80040dc <UART_SetConfig+0x1a0>
 800401a:	d803      	bhi.n	8004024 <UART_SetConfig+0xe8>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d07d      	beq.n	800411c <UART_SetConfig+0x1e0>
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	e7cf      	b.n	8003fc4 <UART_SetConfig+0x88>
 8004024:	2bc0      	cmp	r3, #192	@ 0xc0
 8004026:	e7d4      	b.n	8003fd2 <UART_SetConfig+0x96>
 8004028:	4a4d      	ldr	r2, [pc, #308]	@ (8004160 <UART_SetConfig+0x224>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d110      	bne.n	8004050 <UART_SetConfig+0x114>
 800402e:	4b48      	ldr	r3, [pc, #288]	@ (8004150 <UART_SetConfig+0x214>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800403c:	d04e      	beq.n	80040dc <UART_SetConfig+0x1a0>
 800403e:	d804      	bhi.n	800404a <UART_SetConfig+0x10e>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d06b      	beq.n	800411c <UART_SetConfig+0x1e0>
 8004044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004048:	e7bc      	b.n	8003fc4 <UART_SetConfig+0x88>
 800404a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404e:	e7c0      	b.n	8003fd2 <UART_SetConfig+0x96>
 8004050:	4a44      	ldr	r2, [pc, #272]	@ (8004164 <UART_SetConfig+0x228>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d110      	bne.n	8004078 <UART_SetConfig+0x13c>
 8004056:	4b3e      	ldr	r3, [pc, #248]	@ (8004150 <UART_SetConfig+0x214>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004064:	d03a      	beq.n	80040dc <UART_SetConfig+0x1a0>
 8004066:	d804      	bhi.n	8004072 <UART_SetConfig+0x136>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d051      	beq.n	8004110 <UART_SetConfig+0x1d4>
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004070:	e7a8      	b.n	8003fc4 <UART_SetConfig+0x88>
 8004072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004076:	e7ac      	b.n	8003fd2 <UART_SetConfig+0x96>
 8004078:	4a3b      	ldr	r2, [pc, #236]	@ (8004168 <UART_SetConfig+0x22c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d110      	bne.n	80040a0 <UART_SetConfig+0x164>
 800407e:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <UART_SetConfig+0x214>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408c:	d026      	beq.n	80040dc <UART_SetConfig+0x1a0>
 800408e:	d804      	bhi.n	800409a <UART_SetConfig+0x15e>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d043      	beq.n	800411c <UART_SetConfig+0x1e0>
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004098:	e794      	b.n	8003fc4 <UART_SetConfig+0x88>
 800409a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800409e:	e798      	b.n	8003fd2 <UART_SetConfig+0x96>
 80040a0:	4a32      	ldr	r2, [pc, #200]	@ (800416c <UART_SetConfig+0x230>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d18f      	bne.n	8003fc6 <UART_SetConfig+0x8a>
 80040a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004150 <UART_SetConfig+0x214>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b4:	d012      	beq.n	80040dc <UART_SetConfig+0x1a0>
 80040b6:	d803      	bhi.n	80040c0 <UART_SetConfig+0x184>
 80040b8:	b383      	cbz	r3, 800411c <UART_SetConfig+0x1e0>
 80040ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040be:	e781      	b.n	8003fc4 <UART_SetConfig+0x88>
 80040c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040c4:	e785      	b.n	8003fd2 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7ff fc37 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80040ca:	b958      	cbnz	r0, 80040e4 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040cc:	2000      	movs	r0, #0
 80040ce:	e77b      	b.n	8003fc8 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7ff fc42 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
        break;
 80040d4:	e027      	b.n	8004126 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff fb5d 	bl	8003794 <HAL_RCC_GetSysClockFreq>
        break;
 80040da:	e024      	b.n	8004126 <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040dc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80040e0:	4823      	ldr	r0, [pc, #140]	@ (8004170 <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	d122      	bne.n	800412a <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e4:	6862      	ldr	r2, [r4, #4]
 80040e6:	0853      	lsrs	r3, r2, #1
 80040e8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80040ec:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80040f4:	f1a3 0110 	sub.w	r1, r3, #16
 80040f8:	4291      	cmp	r1, r2
 80040fa:	f63f af64 	bhi.w	8003fc6 <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040fe:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004102:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004106:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004108:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800410a:	4313      	orrs	r3, r2
 800410c:	60cb      	str	r3, [r1, #12]
 800410e:	e7dd      	b.n	80040cc <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004110:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004114:	d1dc      	bne.n	80040d0 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004116:	f7ff fc1f 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
        break;
 800411a:	e7d6      	b.n	80040ca <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800411c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004120:	d0d1      	beq.n	80040c6 <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004122:	f7ff fc09 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004126:	2800      	cmp	r0, #0
 8004128:	d0d0      	beq.n	80040cc <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004130:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004134:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004138:	f1a3 0110 	sub.w	r1, r3, #16
 800413c:	4291      	cmp	r1, r2
 800413e:	f63f af42 	bhi.w	8003fc6 <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	60d3      	str	r3, [r2, #12]
 8004146:	e7c1      	b.n	80040cc <UART_SetConfig+0x190>
 8004148:	efff69f3 	.word	0xefff69f3
 800414c:	40011000 	.word	0x40011000
 8004150:	40023800 	.word	0x40023800
 8004154:	40004400 	.word	0x40004400
 8004158:	40004800 	.word	0x40004800
 800415c:	40004c00 	.word	0x40004c00
 8004160:	40005000 	.word	0x40005000
 8004164:	40011400 	.word	0x40011400
 8004168:	40007800 	.word	0x40007800
 800416c:	40007c00 	.word	0x40007c00
 8004170:	00f42400 	.word	0x00f42400

08004174 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004174:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004176:	07da      	lsls	r2, r3, #31
{
 8004178:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800417a:	d506      	bpl.n	800418a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417c:	6801      	ldr	r1, [r0, #0]
 800417e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8004180:	684a      	ldr	r2, [r1, #4]
 8004182:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004186:	4322      	orrs	r2, r4
 8004188:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800418a:	079c      	lsls	r4, r3, #30
 800418c:	d506      	bpl.n	800419c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	6801      	ldr	r1, [r0, #0]
 8004190:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004192:	684a      	ldr	r2, [r1, #4]
 8004194:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004198:	4322      	orrs	r2, r4
 800419a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800419c:	0759      	lsls	r1, r3, #29
 800419e:	d506      	bpl.n	80041ae <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a0:	6801      	ldr	r1, [r0, #0]
 80041a2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80041a4:	684a      	ldr	r2, [r1, #4]
 80041a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041aa:	4322      	orrs	r2, r4
 80041ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	071a      	lsls	r2, r3, #28
 80041b0:	d506      	bpl.n	80041c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b2:	6801      	ldr	r1, [r0, #0]
 80041b4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80041b6:	684a      	ldr	r2, [r1, #4]
 80041b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041bc:	4322      	orrs	r2, r4
 80041be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c0:	06dc      	lsls	r4, r3, #27
 80041c2:	d506      	bpl.n	80041d2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c4:	6801      	ldr	r1, [r0, #0]
 80041c6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041ce:	4322      	orrs	r2, r4
 80041d0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d2:	0699      	lsls	r1, r3, #26
 80041d4:	d506      	bpl.n	80041e4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041d6:	6801      	ldr	r1, [r0, #0]
 80041d8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80041da:	688a      	ldr	r2, [r1, #8]
 80041dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e0:	4322      	orrs	r2, r4
 80041e2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e4:	065a      	lsls	r2, r3, #25
 80041e6:	d510      	bpl.n	800420a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80041ec:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ee:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041f2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80041f6:	ea42 0204 	orr.w	r2, r2, r4
 80041fa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fc:	d105      	bne.n	800420a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041fe:	684a      	ldr	r2, [r1, #4]
 8004200:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004202:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004206:	4322      	orrs	r2, r4
 8004208:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	d506      	bpl.n	800421c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420e:	6802      	ldr	r2, [r0, #0]
 8004210:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004212:	6853      	ldr	r3, [r2, #4]
 8004214:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004218:	430b      	orrs	r3, r1
 800421a:	6053      	str	r3, [r2, #4]
  }
}
 800421c:	bd10      	pop	{r4, pc}

0800421e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004222:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004226:	4605      	mov	r5, r0
 8004228:	460f      	mov	r7, r1
 800422a:	4616      	mov	r6, r2
 800422c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	682a      	ldr	r2, [r5, #0]
 8004230:	69d3      	ldr	r3, [r2, #28]
 8004232:	ea37 0303 	bics.w	r3, r7, r3
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	42b3      	cmp	r3, r6
 800423e:	d001      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004240:	2000      	movs	r0, #0
 8004242:	e028      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8004244:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8004248:	d0f2      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fe f993 	bl	8002574 <HAL_GetTick>
 800424e:	eba0 0008 	sub.w	r0, r0, r8
 8004252:	682c      	ldr	r4, [r5, #0]
 8004254:	4548      	cmp	r0, r9
 8004256:	d802      	bhi.n	800425e <UART_WaitOnFlagUntilTimeout+0x40>
 8004258:	f1b9 0f00 	cmp.w	r9, #0
 800425c:	d11d      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004262:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	e844 3200 	strex	r2, r3, [r4]
 800426a:	2a00      	cmp	r2, #0
 800426c:	d1f7      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	f104 0308 	add.w	r3, r4, #8
 8004272:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	f104 0108 	add.w	r1, r4, #8
 800427e:	e841 3200 	strex	r2, r3, [r1]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d1f3      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState = HAL_UART_STATE_READY;
 8004286:	2320      	movs	r3, #32
 8004288:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800428a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 800428e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004290:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004292:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
}
 8004296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	075a      	lsls	r2, r3, #29
 800429e:	d5c6      	bpl.n	800422e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a0:	69e3      	ldr	r3, [r4, #28]
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	d5c3      	bpl.n	800422e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042aa:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	e844 3200 	strex	r2, r3, [r4]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	d1f7      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	f104 0308 	add.w	r3, r4, #8
 80042c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	f104 0108 	add.w	r1, r4, #8
 80042cc:	e841 3200 	strex	r2, r3, [r1]
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d1f3      	bne.n	80042bc <UART_WaitOnFlagUntilTimeout+0x9e>
          huart->gState = HAL_UART_STATE_READY;
 80042d4:	2320      	movs	r3, #32
 80042d6:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042d8:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042dc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80042e0:	e7d5      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0x70>

080042e2 <HAL_UART_Transmit>:
{
 80042e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042e6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80042e8:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80042ea:	4604      	mov	r4, r0
 80042ec:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80042ee:	2b20      	cmp	r3, #32
{
 80042f0:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80042f2:	d141      	bne.n	8004378 <HAL_UART_Transmit+0x96>
    if ((pData == NULL) || (Size == 0U))
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d041      	beq.n	800437c <HAL_UART_Transmit+0x9a>
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d03f      	beq.n	800437c <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	2500      	movs	r5, #0
 8004300:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004304:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8004306:	f7fe f935 	bl	8002574 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800430c:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800430e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8004316:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	d103      	bne.n	8004324 <HAL_UART_Transmit+0x42>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	b90b      	cbnz	r3, 8004324 <HAL_UART_Transmit+0x42>
 8004320:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004322:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8004324:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004328:	464b      	mov	r3, r9
 800432a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800432e:	b292      	uxth	r2, r2
 8004330:	b93a      	cbnz	r2, 8004342 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004332:	2140      	movs	r1, #64	@ 0x40
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff ff72 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 800433a:	b940      	cbnz	r0, 800434e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 800433c:	2320      	movs	r3, #32
 800433e:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8004340:	e006      	b.n	8004350 <HAL_UART_Transmit+0x6e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	2200      	movs	r2, #0
 8004344:	2180      	movs	r1, #128	@ 0x80
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff ff69 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 800434c:	b118      	cbz	r0, 8004356 <HAL_UART_Transmit+0x74>
        return HAL_TIMEOUT;
 800434e:	2003      	movs	r0, #3
}
 8004350:	b003      	add	sp, #12
 8004352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004356:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004358:	b95e      	cbnz	r6, 8004372 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004362:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8004364:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8004368:	3a01      	subs	r2, #1
 800436a:	b292      	uxth	r2, r2
 800436c:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8004370:	e7d8      	b.n	8004324 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004372:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004376:	e7f4      	b.n	8004362 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8004378:	2002      	movs	r0, #2
 800437a:	e7e9      	b.n	8004350 <HAL_UART_Transmit+0x6e>
      return  HAL_ERROR;
 800437c:	2001      	movs	r0, #1
 800437e:	e7e7      	b.n	8004350 <HAL_UART_Transmit+0x6e>

08004380 <UART_CheckIdleState>:
{
 8004380:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004382:	2500      	movs	r5, #0
{
 8004384:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800438a:	f7fe f8f3 	bl	8002574 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004390:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	0712      	lsls	r2, r2, #28
 8004396:	d40a      	bmi.n	80043ae <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800439a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800439c:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a8:	6660      	str	r0, [r4, #100]	@ 0x64
}
 80043aa:	b003      	add	sp, #12
 80043ac:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ae:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80043b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043b6:	4620      	mov	r0, r4
 80043b8:	9200      	str	r2, [sp, #0]
 80043ba:	462a      	mov	r2, r5
 80043bc:	f7ff ff2f 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d0e9      	beq.n	8004398 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80043c4:	2003      	movs	r0, #3
 80043c6:	e7f0      	b.n	80043aa <UART_CheckIdleState+0x2a>

080043c8 <HAL_UART_Init>:
{
 80043c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80043ca:	4604      	mov	r4, r0
 80043cc:	b340      	cbz	r0, 8004420 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80043ce:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80043d0:	b91b      	cbnz	r3, 80043da <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80043d2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80043d6:	f7fd fcb7 	bl	8001d48 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80043da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043de:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80043e0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ea:	f7ff fda7 	bl	8003f3c <UART_SetConfig>
 80043ee:	2801      	cmp	r0, #1
 80043f0:	d016      	beq.n	8004420 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043f4:	b113      	cbz	r3, 80043fc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7ff febc 	bl	8004174 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80043fe:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800440e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
}
 8004416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800441a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800441c:	f7ff bfb0 	b.w	8004380 <UART_CheckIdleState>
}
 8004420:	2001      	movs	r0, #1
 8004422:	bd10      	pop	{r4, pc}

08004424 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004428:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800442c:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8004430:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8004434:	ea43 0308 	orr.w	r3, r3, r8
 8004438:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800443c:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004440:	6809      	ldr	r1, [r1, #0]
 8004442:	b991      	cbnz	r1, 800446a <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004444:	ea43 030e 	orr.w	r3, r3, lr
 8004448:	6801      	ldr	r1, [r0, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8004450:	ea43 030c 	orr.w	r3, r3, ip
 8004454:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8004458:	433b      	orrs	r3, r7
 800445a:	4333      	orrs	r3, r6
 800445c:	432b      	orrs	r3, r5
 800445e:	4323      	orrs	r3, r4
 8004460:	430b      	orrs	r3, r1
 8004462:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004464:	2000      	movs	r0, #0
 8004466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800446a:	6801      	ldr	r1, [r0, #0]
 800446c:	ea43 030e 	orr.w	r3, r3, lr
 8004470:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8004474:	430b      	orrs	r3, r1
 8004476:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004478:	ea42 030c 	orr.w	r3, r2, ip
 800447c:	6841      	ldr	r1, [r0, #4]
 800447e:	433b      	orrs	r3, r7
 8004480:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8004484:	4333      	orrs	r3, r6
 8004486:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800448a:	432b      	orrs	r3, r5
 800448c:	4323      	orrs	r3, r4
 800448e:	4313      	orrs	r3, r2
 8004490:	6043      	str	r3, [r0, #4]
 8004492:	e7e7      	b.n	8004464 <FMC_SDRAM_Init+0x40>

08004494 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004494:	68cb      	ldr	r3, [r1, #12]
 8004496:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 800449a:	694b      	ldr	r3, [r1, #20]
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800449e:	3b01      	subs	r3, #1
 80044a0:	680f      	ldr	r7, [r1, #0]
 80044a2:	684c      	ldr	r4, [r1, #4]
 80044a4:	688e      	ldr	r6, [r1, #8]
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	690d      	ldr	r5, [r1, #16]
 80044aa:	3c01      	subs	r4, #1
 80044ac:	6989      	ldr	r1, [r1, #24]
 80044ae:	3e01      	subs	r6, #1
 80044b0:	3d01      	subs	r5, #1
 80044b2:	3f01      	subs	r7, #1
 80044b4:	3901      	subs	r1, #1
 80044b6:	0124      	lsls	r4, r4, #4
 80044b8:	0236      	lsls	r6, r6, #8
 80044ba:	042d      	lsls	r5, r5, #16
 80044bc:	0609      	lsls	r1, r1, #24
 80044be:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80044c2:	b95a      	cbnz	r2, 80044dc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80044c4:	433b      	orrs	r3, r7
 80044c6:	6882      	ldr	r2, [r0, #8]
 80044c8:	4323      	orrs	r3, r4
 80044ca:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80044ce:	4333      	orrs	r3, r6
 80044d0:	432b      	orrs	r3, r5
 80044d2:	430b      	orrs	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80044d8:	2000      	movs	r0, #0
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80044dc:	6882      	ldr	r2, [r0, #8]
 80044de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044e2:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80044e6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80044e8:	ea44 0306 	orr.w	r3, r4, r6
 80044ec:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80044ee:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80044f0:	68c2      	ldr	r2, [r0, #12]
 80044f2:	432b      	orrs	r3, r5
 80044f4:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80044f8:	430b      	orrs	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60c3      	str	r3, [r0, #12]
 80044fe:	e7eb      	b.n	80044d8 <FMC_SDRAM_Timing_Init+0x44>

08004500 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004500:	6902      	ldr	r2, [r0, #16]
{
 8004502:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004504:	e9d1 3400 	ldrd	r3, r4, [r1]
 8004508:	0d92      	lsrs	r2, r2, #22
 800450a:	4323      	orrs	r3, r4
 800450c:	68cc      	ldr	r4, [r1, #12]
 800450e:	0592      	lsls	r2, r2, #22
 8004510:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8004514:	4313      	orrs	r3, r2
 8004516:	688a      	ldr	r2, [r1, #8]
 8004518:	3a01      	subs	r2, #1
 800451a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800451e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8004520:	2000      	movs	r0, #0
 8004522:	bd10      	pop	{r4, pc}

08004524 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004524:	6943      	ldr	r3, [r0, #20]
 8004526:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800452a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800452e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004532:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8004534:	2000      	movs	r0, #0
 8004536:	4770      	bx	lr

08004538 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8004538:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 800453c:	484d      	ldr	r0, [pc, #308]	@ (8004674 <aiSystemPerformanceInit+0x13c>)
{
 800453e:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8004540:	f000 fad6 	bl	8004af0 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8004544:	494c      	ldr	r1, [pc, #304]	@ (8004678 <aiSystemPerformanceInit+0x140>)
 8004546:	2301      	movs	r3, #1
 8004548:	2207      	movs	r2, #7
 800454a:	f101 0016 	add.w	r0, r1, #22
#else /* USE_SYSTICK_ONLY */
  struct dwtTime t;
  uint32_t st;

  port_dwt_init();
  port_dwt_reset();
 800454e:	4d4b      	ldr	r5, [pc, #300]	@ (800467c <aiSystemPerformanceInit+0x144>)
 8004550:	2400      	movs	r4, #0
 8004552:	f000 facd 	bl	8004af0 <lc_print>
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8004556:	484a      	ldr	r0, [pc, #296]	@ (8004680 <aiSystemPerformanceInit+0x148>)
 8004558:	f000 faca 	bl	8004af0 <lc_print>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800455c:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 80046a0 <aiSystemPerformanceInit+0x168>

  systemSettingLog();
 8004560:	f000 fb78 	bl	8004c54 <systemSettingLog>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004564:	4e47      	ldr	r6, [pc, #284]	@ (8004684 <aiSystemPerformanceInit+0x14c>)
  port_dwt_init();
 8004566:	f000 fbef 	bl	8004d48 <port_dwt_init_imp>
  port_hal_delay(100);
 800456a:	2064      	movs	r0, #100	@ 0x64
  port_dwt_reset();
 800456c:	606c      	str	r4, [r5, #4]
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800456e:	f109 0a17 	add.w	sl, r9, #23
  port_hal_delay(100);
 8004572:	f7fe f805 	bl	8002580 <HAL_Delay>
  st = port_dwt_get_cycles();
 8004576:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8004578:	2564      	movs	r5, #100	@ 0x64
 800457a:	aa02      	add	r2, sp, #8
 800457c:	4621      	mov	r1, r4
  LC_PRINT("Initializing the network\r\n");
 800457e:	f109 0b48 	add.w	fp, r9, #72	@ 0x48
 8004582:	fbb0 f0f5 	udiv	r0, r0, r5
 8004586:	f000 faed 	bl	8004b64 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (delay(1)=%d.%03d ms)\r\n",
           t.s * 100 + t.ms, t.us);
#else /* USE_CORE_CLOCK_ONLY == 1 */
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 800458a:	9a05      	ldr	r2, [sp, #20]
 800458c:	483e      	ldr	r0, [pc, #248]	@ (8004688 <aiSystemPerformanceInit+0x150>)
 800458e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8004592:	fb05 3101 	mla	r1, r5, r1, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004596:	4635      	mov	r5, r6
 8004598:	f000 faaa 	bl	8004af0 <lc_print>
           t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 800459c:	aa02      	add	r2, sp, #8
 800459e:	2100      	movs	r1, #0
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045a4:	f000 fade 	bl	8004b64 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80045a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80045ac:	9a03      	ldr	r2, [sp, #12]
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	fb01 3302 	mla	r3, r1, r2, r3
 80045b4:	4a35      	ldr	r2, [pc, #212]	@ (800468c <aiSystemPerformanceInit+0x154>)
 80045b6:	6013      	str	r3, [r2, #0]
#endif /* !USE_CORE_CLOCK_ONLY != 1 */
  port_dwt_init();
 80045b8:	f000 fbc6 	bl	8004d48 <port_dwt_init_imp>
  aiPlatformVersion();
 80045bc:	f000 f888 	bl	80046d0 <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 80045c0:	4833      	ldr	r0, [pc, #204]	@ (8004690 <aiSystemPerformanceInit+0x158>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80045c2:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 80045c6:	f000 fa93 	bl	8004af0 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 80045ca:	4621      	mov	r1, r4
 80045cc:	2000      	movs	r0, #0
 80045ce:	f000 fc03 	bl	8004dd8 <ai_mnetwork_find>
    if (nn_name) {
 80045d2:	4680      	mov	r8, r0
 80045d4:	b190      	cbz	r0, 80045fc <aiSystemPerformanceInit+0xc4>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80045d6:	4601      	mov	r1, r0
 80045d8:	4648      	mov	r0, r9
 80045da:	f000 fa89 	bl	8004af0 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80045de:	4641      	mov	r1, r8
 80045e0:	4650      	mov	r0, sl
 80045e2:	f000 fa85 	bl	8004af0 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80045e6:	2200      	movs	r2, #0
 80045e8:	f1a5 0108 	sub.w	r1, r5, #8
 80045ec:	4640      	mov	r0, r8
 80045ee:	f000 fc01 	bl	8004df4 <ai_mnetwork_create>
  if (err.type) {
 80045f2:	b2c3      	uxtb	r3, r0
 80045f4:	b14b      	cbz	r3, 800460a <aiSystemPerformanceInit+0xd2>
    aiLogErr(err, "ai_mnetwork_create");
 80045f6:	4927      	ldr	r1, [pc, #156]	@ (8004694 <aiSystemPerformanceInit+0x15c>)
 80045f8:	f000 f880 	bl	80046fc <aiLogErr>

  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 80045fc:	2003      	movs	r0, #3
 80045fe:	f004 f8c7 	bl	8008790 <srand>

  return 0;
}
 8004602:	2000      	movs	r0, #0
 8004604:	b006      	add	sp, #24
 8004606:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 800460a:	4658      	mov	r0, fp
 800460c:	46a8      	mov	r8, r5
 800460e:	f000 fa6f 	bl	8004af0 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004612:	4629      	mov	r1, r5
 8004614:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8004618:	f000 fc2a 	bl	8004e70 <ai_mnetwork_get_report>
 800461c:	4603      	mov	r3, r0
 800461e:	b938      	cbnz	r0, 8004630 <aiSystemPerformanceInit+0xf8>
    err = ai_mnetwork_get_error(ctx->handle);
 8004620:	2290      	movs	r2, #144	@ 0x90
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	4354      	muls	r4, r2
 8004626:	5930      	ldr	r0, [r6, r4]
 8004628:	f000 fc2d 	bl	8004e86 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 800462c:	491a      	ldr	r1, [pc, #104]	@ (8004698 <aiSystemPerformanceInit+0x160>)
 800462e:	e00b      	b.n	8004648 <aiSystemPerformanceInit+0x110>
  if (!ai_mnetwork_init(ctx->handle)) {
 8004630:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8004634:	f000 fc34 	bl	8004ea0 <ai_mnetwork_init>
 8004638:	b970      	cbnz	r0, 8004658 <aiSystemPerformanceInit+0x120>
    err = ai_mnetwork_get_error(ctx->handle);
 800463a:	2290      	movs	r2, #144	@ 0x90
 800463c:	9001      	str	r0, [sp, #4]
 800463e:	4354      	muls	r4, r2
 8004640:	5930      	ldr	r0, [r6, r4]
 8004642:	f000 fc20 	bl	8004e86 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8004646:	4915      	ldr	r1, [pc, #84]	@ (800469c <aiSystemPerformanceInit+0x164>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8004648:	f000 f858 	bl	80046fc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800464c:	5930      	ldr	r0, [r6, r4]
 800464e:	f000 fbf7 	bl	8004e40 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8004652:	9b01      	ldr	r3, [sp, #4]
 8004654:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8004656:	e7d1      	b.n	80045fc <aiSystemPerformanceInit+0xc4>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004658:	4629      	mov	r1, r5
 800465a:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800465e:	f000 fc07 	bl	8004e70 <ai_mnetwork_get_report>
 8004662:	3590      	adds	r5, #144	@ 0x90
 8004664:	4603      	mov	r3, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	d0da      	beq.n	8004620 <aiSystemPerformanceInit+0xe8>
    aiPrintNetworkInfo(&ctx->report);
 800466a:	4640      	mov	r0, r8
    idx++;
 800466c:	3401      	adds	r4, #1
    aiPrintNetworkInfo(&ctx->report);
 800466e:	f000 f94d 	bl	800490c <aiPrintNetworkInfo>
  } while (nn_name);
 8004672:	e7aa      	b.n	80045ca <aiSystemPerformanceInit+0x92>
 8004674:	0800b5e0 	.word	0x0800b5e0
 8004678:	0800b5e6 	.word	0x0800b5e6
 800467c:	e0001000 	.word	0xe0001000
 8004680:	0800b609 	.word	0x0800b609
 8004684:	20000fb0 	.word	0x20000fb0
 8004688:	0800b60d 	.word	0x0800b60d
 800468c:	20001040 	.word	0x20001040
 8004690:	0800b643 	.word	0x0800b643
 8004694:	0800b698 	.word	0x0800b698
 8004698:	0800b6c6 	.word	0x0800b6c6
 800469c:	0800b6db 	.word	0x0800b6db
 80046a0:	0800b663 	.word	0x0800b663

080046a4 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80046a6:	e9d1 6500 	ldrd	r6, r5, [r1]
{
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80046ae:	2101      	movs	r1, #1
 80046b0:	f001 f818 	bl	80056e4 <ai_buffer_get_size>
 80046b4:	4631      	mov	r1, r6
 80046b6:	f001 f849 	bl	800574c <ai_buffer_get_byte_size>
 80046ba:	462a      	mov	r2, r5
 80046bc:	4603      	mov	r3, r0
 80046be:	4621      	mov	r1, r4
 80046c0:	4802      	ldr	r0, [pc, #8]	@ (80046cc <_aiPrintDataInfo+0x28>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 80046c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80046c6:	f000 ba13 	b.w	8004af0 <lc_print>
 80046ca:	bf00      	nop
 80046cc:	0800bb85 	.word	0x0800bb85

080046d0 <aiPlatformVersion>:
{
 80046d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80046d2:	f001 f92b 	bl	800592c <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80046d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80046da:	2201      	movs	r2, #1
 80046dc:	9302      	str	r3, [sp, #8]
 80046de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80046e2:	b2c0      	uxtb	r0, r0
 80046e4:	4611      	mov	r1, r2
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9000      	str	r0, [sp, #0]
 80046ec:	4802      	ldr	r0, [pc, #8]	@ (80046f8 <aiPlatformVersion+0x28>)
 80046ee:	f000 f9ff 	bl	8004af0 <lc_print>
}
 80046f2:	b007      	add	sp, #28
 80046f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80046f8:	0800bb98 	.word	0x0800bb98

080046fc <aiLogErr>:
{
 80046fc:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80046fe:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8004702:	b2c4      	uxtb	r4, r0
  if (fct)
 8004704:	b129      	cbz	r1, 8004712 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004706:	4622      	mov	r2, r4
 8004708:	4805      	ldr	r0, [pc, #20]	@ (8004720 <aiLogErr+0x24>)
}
 800470a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800470e:	f000 b9ef 	b.w	8004af0 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004712:	4621      	mov	r1, r4
 8004714:	461a      	mov	r2, r3
 8004716:	4803      	ldr	r0, [pc, #12]	@ (8004724 <aiLogErr+0x28>)
}
 8004718:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800471c:	f000 b9e8 	b.w	8004af0 <lc_print>
 8004720:	0800bbca 	.word	0x0800bbca
 8004724:	0800bbf7 	.word	0x0800bbf7

08004728 <aiPrintBufferInfo>:
{
 8004728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 800472c:	6981      	ldr	r1, [r0, #24]
{
 800472e:	4605      	mov	r5, r0
  const ai_buffer_format fmt = buffer->format;
 8004730:	6807      	ldr	r7, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8004732:	4869      	ldr	r0, [pc, #420]	@ (80048d8 <aiPrintBufferInfo+0x1b0>)
 8004734:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8004738:	6809      	ldr	r1, [r1, #0]
 800473a:	f000 f9d9 	bl	8004af0 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 800473e:	696a      	ldr	r2, [r5, #20]
 8004740:	69a8      	ldr	r0, [r5, #24]
 8004742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004746:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800474a:	d119      	bne.n	8004780 <aiPrintBufferInfo+0x58>
    LC_PRINT("%d,%d)",
 800474c:	6842      	ldr	r2, [r0, #4]
 800474e:	6901      	ldr	r1, [r0, #16]
 8004750:	4862      	ldr	r0, [pc, #392]	@ (80048dc <aiPrintBufferInfo+0x1b4>)
 8004752:	f000 f9cd 	bl	8004af0 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8004756:	2101      	movs	r1, #1
 8004758:	4628      	mov	r0, r5
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800475a:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800475e:	f000 ffc1 	bl	80056e4 <ai_buffer_get_size>
 8004762:	4601      	mov	r1, r0
 8004764:	485e      	ldr	r0, [pc, #376]	@ (80048e0 <aiPrintBufferInfo+0x1b8>)
 8004766:	f000 f9c3 	bl	8004af0 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800476a:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800476c:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8004770:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004774:	d113      	bne.n	800479e <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004776:	4621      	mov	r1, r4
 8004778:	485a      	ldr	r0, [pc, #360]	@ (80048e4 <aiPrintBufferInfo+0x1bc>)
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800477a:	f000 f9b9 	bl	8004af0 <lc_print>
 800477e:	e046      	b.n	800480e <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8004780:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
    LC_PRINT("%d,%d,%d)",
 8004784:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8004786:	d105      	bne.n	8004794 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 8004788:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800478c:	4856      	ldr	r0, [pc, #344]	@ (80048e8 <aiPrintBufferInfo+0x1c0>)
 800478e:	f000 f9af 	bl	8004af0 <lc_print>
 8004792:	e7e0      	b.n	8004756 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8004794:	4619      	mov	r1, r3
 8004796:	4855      	ldr	r0, [pc, #340]	@ (80048ec <aiPrintBufferInfo+0x1c4>)
 8004798:	f000 f9aa 	bl	8004af0 <lc_print>
 800479c:	e7db      	b.n	8004756 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 800479e:	2e03      	cmp	r6, #3
 80047a0:	d102      	bne.n	80047a8 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80047a2:	4621      	mov	r1, r4
 80047a4:	4852      	ldr	r0, [pc, #328]	@ (80048f0 <aiPrintBufferInfo+0x1c8>)
 80047a6:	e7e8      	b.n	800477a <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80047a8:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 8004908 <aiPrintBufferInfo+0x1e0>
 80047ac:	f417 0f00 	tst.w	r7, #8388608	@ 0x800000
 80047b0:	4622      	mov	r2, r4
 80047b2:	f108 0102 	add.w	r1, r8, #2
 80047b6:	f108 003b 	add.w	r0, r8, #59	@ 0x3b
 80047ba:	bf18      	it	ne
 80047bc:	4641      	movne	r1, r8
 80047be:	f000 f997 	bl	8004af0 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80047c2:	2e02      	cmp	r6, #2
 80047c4:	d123      	bne.n	800480e <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80047c6:	68ab      	ldr	r3, [r5, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d068      	beq.n	800489e <aiPrintBufferInfo+0x176>
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	07d2      	lsls	r2, r2, #31
 80047d0:	d565      	bpl.n	800489e <aiPrintBufferInfo+0x176>
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d062      	beq.n	800489e <aiPrintBufferInfo+0x176>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80047d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 80047dc:	f108 0040 	add.w	r0, r8, #64	@ 0x40
      for (int idx=0; idx<max_; idx++) {
 80047e0:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80047e2:	f04f 0b00 	mov.w	fp, #0
      const int max_ = s_> 4?4:s_;
 80047e6:	f1b9 0f04 	cmp.w	r9, #4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80047ea:	f108 0845 	add.w	r8, r8, #69	@ 0x45
      LC_PRINT(" %d:", s_);
 80047ee:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 80047f0:	46ca      	mov	sl, r9
 80047f2:	bf28      	it	cs
 80047f4:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 80047f8:	f000 f97a 	bl	8004af0 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80047fc:	4556      	cmp	r6, sl
 80047fe:	db18      	blt.n	8004832 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 8004800:	4b3c      	ldr	r3, [pc, #240]	@ (80048f4 <aiPrintBufferInfo+0x1cc>)
 8004802:	1ed8      	subs	r0, r3, #3
 8004804:	45ca      	cmp	sl, r9
 8004806:	bf28      	it	cs
 8004808:	4618      	movcs	r0, r3
 800480a:	f000 f971 	bl	8004af0 <lc_print>
  if (buffer->data)
 800480e:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8004810:	2101      	movs	r1, #1
 8004812:	4628      	mov	r0, r5
  if (buffer->data)
 8004814:	2c00      	cmp	r4, #0
 8004816:	d053      	beq.n	80048c0 <aiPrintBufferInfo+0x198>
    LC_PRINT(" @0x%X/%d",
 8004818:	f000 ff64 	bl	80056e4 <ai_buffer_get_size>
 800481c:	4639      	mov	r1, r7
 800481e:	f000 ff95 	bl	800574c <ai_buffer_get_byte_size>
 8004822:	4621      	mov	r1, r4
 8004824:	4602      	mov	r2, r0
 8004826:	4834      	ldr	r0, [pc, #208]	@ (80048f8 <aiPrintBufferInfo+0x1d0>)
}
 8004828:	b003      	add	sp, #12
 800482a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 800482e:	f000 b95f 	b.w	8004af0 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004832:	68ab      	ldr	r3, [r5, #8]
 8004834:	b35b      	cbz	r3, 800488e <aiPrintBufferInfo+0x166>
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	f014 0401 	ands.w	r4, r4, #1
 800483c:	d02a      	beq.n	8004894 <aiPrintBufferInfo+0x16c>
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	b352      	cbz	r2, 8004898 <aiPrintBufferInfo+0x170>
 8004842:	6853      	ldr	r3, [r2, #4]
 8004844:	b1d3      	cbz	r3, 800487c <aiPrintBufferInfo+0x154>
 8004846:	8851      	ldrh	r1, [r2, #2]
 8004848:	42b1      	cmp	r1, r6
 800484a:	dd17      	ble.n	800487c <aiPrintBufferInfo+0x154>
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8004852:	6808      	ldr	r0, [r1, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004854:	8814      	ldrh	r4, [r2, #0]
 8004856:	f014 0402 	ands.w	r4, r4, #2
 800485a:	d011      	beq.n	8004880 <aiPrintBufferInfo+0x158>
 800485c:	b1c3      	cbz	r3, 8004890 <aiPrintBufferInfo+0x168>
 800485e:	8852      	ldrh	r2, [r2, #2]
 8004860:	42b2      	cmp	r2, r6
 8004862:	dd1a      	ble.n	800489a <aiPrintBufferInfo+0x172>
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004868:	f7fb fe8e 	bl	8000588 <__aeabi_f2d>
 800486c:	9400      	str	r4, [sp, #0]
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4640      	mov	r0, r8
      for (int idx=0; idx<max_; idx++) {
 8004874:	3601      	adds	r6, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004876:	f000 f93b 	bl	8004af0 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800487a:	e7bf      	b.n	80047fc <aiPrintBufferInfo+0xd4>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800487c:	2000      	movs	r0, #0
 800487e:	e7e9      	b.n	8004854 <aiPrintBufferInfo+0x12c>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004880:	b133      	cbz	r3, 8004890 <aiPrintBufferInfo+0x168>
 8004882:	8852      	ldrh	r2, [r2, #2]
 8004884:	42b2      	cmp	r2, r6
 8004886:	ddef      	ble.n	8004868 <aiPrintBufferInfo+0x140>
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	579c      	ldrsb	r4, [r3, r6]
 800488c:	e7ec      	b.n	8004868 <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800488e:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004890:	461c      	mov	r4, r3
 8004892:	e7e9      	b.n	8004868 <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004894:	4658      	mov	r0, fp
 8004896:	e7e7      	b.n	8004868 <aiPrintBufferInfo+0x140>
 8004898:	2000      	movs	r0, #0
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800489a:	2400      	movs	r4, #0
 800489c:	e7e4      	b.n	8004868 <aiPrintBufferInfo+0x140>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 800489e:	f019 0f78 	tst.w	r9, #120	@ 0x78
 80048a2:	d102      	bne.n	80048aa <aiPrintBufferInfo+0x182>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80048a4:	4621      	mov	r1, r4
 80048a6:	4815      	ldr	r0, [pc, #84]	@ (80048fc <aiPrintBufferInfo+0x1d4>)
 80048a8:	e767      	b.n	800477a <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80048aa:	f007 027f 	and.w	r2, r7, #127	@ 0x7f
 80048ae:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80048b2:	4813      	ldr	r0, [pc, #76]	@ (8004900 <aiPrintBufferInfo+0x1d8>)
 80048b4:	3a40      	subs	r2, #64	@ 0x40
 80048b6:	4411      	add	r1, r2
 80048b8:	1a61      	subs	r1, r4, r1
 80048ba:	f000 f919 	bl	8004af0 <lc_print>
 80048be:	e7a6      	b.n	800480e <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 80048c0:	f000 ff10 	bl	80056e4 <ai_buffer_get_size>
 80048c4:	4639      	mov	r1, r7
 80048c6:	f000 ff41 	bl	800574c <ai_buffer_get_byte_size>
 80048ca:	4601      	mov	r1, r0
 80048cc:	480d      	ldr	r0, [pc, #52]	@ (8004904 <aiPrintBufferInfo+0x1dc>)
}
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80048d4:	f000 b90c 	b.w	8004af0 <lc_print>
 80048d8:	0800bc27 	.word	0x0800bc27
 80048dc:	0800bc32 	.word	0x0800bc32
 80048e0:	0800bc47 	.word	0x0800bc47
 80048e4:	0800bc4b 	.word	0x0800bc4b
 80048e8:	0800bc39 	.word	0x0800bc39
 80048ec:	0800bc43 	.word	0x0800bc43
 80048f0:	0800bc53 	.word	0x0800bc53
 80048f4:	0800bc26 	.word	0x0800bc26
 80048f8:	0800bc80 	.word	0x0800bc80
 80048fc:	0800bc6d 	.word	0x0800bc6d
 8004900:	0800bc78 	.word	0x0800bc78
 8004904:	0800bc8a 	.word	0x0800bc8a
 8004908:	0800bc1f 	.word	0x0800bc1f

0800490c <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8004912:	4842      	ldr	r0, [pc, #264]	@ (8004a1c <aiPrintNetworkInfo+0x110>)
 8004914:	f000 f8ec 	bl	8004af0 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8004918:	4841      	ldr	r0, [pc, #260]	@ (8004a20 <aiPrintNetworkInfo+0x114>)
 800491a:	6821      	ldr	r1, [r4, #0]
 800491c:	f000 f8e8 	bl	8004af0 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8004920:	6861      	ldr	r1, [r4, #4]
 8004922:	4840      	ldr	r0, [pc, #256]	@ (8004a24 <aiPrintNetworkInfo+0x118>)
 8004924:	f000 f8e4 	bl	8004af0 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8004928:	68a1      	ldr	r1, [r4, #8]
 800492a:	483f      	ldr	r0, [pc, #252]	@ (8004a28 <aiPrintNetworkInfo+0x11c>)
 800492c:	f000 f8e0 	bl	8004af0 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8004930:	68e1      	ldr	r1, [r4, #12]
 8004932:	483e      	ldr	r0, [pc, #248]	@ (8004a2c <aiPrintNetworkInfo+0x120>)
 8004934:	f000 f8dc 	bl	8004af0 <lc_print>

  if (report->tool_revision[0])
 8004938:	69a1      	ldr	r1, [r4, #24]
 800493a:	780b      	ldrb	r3, [r1, #0]
 800493c:	b113      	cbz	r3, 8004944 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800493e:	483c      	ldr	r0, [pc, #240]	@ (8004a30 <aiPrintNetworkInfo+0x124>)
 8004940:	f000 f8d6 	bl	8004af0 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004944:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004946:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004948:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 800494a:	261c      	movs	r6, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800494c:	7f21      	ldrb	r1, [r4, #28]
 800494e:	4839      	ldr	r0, [pc, #228]	@ (8004a34 <aiPrintNetworkInfo+0x128>)
 8004950:	f000 f8ce 	bl	8004af0 <lc_print>
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8004954:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 8004958:	f000 f8b2 	bl	8004ac0 <uint64ToDecimal>
 800495c:	4601      	mov	r1, r0
 800495e:	4836      	ldr	r0, [pc, #216]	@ (8004a38 <aiPrintNetworkInfo+0x12c>)
 8004960:	f000 f8c6 	bl	8004af0 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8004964:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004966:	4835      	ldr	r0, [pc, #212]	@ (8004a3c <aiPrintNetworkInfo+0x130>)
 8004968:	f000 f8c2 	bl	8004af0 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800496c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 8004970:	4833      	ldr	r0, [pc, #204]	@ (8004a40 <aiPrintNetworkInfo+0x134>)
 8004972:	f000 f8bd 	bl	8004af0 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004976:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800497a:	42ab      	cmp	r3, r5
 800497c:	dc21      	bgt.n	80049c2 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800497e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004980:	261c      	movs	r6, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8004982:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8004986:	482f      	ldr	r0, [pc, #188]	@ (8004a44 <aiPrintNetworkInfo+0x138>)
 8004988:	f000 f8b2 	bl	8004af0 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800498c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8004990:	42ab      	cmp	r3, r5
 8004992:	dc1e      	bgt.n	80049d2 <aiPrintNetworkInfo+0xc6>

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 8004994:	4e2c      	ldr	r6, [pc, #176]	@ (8004a48 <aiPrintNetworkInfo+0x13c>)
  for (int i=0; i<report->n_inputs; i++) {
 8004996:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8004998:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800499a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
    LC_PRINT("\r\n");
 800499c:	f106 0809 	add.w	r8, r6, #9
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80049a0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80049a2:	482a      	ldr	r0, [pc, #168]	@ (8004a4c <aiPrintNetworkInfo+0x140>)
 80049a4:	f000 f8a4 	bl	8004af0 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80049a8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80049aa:	42ab      	cmp	r3, r5
 80049ac:	dc19      	bgt.n	80049e2 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 80049ae:	4e28      	ldr	r6, [pc, #160]	@ (8004a50 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 80049b0:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80049b2:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80049b4:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 80049b8:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dc1f      	bgt.n	80049fe <aiPrintNetworkInfo+0xf2>
  }
}
 80049be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80049c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
      _aiPrintDataInfo(idx, buffer);
 80049c4:	4628      	mov	r0, r5
 80049c6:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80049ca:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80049cc:	f7ff fe6a 	bl	80046a4 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80049d0:	e7d1      	b.n	8004976 <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80049d2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      _aiPrintDataInfo(idx, buffer);
 80049d4:	4628      	mov	r0, r5
 80049d6:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80049da:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80049dc:	f7ff fe62 	bl	80046a4 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80049e0:	e7d4      	b.n	800498c <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 80049e2:	4629      	mov	r1, r5
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f883 	bl	8004af0 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80049ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049ec:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 80049f0:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 80049f2:	f7ff fe99 	bl	8004728 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80049f6:	4640      	mov	r0, r8
 80049f8:	f000 f87a 	bl	8004af0 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80049fc:	e7d4      	b.n	80049a8 <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 80049fe:	4629      	mov	r1, r5
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 f875 	bl	8004af0 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8004a06:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004a08:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8004a0c:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8004a0e:	f7ff fe8b 	bl	8004728 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004a12:	4640      	mov	r0, r8
 8004a14:	f000 f86c 	bl	8004af0 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8004a18:	e7ce      	b.n	80049b8 <aiPrintNetworkInfo+0xac>
 8004a1a:	bf00      	nop
 8004a1c:	0800bc9c 	.word	0x0800bc9c
 8004a20:	0800bcb6 	.word	0x0800bcb6
 8004a24:	0800bcd1 	.word	0x0800bcd1
 8004a28:	0800bcec 	.word	0x0800bcec
 8004a2c:	0800bd07 	.word	0x0800bd07
 8004a30:	0800bd22 	.word	0x0800bd22
 8004a34:	0800bd3d 	.word	0x0800bd3d
 8004a38:	0800bd5e 	.word	0x0800bd5e
 8004a3c:	0800bd7e 	.word	0x0800bd7e
 8004a40:	0800bd99 	.word	0x0800bd99
 8004a44:	0800bdb4 	.word	0x0800bdb4
 8004a48:	0800bded 	.word	0x0800bded
 8004a4c:	0800bdcf 	.word	0x0800bdcf
 8004a50:	0800bdf9 	.word	0x0800bdf9

08004a54 <_put_c_driver>:
static void _put_c_driver(void *user, const char c)
{
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8004a54:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <_put_c_driver+0x24>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
{
 8004a58:	b507      	push	{r0, r1, r2, lr}
 8004a5a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8004a5e:	b13b      	cbz	r3, 8004a70 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a64:	2201      	movs	r2, #1
 8004a66:	f10d 0107 	add.w	r1, sp, #7
 8004a6a:	4804      	ldr	r0, [pc, #16]	@ (8004a7c <_put_c_driver+0x28>)
 8004a6c:	f7ff fc39 	bl	80042e2 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8004a70:	b003      	add	sp, #12
 8004a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c
 8004a7c:	20000d68 	.word	0x20000d68

08004a80 <_write>:
{
 8004a80:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8004a82:	1e14      	subs	r4, r2, #0
 8004a84:	da0a      	bge.n	8004a9c <_write+0x1c>
 8004a86:	3801      	subs	r0, #1
 8004a88:	2801      	cmp	r0, #1
 8004a8a:	d907      	bls.n	8004a9c <_write+0x1c>
    errno = EBADF;
 8004a8c:	f004 fe30 	bl	80096f0 <__errno>
    return -1;
 8004a90:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    errno = EBADF;
 8004a94:	2309      	movs	r3, #9
 8004a96:	6003      	str	r3, [r0, #0]
}
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <_write+0x38>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f9      	beq.n	8004a98 <_write+0x18>
 8004aa4:	b2a2      	uxth	r2, r4
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004aaa:	4804      	ldr	r0, [pc, #16]	@ (8004abc <_write+0x3c>)
 8004aac:	f7ff fc19 	bl	80042e2 <HAL_UART_Transmit>
  return (status ? count : 0);
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	bf18      	it	ne
 8004ab4:	2400      	movne	r4, #0
 8004ab6:	e7ef      	b.n	8004a98 <_write+0x18>
 8004ab8:	2000000c 	.word	0x2000000c
 8004abc:	20000d68 	.word	0x20000d68

08004ac0 <uint64ToDecimal>:
  *(--p) = '\0';
 8004ac0:	2300      	movs	r3, #0
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8004ac2:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8004ac4:	4c09      	ldr	r4, [pc, #36]	@ (8004aec <uint64ToDecimal+0x2c>)
 8004ac6:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 8004aca:	2301      	movs	r3, #1
 8004acc:	ea50 0201 	orrs.w	r2, r0, r1
 8004ad0:	d102      	bne.n	8004ad8 <uint64ToDecimal+0x18>
 8004ad2:	b90b      	cbnz	r3, 8004ad8 <uint64ToDecimal+0x18>
}
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 8004ad8:	220a      	movs	r2, #10
 8004ada:	2300      	movs	r3, #0
 8004adc:	f7fc f884 	bl	8000be8 <__aeabi_uldivmod>
    const char c = '0' + digit;
 8004ae0:	3230      	adds	r2, #48	@ 0x30
  for (bool first = true; v || first; first = false) {
 8004ae2:	2300      	movs	r3, #0
    *(--p) = c;
 8004ae4:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 8004ae8:	e7f0      	b.n	8004acc <uint64ToDecimal+0xc>
 8004aea:	bf00      	nop
 8004aec:	20001068 	.word	0x20001068

08004af0 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8004af0:	b40f      	push	{r0, r1, r2, r3}
 8004af2:	b507      	push	{r0, r1, r2, lr}
 8004af4:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004af6:	2100      	movs	r1, #0
 8004af8:	4805      	ldr	r0, [pc, #20]	@ (8004b10 <lc_print+0x20>)
{
 8004afa:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8004afe:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004b00:	f000 fa84 	bl	800500c <vlc_print>
  va_end(ap);
}
 8004b04:	b003      	add	sp, #12
 8004b06:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b0a:	b004      	add	sp, #16
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	08004a55 	.word	0x08004a55

08004b14 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8004b14:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8004b16:	4d11      	ldr	r5, [pc, #68]	@ (8004b5c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8004b18:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004b1a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8004b1c:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8004b20:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004b24:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8004b28:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004b2a:	f003 fd7b 	bl	8008624 <malloc>

  /* remember size */
  if (ptr) {
 8004b2e:	b1a0      	cbz	r0, 8004b5a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004b30:	1903      	adds	r3, r0, r4
 8004b32:	4a0b      	ldr	r2, [pc, #44]	@ (8004b60 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8004b34:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004b36:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d50c      	bpl.n	8004b58 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8004b3e:	68eb      	ldr	r3, [r5, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8004b44:	686b      	ldr	r3, [r5, #4]
 8004b46:	4423      	add	r3, r4
 8004b48:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8004b4a:	69ab      	ldr	r3, [r5, #24]
 8004b4c:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8004b4e:	696b      	ldr	r3, [r5, #20]
 8004b50:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8004b52:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8004b54:	bf88      	it	hi
 8004b56:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8004b58:	3004      	adds	r0, #4
}
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	2000104c 	.word	0x2000104c
 8004b60:	efdcba98 	.word	0xefdcba98

08004b64 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8004b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	468a      	mov	sl, r1
  if (!t)
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	b38a      	cbz	r2, 8004bd4 <dwtCyclesToTime+0x70>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8004b70:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 8004b74:	f7fe feda 	bl	800392c <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8004b78:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8004b7a:	4607      	mov	r7, r0
  uint64_t s  = clks / fcpu;
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4651      	mov	r1, sl
 8004b80:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004b82:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8004bdc <dwtCyclesToTime+0x78>
  uint64_t s  = clks / fcpu;
 8004b86:	f7fc f82f 	bl	8000be8 <__aeabi_uldivmod>
 8004b8a:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8004b8c:	fba4 0105 	umull	r0, r1, r4, r5
 8004b90:	463a      	mov	r2, r7
 8004b92:	2300      	movs	r3, #0
 8004b94:	fb05 110a 	mla	r1, r5, sl, r1
 8004b98:	f7fc f826 	bl	8000be8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8004b9c:	fbab 3205 	umull	r3, r2, fp, r5
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004ba0:	463a      	mov	r2, r7
  ms -= (s * 1000);
 8004ba2:	1ac3      	subs	r3, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004ba4:	fba4 0109 	umull	r0, r1, r4, r9
  ms -= (s * 1000);
 8004ba8:	9301      	str	r3, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004baa:	2300      	movs	r3, #0
 8004bac:	fb09 110a 	mla	r1, r9, sl, r1
 8004bb0:	f7fc f81a 	bl	8000be8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
 8004bb4:	fbab 8909 	umull	r8, r9, fp, r9
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	eba0 0008 	sub.w	r0, r0, r8
 8004bbe:	60b3      	str	r3, [r6, #8]
  us -= (ms * 1000 + s * 1000000);
 8004bc0:	fba3 3505 	umull	r3, r5, r3, r5
 8004bc4:	1ac0      	subs	r0, r0, r3
  t->us = us;
 8004bc6:	60f0      	str	r0, [r6, #12]
  return 0;
 8004bc8:	2000      	movs	r0, #0
  t->s = s;
 8004bca:	e9c6 7b00 	strd	r7, fp, [r6]
}
 8004bce:	b003      	add	sp, #12
 8004bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd8:	e7f9      	b.n	8004bce <dwtCyclesToTime+0x6a>
 8004bda:	bf00      	nop
 8004bdc:	000f4240 	.word	0x000f4240

08004be0 <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <getFlashCacheConf+0x48>)
{
 8004be2:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8004be8:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <getFlashCacheConf+0x4c>)
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8004bee:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8004bf0:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8004bf2:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8004bf6:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8004bf8:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 8004bfa:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004bfe:	bf48      	it	mi
 8004c00:	f440 7080 	orrmi.w	r0, r0, #256	@ 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8004c04:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 8004c06:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 8004c08:	bf48      	it	mi
 8004c0a:	f440 7000 	orrmi.w	r0, r0, #512	@ 0x200
  if (ccr & SCB_CCR_IC_Msk)
 8004c0e:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 8004c10:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 8004c12:	bf48      	it	mi
 8004c14:	f440 6080 	orrmi.w	r0, r0, #1024	@ 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8004c18:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8004c1a:	bf48      	it	mi
 8004c1c:	f440 6000 	orrmi.w	r0, r0, #2048	@ 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8004c20:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004c24:	b002      	add	sp, #8
 8004c26:	4770      	bx	lr
 8004c28:	40023c00 	.word	0x40023c00
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8004c34:	f7fe fe7a 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8004c38:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8004c3a:	f7fe fe77 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8004c3e:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8004c40:	f7ff ffce 	bl	8004be0 <getFlashCacheConf>
 8004c44:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8004c46:	f7fd fcb7 	bl	80025b8 <HAL_GetDEVID>
 8004c4a:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8004c4c:	f7fd fcae 	bl	80025ac <HAL_GetREVID>
 8004c50:	6120      	str	r0, [r4, #16]
}
 8004c52:	bd10      	pop	{r4, pc}

08004c54 <systemSettingLog>:

void systemSettingLog(void)
{
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8004c58:	2203      	movs	r2, #3
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	210c      	movs	r1, #12
 8004c5e:	482d      	ldr	r0, [pc, #180]	@ (8004d14 <systemSettingLog+0xc0>)
 8004c60:	f7ff ff46 	bl	8004af0 <lc_print>
  if (!conf)
 8004c64:	a803      	add	r0, sp, #12
 8004c66:	f7ff ffe3 	bl	8004c30 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8004c6a:	482b      	ldr	r0, [pc, #172]	@ (8004d18 <systemSettingLog+0xc4>)
 8004c6c:	f7ff ff40 	bl	8004af0 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004c70:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8004c72:	f46f 6389 	mvn.w	r3, #1096	@ 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004c76:	4829      	ldr	r0, [pc, #164]	@ (8004d1c <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8004c78:	4c29      	ldr	r4, [pc, #164]	@ (8004d20 <systemSettingLog+0xcc>)
 8004c7a:	18cb      	adds	r3, r1, r3
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	bf96      	itet	ls
 8004c82:	4a28      	ldrls	r2, [pc, #160]	@ (8004d24 <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004c84:	4a28      	ldrhi	r2, [pc, #160]	@ (8004d28 <systemSettingLog+0xd4>)
 8004c86:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8004c8a:	9b07      	ldr	r3, [sp, #28]
 8004c8c:	f7ff ff30 	bl	8004af0 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8004c90:	4b26      	ldr	r3, [pc, #152]	@ (8004d2c <systemSettingLog+0xd8>)
 8004c92:	2107      	movs	r1, #7
 8004c94:	1d5a      	adds	r2, r3, #5
 8004c96:	f103 000a 	add.w	r0, r3, #10
 8004c9a:	f7ff ff29 	bl	8004af0 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8004c9e:	f7fd fc81 	bl	80025a4 <HAL_GetHalVersion>
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4822      	ldr	r0, [pc, #136]	@ (8004d30 <systemSettingLog+0xdc>)
 8004ca6:	f7ff ff23 	bl	8004af0 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8004caa:	9903      	ldr	r1, [sp, #12]
 8004cac:	4821      	ldr	r0, [pc, #132]	@ (8004d34 <systemSettingLog+0xe0>)
 8004cae:	fb91 f1f4 	sdiv	r1, r1, r4
 8004cb2:	f7ff ff1d 	bl	8004af0 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8004cb6:	9904      	ldr	r1, [sp, #16]
 8004cb8:	481f      	ldr	r0, [pc, #124]	@ (8004d38 <systemSettingLog+0xe4>)
 8004cba:	fb91 f1f4 	sdiv	r1, r1, r4
 8004cbe:	f7ff ff17 	bl	8004af0 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <systemSettingLog+0xe8>)
    return "True";
 8004cc4:	4c1e      	ldr	r4, [pc, #120]	@ (8004d40 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 8004cc6:	6819      	ldr	r1, [r3, #0]
    return "True";
 8004cc8:	1f65      	subs	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 8004cca:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <systemSettingLog+0xf0>)
    return "True";
 8004ccc:	f411 7f80 	tst.w	r1, #256	@ 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8004cd0:	f104 00e7 	add.w	r0, r4, #231	@ 0xe7
  uint32_t ccr = SCB->CCR;
 8004cd4:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8004cd6:	f001 030f 	and.w	r3, r1, #15
    return "True";
 8004cda:	bf0c      	ite	eq
 8004cdc:	4622      	moveq	r2, r4
 8004cde:	462a      	movne	r2, r5
 8004ce0:	f411 7f00 	tst.w	r1, #512	@ 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	bf0c      	ite	eq
 8004ce8:	4623      	moveq	r3, r4
 8004cea:	462b      	movne	r3, r5
 8004cec:	f7ff ff00 	bl	8004af0 <lc_print>
    return "False";
 8004cf0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004cf4:	f504 7092 	add.w	r0, r4, #292	@ 0x124
    return "False";
 8004cf8:	bf14      	ite	ne
 8004cfa:	4629      	movne	r1, r5
 8004cfc:	4621      	moveq	r1, r4
    return "True";
 8004cfe:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004d02:	bf0c      	ite	eq
 8004d04:	4622      	moveq	r2, r4
 8004d06:	462a      	movne	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8004d08:	b008      	add	sp, #32
 8004d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004d0e:	f7ff beef 	b.w	8004af0 <lc_print>
 8004d12:	bf00      	nop
 8004d14:	0800be7b 	.word	0x0800be7b
 8004d18:	0800be98 	.word	0x0800be98
 8004d1c:	0800beb8 	.word	0x0800beb8
 8004d20:	000f4240 	.word	0x000f4240
 8004d24:	08010024 	.word	0x08010024
 8004d28:	0800be68 	.word	0x0800be68
 8004d2c:	0800bee9 	.word	0x0800bee9
 8004d30:	0800bf11 	.word	0x0800bf11
 8004d34:	0800bf2a 	.word	0x0800bf2a
 8004d38:	0800bf43 	.word	0x0800bf43
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	0800be75 	.word	0x0800be75
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004d48:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <port_dwt_init_imp+0x24>)
 8004d4a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 8004d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d52:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <port_dwt_init_imp+0x28>)
 8004d58:	4a06      	ldr	r2, [pc, #24]	@ (8004d74 <port_dwt_init_imp+0x2c>)
 8004d5a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
#endif
  DWT->CYCCNT = 0;
 8004d5e:	2200      	movs	r2, #0
 8004d60:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00
 8004d70:	e0001000 	.word	0xe0001000
 8004d74:	c5acce55 	.word	0xc5acce55

08004d78 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <ai_mnetwork_handle+0x18>)
 8004d7a:	b120      	cbz	r0, 8004d86 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8004d7c:	4298      	cmp	r0, r3
 8004d7e:	bf0c      	ite	eq
 8004d80:	4618      	moveq	r0, r3
 8004d82:	2000      	movne	r0, #0
 8004d84:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004d86:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004d88:	2a00      	cmp	r2, #0
 8004d8a:	bf08      	it	eq
 8004d8c:	4618      	moveq	r0, r3
}
 8004d8e:	4770      	bx	lr
 8004d90:	20001080 	.word	0x20001080

08004d94 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004d94:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004d96:	4604      	mov	r4, r0
 8004d98:	b160      	cbz	r0, 8004db4 <ai_mnetwork_is_valid.constprop.0+0x20>
 8004d9a:	f7fb fa89 	bl	80002b0 <strlen>
 8004d9e:	2807      	cmp	r0, #7
 8004da0:	4602      	mov	r2, r0
 8004da2:	d107      	bne.n	8004db4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8004da4:	4621      	mov	r1, r4
 8004da6:	4804      	ldr	r0, [pc, #16]	@ (8004db8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8004da8:	f004 fc36 	bl	8009618 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004dac:	fab0 f080 	clz	r0, r0
 8004db0:	0940      	lsrs	r0, r0, #5
}
 8004db2:	bd10      	pop	{r4, pc}
    return false;
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7fc      	b.n	8004db2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8004db8:	0801004c 	.word	0x0801004c

08004dbc <MX_X_CUBE_AI_Init>:
{
 8004dbc:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8004dbe:	f7fc fb01 	bl	80013c4 <MX_USART1_UART_Init>
    BSP_QSPI_Init();
 8004dc2:	f7fd f9c1 	bl	8002148 <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode();
 8004dc6:	f7fd f907 	bl	8001fd8 <BSP_QSPI_EnableMemoryMappedMode>
    BSP_SDRAM_Init();
 8004dca:	f7fd fb5b 	bl	8002484 <BSP_SDRAM_Init>
}
 8004dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8004dd2:	f7ff bbb1 	b.w	8004538 <aiSystemPerformanceInit>
	...

08004dd8 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8004ddc:	f7ff ffda 	bl	8004d94 <ai_mnetwork_is_valid.constprop.0>
 8004de0:	b920      	cbnz	r0, 8004dec <ai_mnetwork_find+0x14>
            return entry->name;
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	4802      	ldr	r0, [pc, #8]	@ (8004df0 <ai_mnetwork_find+0x18>)
 8004de6:	bf18      	it	ne
 8004de8:	2000      	movne	r0, #0
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
}
 8004dea:	bd10      	pop	{r4, pc}
            return entry->name;
 8004dec:	4800      	ldr	r0, [pc, #0]	@ (8004df0 <ai_mnetwork_find+0x18>)
 8004dee:	e7fc      	b.n	8004dea <ai_mnetwork_find+0x12>
 8004df0:	0801004c 	.word	0x0801004c

08004df4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004df8:	2000      	movs	r0, #0
{
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	460c      	mov	r4, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004dfe:	f7ff ffbb 	bl	8004d78 <ai_mnetwork_handle>

    if (!inst) {
 8004e02:	4605      	mov	r5, r0
 8004e04:	b1a8      	cbz	r0, 8004e32 <ai_mnetwork_create+0x3e>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ffc4 	bl	8004d94 <ai_mnetwork_is_valid.constprop.0>
 8004e0c:	b1a0      	cbz	r0, 8004e38 <ai_mnetwork_create+0x44>
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4620      	mov	r0, r4
    else
        err = found->ai_create(network, network_config);
 8004e12:	f000 fb65 	bl	80054e0 <ai_network_create>
 8004e16:	b2c2      	uxtb	r2, r0
 8004e18:	f3c0 2017 	ubfx	r0, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8004e1c:	ea52 2100 	orrs.w	r1, r2, r0, lsl #8
 8004e20:	d104      	bne.n	8004e2c <ai_mnetwork_create+0x38>
        inst->entry = found;
 8004e22:	4906      	ldr	r1, [pc, #24]	@ (8004e3c <ai_mnetwork_create+0x48>)
 8004e24:	6029      	str	r1, [r5, #0]
        inst->handle = *network;
 8004e26:	6821      	ldr	r1, [r4, #0]
 8004e28:	6069      	str	r1, [r5, #4]
        *network = (ai_handle*)inst;
 8004e2a:	6025      	str	r5, [r4, #0]
    }

    return err;
}
 8004e2c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e32:	2231      	movs	r2, #49	@ 0x31
        if (ai_mnetwork_is_valid(name, entry)) {
 8004e34:	2010      	movs	r0, #16
 8004e36:	e7f9      	b.n	8004e2c <ai_mnetwork_create+0x38>
 8004e38:	2214      	movs	r2, #20
 8004e3a:	e7fb      	b.n	8004e34 <ai_mnetwork_create+0x40>
 8004e3c:	08010054 	.word	0x08010054

08004e40 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4605      	mov	r5, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004e44:	f7ff ff98 	bl	8004d78 <ai_mnetwork_handle>
    if (inn) {
 8004e48:	4604      	mov	r4, r0
 8004e4a:	b160      	cbz	r0, 8004e66 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004e4c:	6803      	ldr	r3, [r0, #0]
 8004e4e:	6840      	ldr	r0, [r0, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	4283      	cmp	r3, r0
 8004e58:	d005      	beq.n	8004e66 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8004e5a:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <ai_mnetwork_destroy+0x2c>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	d101      	bne.n	8004e64 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	6023      	str	r3, [r4, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
 8004e64:	2500      	movs	r5, #0
        }
    }
    return network;
}
 8004e66:	4628      	mov	r0, r5
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20001080 	.word	0x20001080

08004e70 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004e70:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004e72:	f7ff ff81 	bl	8004d78 <ai_mnetwork_handle>
    if (inn)
 8004e76:	b128      	cbz	r0, 8004e84 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8004e78:	6802      	ldr	r2, [r0, #0]
 8004e7a:	6840      	ldr	r0, [r0, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004e82:	4710      	bx	r2
}
 8004e84:	bd10      	pop	{r4, pc}

08004e86 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004e86:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004e88:	f7ff ff76 	bl	8004d78 <ai_mnetwork_handle>
    if (inn)
 8004e8c:	b128      	cbz	r0, 8004e9a <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004e8e:	6803      	ldr	r3, [r0, #0]
 8004e90:	6840      	ldr	r0, [r0, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004e98:	4718      	bx	r3
}
 8004e9a:	f241 0014 	movw	r0, #4116	@ 0x1014
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004ea0:	b530      	push	{r4, r5, lr}
 8004ea2:	b08f      	sub	sp, #60	@ 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004ea4:	f7ff ff68 	bl	8004d78 <ai_mnetwork_handle>
    if (inn) {
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	b168      	cbz	r0, 8004ec8 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8004eac:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004eae:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8004eb0:	4668      	mov	r0, sp
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004eb6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004eba:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004ebc:	42aa      	cmp	r2, r5
 8004ebe:	dc05      	bgt.n	8004ecc <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4669      	mov	r1, sp
 8004ec4:	6860      	ldr	r0, [r4, #4]
 8004ec6:	4798      	blx	r3
    }
    else
        return false;
}
 8004ec8:	b00f      	add	sp, #60	@ 0x3c
 8004eca:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	4629      	mov	r1, r5
 8004ed0:	a803      	add	r0, sp, #12
 8004ed2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004ed6:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004ed8:	f000 fc4a 	bl	8005770 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004edc:	e7eb      	b.n	8004eb6 <ai_mnetwork_init+0x16>

08004ede <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004ee2:	6896      	ldr	r6, [r2, #8]
{
 8004ee4:	b091      	sub	sp, #68	@ 0x44
  buf[idx--] = 0;
 8004ee6:	2500      	movs	r5, #0
{
 8004ee8:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004eea:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8004eee:	f88d 503f 	strb.w	r5, [sp, #63]	@ 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004ef2:	d02a      	beq.n	8004f4a <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8004ef4:	42a9      	cmp	r1, r5
 8004ef6:	da08      	bge.n	8004f0a <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004ef8:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004efa:	4240      	negs	r0, r0
      sign_neg = '-';
 8004efc:	f04f 052d 	mov.w	r5, #45	@ 0x2d
      specifier->width -= 1;
 8004f00:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
      number = -number;
 8004f04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	f016 0f08 	tst.w	r6, #8
 8004f0e:	f10d 093f 	add.w	r9, sp, #63	@ 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004f12:	f04f 073e 	mov.w	r7, #62	@ 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004f16:	f006 0a10 	and.w	sl, r6, #16
 8004f1a:	bf14      	ite	ne
 8004f1c:	f04f 0841 	movne.w	r8, #65	@ 0x41
 8004f20:	f04f 0861 	moveq.w	r8, #97	@ 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004f24:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004f28:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004f2c:	f1ba 0f00 	cmp.w	sl, #0
 8004f30:	d033      	beq.n	8004f9a <_write_number+0xbc>
      chr = number & 0x0F;
 8004f32:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004f36:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004f38:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004f3a:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004f3e:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004f42:	d906      	bls.n	8004f52 <_write_number+0x74>
 8004f44:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e004      	b.n	8004f54 <_write_number+0x76>
  char sign_neg = 0;
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	e7dd      	b.n	8004f0a <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8004f4e:	4617      	mov	r7, r2
 8004f50:	e7ea      	b.n	8004f28 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004f52:	3330      	adds	r3, #48	@ 0x30
    buf[idx--] = chr;
 8004f54:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8004f58:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004f5c:	f107 32ff 	add.w	r2, r7, #4294967295	@ 0xffffffff
    count++;
 8004f60:	f1c7 0b3f 	rsb	fp, r7, #63	@ 0x3f
  } while (number);
 8004f64:	d1f3      	bne.n	8004f4e <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004f66:	f006 0101 	and.w	r1, r6, #1
 8004f6a:	b155      	cbz	r5, 8004f82 <_write_number+0xa4>
 8004f6c:	b949      	cbnz	r1, 8004f82 <_write_number+0xa4>
    buf[idx--] = sign_neg;
 8004f6e:	f102 0340 	add.w	r3, r2, #64	@ 0x40
    count++;
 8004f72:	f1c7 0b40 	rsb	fp, r7, #64	@ 0x40
    buf[idx--] = sign_neg;
 8004f76:	eb0d 0203 	add.w	r2, sp, r3
 8004f7a:	232d      	movs	r3, #45	@ 0x2d
 8004f7c:	f802 3c40 	strb.w	r3, [r2, #-64]
 8004f80:	1eba      	subs	r2, r7, #2
 8004f82:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f006 0602 	and.w	r6, r6, #2
 8004f8a:	bf14      	ite	ne
 8004f8c:	2130      	movne	r1, #48	@ 0x30
 8004f8e:	2120      	moveq	r1, #32
 8004f90:	455b      	cmp	r3, fp
 8004f92:	dd13      	ble.n	8004fbc <_write_number+0xde>
 8004f94:	b166      	cbz	r6, 8004fb0 <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004f96:	b9a5      	cbnz	r5, 8004fc2 <_write_number+0xe4>
 8004f98:	e01c      	b.n	8004fd4 <_write_number+0xf6>
      t = number / 10;
 8004f9a:	220a      	movs	r2, #10
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f7fb fe23 	bl	8000be8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004fa2:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
 8004fa6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8004faa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8004fae:	e7ca      	b.n	8004f46 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004fb0:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004fb4:	f10b 0b01 	add.w	fp, fp, #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	e7e9      	b.n	8004f90 <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004fbc:	b155      	cbz	r5, 8004fd4 <_write_number+0xf6>
 8004fbe:	455b      	cmp	r3, fp
 8004fc0:	db08      	blt.n	8004fd4 <_write_number+0xf6>
    buf[idx--] = sign_neg;
 8004fc2:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8004fc6:	212d      	movs	r1, #45	@ 0x2d
    count++;
 8004fc8:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004fcc:	3a01      	subs	r2, #1
 8004fce:	446b      	add	r3, sp
 8004fd0:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004fd4:	eb0d 0602 	add.w	r6, sp, r2
 8004fd8:	2500      	movs	r5, #0
 8004fda:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004fdc:	68e3      	ldr	r3, [r4, #12]
 8004fde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fe2:	6920      	ldr	r0, [r4, #16]
 8004fe4:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004fe6:	45ab      	cmp	fp, r5
 8004fe8:	d1f7      	bne.n	8004fda <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	079b      	lsls	r3, r3, #30
 8004fee:	d408      	bmi.n	8005002 <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	b011      	add	sp, #68	@ 0x44
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	6920      	ldr	r0, [r4, #16]
 8005000:	4798      	blx	r3
    while (count < specifier->width) {
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	42ab      	cmp	r3, r5
 8005006:	dcf7      	bgt.n	8004ff8 <_write_number+0x11a>
 8005008:	e7f2      	b.n	8004ff0 <_write_number+0x112>
	...

0800500c <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	4606      	mov	r6, r0
 8005012:	b09d      	sub	sp, #116	@ 0x74
 8005014:	460f      	mov	r7, r1
 8005016:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8005018:	2500      	movs	r5, #0
  return *(*fmtP)++;
 800501a:	4613      	mov	r3, r2
 800501c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005020:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8005022:	b919      	cbnz	r1, 800502c <vlc_print+0x20>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8005024:	4628      	mov	r0, r5
 8005026:	b01d      	add	sp, #116	@ 0x74
 8005028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 800502c:	290a      	cmp	r1, #10
 800502e:	d103      	bne.n	8005038 <vlc_print+0x2c>
      putc_fct(user, c);
 8005030:	4638      	mov	r0, r7
      count++;
 8005032:	3501      	adds	r5, #1
      putc_fct(user, c);
 8005034:	47b0      	blx	r6
      count++;
 8005036:	e0c9      	b.n	80051cc <vlc_print+0x1c0>
    else if (c == '%')
 8005038:	2925      	cmp	r1, #37	@ 0x25
 800503a:	d1f9      	bne.n	8005030 <vlc_print+0x24>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800503c:	2300      	movs	r3, #0
 800503e:	970b      	str	r7, [sp, #44]	@ 0x2c
      bool has_precision = false;
 8005040:	4618      	mov	r0, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8005042:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005046:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
  return *(*fmtP)++;
 800504a:	9a04      	ldr	r2, [sp, #16]
 800504c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005050:	9204      	str	r2, [sp, #16]
        if (!c)
 8005052:	b321      	cbz	r1, 800509e <vlc_print+0x92>
        else if (c == '0')
 8005054:	2939      	cmp	r1, #57	@ 0x39
 8005056:	d814      	bhi.n	8005082 <vlc_print+0x76>
 8005058:	292c      	cmp	r1, #44	@ 0x2c
 800505a:	d91e      	bls.n	800509a <vlc_print+0x8e>
 800505c:	f1a1 022d 	sub.w	r2, r1, #45	@ 0x2d
 8005060:	2a0c      	cmp	r2, #12
 8005062:	d810      	bhi.n	8005086 <vlc_print+0x7a>
 8005064:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005068:	01d7003c 	.word	0x01d7003c
 800506c:	0027000f 	.word	0x0027000f
 8005070:	00400040 	.word	0x00400040
 8005074:	00400040 	.word	0x00400040
 8005078:	00400040 	.word	0x00400040
 800507c:	00400040 	.word	0x00400040
 8005080:	0040      	.short	0x0040
 8005082:	296c      	cmp	r1, #108	@ 0x6c
 8005084:	d03d      	beq.n	8005102 <vlc_print+0xf6>
          switch(c)
 8005086:	2978      	cmp	r1, #120	@ 0x78
 8005088:	d809      	bhi.n	800509e <vlc_print+0x92>
 800508a:	2962      	cmp	r1, #98	@ 0x62
 800508c:	d83b      	bhi.n	8005106 <vlc_print+0xfa>
 800508e:	2946      	cmp	r1, #70	@ 0x46
 8005090:	f000 80df 	beq.w	8005252 <vlc_print+0x246>
 8005094:	2958      	cmp	r1, #88	@ 0x58
 8005096:	f000 80c3 	beq.w	8005220 <vlc_print+0x214>
 800509a:	2925      	cmp	r1, #37	@ 0x25
 800509c:	d0c8      	beq.n	8005030 <vlc_print+0x24>
        putc_fct(user, '<');
 800509e:	213c      	movs	r1, #60	@ 0x3c
 80050a0:	4638      	mov	r0, r7
 80050a2:	47b0      	blx	r6
        putc_fct(user, '!');
 80050a4:	2121      	movs	r1, #33	@ 0x21
 80050a6:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 80050a8:	3404      	adds	r4, #4
        putc_fct(user, '!');
 80050aa:	47b0      	blx	r6
        putc_fct(user, '>');
 80050ac:	213e      	movs	r1, #62	@ 0x3e
 80050ae:	4638      	mov	r0, r7
        count += 3;
 80050b0:	3503      	adds	r5, #3
        putc_fct(user, '>');
 80050b2:	47b0      	blx	r6
        error = false;
 80050b4:	e08a      	b.n	80051cc <vlc_print+0x1c0>
          if (!specifier.width && !specifier.precision) {
 80050b6:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 80050ba:	ea52 0c01 	orrs.w	ip, r2, r1
 80050be:	d104      	bne.n	80050ca <vlc_print+0xbe>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80050c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050c2:	f042 0201 	orr.w	r2, r2, #1
          specifier.flags |= FLAG_NEG_PAD;
 80050c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050c8:	e7bf      	b.n	800504a <vlc_print+0x3e>
          } else if (has_precision) {
 80050ca:	f04f 0c0a 	mov.w	ip, #10
 80050ce:	b118      	cbz	r0, 80050d8 <vlc_print+0xcc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80050d0:	fb0c f101 	mul.w	r1, ip, r1
            specifier.precision = specifier.precision * 10 + (c - '0');
 80050d4:	9108      	str	r1, [sp, #32]
 80050d6:	e7b8      	b.n	800504a <vlc_print+0x3e>
            specifier.width = specifier.width * 10 + (c - '0');
 80050d8:	fb0c f202 	mul.w	r2, ip, r2
 80050dc:	9207      	str	r2, [sp, #28]
 80050de:	e7b4      	b.n	800504a <vlc_print+0x3e>
          specifier.flags |= FLAG_NEG_PAD;
 80050e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050e2:	f042 0202 	orr.w	r2, r2, #2
 80050e6:	e7ee      	b.n	80050c6 <vlc_print+0xba>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80050e8:	3930      	subs	r1, #48	@ 0x30
 80050ea:	f04f 0c0a 	mov.w	ip, #10
          if (has_precision) {
 80050ee:	b118      	cbz	r0, 80050f8 <vlc_print+0xec>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80050f0:	9a08      	ldr	r2, [sp, #32]
 80050f2:	fb0c 1102 	mla	r1, ip, r2, r1
 80050f6:	e7ed      	b.n	80050d4 <vlc_print+0xc8>
            specifier.width = specifier.width * 10 + (c - '0');
 80050f8:	9a07      	ldr	r2, [sp, #28]
 80050fa:	fb0c 1102 	mla	r1, ip, r2, r1
 80050fe:	9107      	str	r1, [sp, #28]
 8005100:	e7a3      	b.n	800504a <vlc_print+0x3e>
          long_type += 1;
 8005102:	3301      	adds	r3, #1
 8005104:	e7a1      	b.n	800504a <vlc_print+0x3e>
          switch(c)
 8005106:	3963      	subs	r1, #99	@ 0x63
 8005108:	2915      	cmp	r1, #21
 800510a:	d8c8      	bhi.n	800509e <vlc_print+0x92>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <vlc_print+0x108>)
 800510e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005181 	.word	0x08005181
 8005118:	08005241 	.word	0x08005241
 800511c:	0800509f 	.word	0x0800509f
 8005120:	08005253 	.word	0x08005253
 8005124:	0800509f 	.word	0x0800509f
 8005128:	0800509f 	.word	0x0800509f
 800512c:	08005241 	.word	0x08005241
 8005130:	0800509f 	.word	0x0800509f
 8005134:	0800509f 	.word	0x0800509f
 8005138:	0800509f 	.word	0x0800509f
 800513c:	0800509f 	.word	0x0800509f
 8005140:	0800509f 	.word	0x0800509f
 8005144:	0800509f 	.word	0x0800509f
 8005148:	08005215 	.word	0x08005215
 800514c:	0800509f 	.word	0x0800509f
 8005150:	0800509f 	.word	0x0800509f
 8005154:	08005187 	.word	0x08005187
 8005158:	0800509f 	.word	0x0800509f
 800515c:	0800516d 	.word	0x0800516d
 8005160:	0800509f 	.word	0x0800509f
 8005164:	0800509f 	.word	0x0800509f
 8005168:	08005229 	.word	0x08005229
                val = va_arg(vl, unsigned int);
 800516c:	46a0      	mov	r8, r4
 800516e:	2100      	movs	r1, #0
 8005170:	f858 0b04 	ldr.w	r0, [r8], #4
            count += _write_number(val, &specifier);
 8005174:	aa07      	add	r2, sp, #28
            break;
 8005176:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 8005178:	f7ff feb1 	bl	8004ede <_write_number>
 800517c:	4405      	add	r5, r0
            break;
 800517e:	e025      	b.n	80051cc <vlc_print+0x1c0>
            putc_fct(user, t);
 8005180:	f814 1b04 	ldrb.w	r1, [r4], #4
 8005184:	e754      	b.n	8005030 <vlc_print+0x24>
            if (!str) str = "(null)";
 8005186:	4ba5      	ldr	r3, [pc, #660]	@ (800541c <vlc_print+0x410>)
            str = va_arg(vl, char*);
 8005188:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 800518c:	f1bb 0f00 	cmp.w	fp, #0
 8005190:	bf08      	it	eq
 8005192:	469b      	moveq	fp, r3
  int len = strlen(str);
 8005194:	4658      	mov	r0, fp
 8005196:	f7fb f88b 	bl	80002b0 <strlen>
  if (specifier->precision) {
 800519a:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 800519c:	4681      	mov	r9, r0
  if (specifier->precision) {
 800519e:	b113      	cbz	r3, 80051a6 <vlc_print+0x19a>
    len = (len > specifier->precision)?specifier->precision:len;
 80051a0:	4298      	cmp	r0, r3
 80051a2:	bfa8      	it	ge
 80051a4:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 80051a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a8:	f013 0a02 	ands.w	sl, r3, #2
 80051ac:	d01b      	beq.n	80051e6 <vlc_print+0x1da>
  int count = 0;
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 80051b4:	eba3 020b 	sub.w	r2, r3, fp
 80051b8:	4591      	cmp	r9, r2
 80051ba:	dc16      	bgt.n	80051ea <vlc_print+0x1de>
 80051bc:	f1b9 0f00 	cmp.w	r9, #0
 80051c0:	bfa8      	it	ge
 80051c2:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 80051c4:	f1ba 0f00 	cmp.w	sl, #0
 80051c8:	d121      	bne.n	800520e <vlc_print+0x202>
            count += _write_string(str, &specifier);
 80051ca:	4445      	add	r5, r8
          switch(c)
 80051cc:	9a04      	ldr	r2, [sp, #16]
 80051ce:	e724      	b.n	800501a <vlc_print+0xe>
      _WRITE_C(' ');
 80051d0:	f108 0801 	add.w	r8, r8, #1
 80051d4:	2120      	movs	r1, #32
 80051d6:	4638      	mov	r0, r7
 80051d8:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 80051da:	eb08 0309 	add.w	r3, r8, r9
 80051de:	9a07      	ldr	r2, [sp, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dcf5      	bgt.n	80051d0 <vlc_print+0x1c4>
 80051e4:	e7e5      	b.n	80051b2 <vlc_print+0x1a6>
  int count = 0;
 80051e6:	46d0      	mov	r8, sl
 80051e8:	e7f7      	b.n	80051da <vlc_print+0x1ce>
    _WRITE_C(*str++);
 80051ea:	f813 1b01 	ldrb.w	r1, [r3], #1
 80051ee:	4638      	mov	r0, r7
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	47b0      	blx	r6
 80051f4:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < len; i++) {
 80051f6:	e7dd      	b.n	80051b4 <vlc_print+0x1a8>
      _WRITE_C(' ');
 80051f8:	f108 0801 	add.w	r8, r8, #1
 80051fc:	2120      	movs	r1, #32
 80051fe:	4638      	mov	r0, r7
 8005200:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8005202:	eb09 0308 	add.w	r3, r9, r8
 8005206:	9a07      	ldr	r2, [sp, #28]
 8005208:	429a      	cmp	r2, r3
 800520a:	dcf5      	bgt.n	80051f8 <vlc_print+0x1ec>
 800520c:	e7dd      	b.n	80051ca <vlc_print+0x1be>
 800520e:	eba9 0908 	sub.w	r9, r9, r8
 8005212:	e7f6      	b.n	8005202 <vlc_print+0x1f6>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8005214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.width = 8;
 800521c:	2308      	movs	r3, #8
 800521e:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8005220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005222:	f043 0308 	orr.w	r3, r3, #8
 8005226:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.flags |= FLAG_HEX;
 8005228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 800522a:	aa07      	add	r2, sp, #28
 800522c:	f854 0b04 	ldr.w	r0, [r4], #4
 8005230:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8005232:	f043 0310 	orr.w	r3, r3, #16
 8005236:	9309      	str	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 8005238:	f7ff fe51 	bl	8004ede <_write_number>
 800523c:	4405      	add	r5, r0
            break;
 800523e:	e7c5      	b.n	80051cc <vlc_print+0x1c0>
            specifier.flags |= FLAG_IS_SIGNED;
 8005240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                val = va_arg(vl, unsigned int);
 8005242:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8005246:	f042 0204 	orr.w	r2, r2, #4
 800524a:	9209      	str	r2, [sp, #36]	@ 0x24
                val = va_arg(vl, signed int);
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	17c1      	asrs	r1, r0, #31
 8005250:	e790      	b.n	8005174 <vlc_print+0x168>
            dbl = va_arg(vl, double);
 8005252:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8005254:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8005256:	f024 0407 	bic.w	r4, r4, #7
 800525a:	ecb4 7b02 	vldmia	r4!, {d7}
 800525e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8005262:	b90b      	cbnz	r3, 8005268 <vlc_print+0x25c>
              specifier.precision = 6;
 8005264:	2306      	movs	r3, #6
 8005266:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8005268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800526c:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8005270:	f04f 0a00 	mov.w	sl, #0
 8005274:	f8df b1b0 	ldr.w	fp, [pc, #432]	@ 8005428 <vlc_print+0x41c>
  for (int i=0;i <specifier->precision; i++)
 8005278:	45c1      	cmp	r9, r8
    mul *= 10;
 800527a:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 800527e:	f2c0 80b6 	blt.w	80053ee <vlc_print+0x3e2>
  if (is_signed)
 8005282:	2300      	movs	r3, #0
 8005284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005288:	f7fb fc48 	bl	8000b1c <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f000 80b8 	beq.w	8005402 <vlc_print+0x3f6>
    number = -number;
 8005292:	9b00      	ldr	r3, [sp, #0]
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800529c:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 800529e:	4652      	mov	r2, sl
 80052a0:	465b      	mov	r3, fp
 80052a2:	2000      	movs	r0, #0
 80052a4:	495e      	ldr	r1, [pc, #376]	@ (8005420 <vlc_print+0x414>)
 80052a6:	f7fb faf1 	bl	800088c <__aeabi_ddiv>
  uint32_t count = 0;
 80052aa:	f04f 0900 	mov.w	r9, #0
  number += (half_ / mul);
 80052ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b2:	f7fb f80b 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 80052b6:	4652      	mov	r2, sl
 80052b8:	465b      	mov	r3, fp
  uint32_t idx = sizeof(buf) - 1;
 80052ba:	f04f 0a3f 	mov.w	sl, #63	@ 0x3f
  val = (uint64_t)(number * mul);
 80052be:	f7fb f9bb 	bl	8000638 <__aeabi_dmul>
 80052c2:	f7fb fca9 	bl	8000c18 <__aeabi_d2ulz>
 80052c6:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 80052c8:	469b      	mov	fp, r3
 80052ca:	220a      	movs	r2, #10
 80052cc:	2300      	movs	r3, #0
 80052ce:	9105      	str	r1, [sp, #20]
 80052d0:	4658      	mov	r0, fp
 80052d2:	f7fb fc89 	bl	8000be8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80052d6:	f10b 0c30 	add.w	ip, fp, #48	@ 0x30
    uint64_t t = val / 10;
 80052da:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 80052dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 80052e0:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
    chr = (val - t * 10) + '0';
 80052e4:	ebac 0c40 	sub.w	ip, ip, r0, lsl #1
    buf[idx--] = chr;
 80052e8:	f10a 0070 	add.w	r0, sl, #112	@ 0x70
 80052ec:	4468      	add	r0, sp
 80052ee:	f800 cc40 	strb.w	ip, [r0, #-64]
    count++;
 80052f2:	f109 0001 	add.w	r0, r9, #1
    if (count == specifier->precision) {
 80052f6:	4580      	cmp	r8, r0
      buf[idx--] = '.';
 80052f8:	bf05      	ittet	eq
 80052fa:	3270      	addeq	r2, #112	@ 0x70
 80052fc:	202e      	moveq	r0, #46	@ 0x2e
    buf[idx--] = chr;
 80052fe:	4692      	movne	sl, r2
      buf[idx--] = '.';
 8005300:	f1aa 0a02 	subeq.w	sl, sl, #2
 8005304:	bf05      	ittet	eq
 8005306:	446a      	addeq	r2, sp
      count++;
 8005308:	f109 0902 	addeq.w	r9, r9, #2
    count++;
 800530c:	4681      	movne	r9, r0
      buf[idx--] = '.';
 800530e:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 8005312:	f1bb 0f0a 	cmp.w	fp, #10
 8005316:	9a05      	ldr	r2, [sp, #20]
 8005318:	f172 0200 	sbcs.w	r2, r2, #0
 800531c:	d2d4      	bcs.n	80052c8 <vlc_print+0x2bc>
    buf[idx--] = '0';
 800531e:	45c1      	cmp	r9, r8
 8005320:	f1c8 0001 	rsb	r0, r8, #1
 8005324:	f04f 0130 	mov.w	r1, #48	@ 0x30
 8005328:	eba8 0b09 	sub.w	fp, r8, r9
 800532c:	4448      	add	r0, r9
 800532e:	bf84      	itt	hi
 8005330:	2001      	movhi	r0, #1
 8005332:	f04f 0b00 	movhi.w	fp, #0
 8005336:	eb0d 0301 	add.w	r3, sp, r1
 800533a:	4450      	add	r0, sl
 800533c:	465a      	mov	r2, fp
 800533e:	4418      	add	r0, r3
 8005340:	f004 f962 	bl	8009608 <memset>
 8005344:	eba9 0308 	sub.w	r3, r9, r8
 8005348:	45c1      	cmp	r9, r8
 800534a:	bf88      	it	hi
 800534c:	2300      	movhi	r3, #0
 800534e:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 8005350:	45c8      	cmp	r8, r9
 8005352:	449a      	add	sl, r3
 8005354:	f108 0801 	add.w	r8, r8, #1
 8005358:	d108      	bne.n	800536c <vlc_print+0x360>
    buf[idx--] = '.';
 800535a:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 800535e:	222e      	movs	r2, #46	@ 0x2e
    count++;
 8005360:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 8005362:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005366:	446b      	add	r3, sp
 8005368:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 800536c:	45c8      	cmp	r8, r9
 800536e:	d109      	bne.n	8005384 <vlc_print+0x378>
    buf[idx--] = '0';
 8005370:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 8005374:	2230      	movs	r2, #48	@ 0x30
    count++;
 8005376:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 800537a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800537e:	446b      	add	r3, sp
 8005380:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800538c:	f7fb fbc6 	bl	8000b1c <__aeabi_dcmplt>
 8005390:	b148      	cbz	r0, 80053a6 <vlc_print+0x39a>
    buf[idx--] = '-';
 8005392:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 8005396:	222d      	movs	r2, #45	@ 0x2d
    count++;
 8005398:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 800539c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80053a0:	446b      	add	r3, sp
 80053a2:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 80053a6:	f8dd 801c 	ldr.w	r8, [sp, #28]
    buf[idx--] = ' ';
 80053aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80053ac:	2120      	movs	r1, #32
 80053ae:	45c8      	cmp	r8, r9
 80053b0:	f1c8 0001 	rsb	r0, r8, #1
 80053b4:	eba8 0b09 	sub.w	fp, r8, r9
 80053b8:	4448      	add	r0, r9
 80053ba:	bf3c      	itt	cc
 80053bc:	2001      	movcc	r0, #1
 80053be:	f04f 0b00 	movcc.w	fp, #0
 80053c2:	4450      	add	r0, sl
 80053c4:	465a      	mov	r2, fp
 80053c6:	44cb      	add	fp, r9
 80053c8:	4418      	add	r0, r3
 80053ca:	f004 f91d 	bl	8009608 <memset>
 80053ce:	eba9 0308 	sub.w	r3, r9, r8
 80053d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80053d4:	45c8      	cmp	r8, r9
 80053d6:	bf38      	it	cc
 80053d8:	2300      	movcc	r3, #0
  for(int i = 0; i < count; i++) {
 80053da:	4453      	add	r3, sl
 80053dc:	eb02 0803 	add.w	r8, r2, r3
 80053e0:	445b      	add	r3, fp
 80053e2:	eb03 0902 	add.w	r9, r3, r2
 80053e6:	45c1      	cmp	r9, r8
 80053e8:	d110      	bne.n	800540c <vlc_print+0x400>
            count += _write_double(dbl, &specifier);
 80053ea:	445d      	add	r5, fp
            break;
 80053ec:	e6ee      	b.n	80051cc <vlc_print+0x1c0>
    mul *= 10;
 80053ee:	4650      	mov	r0, sl
 80053f0:	4659      	mov	r1, fp
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <vlc_print+0x418>)
  for (int i=0;i <specifier->precision; i++)
 80053f4:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 80053f8:	f7fb f91e 	bl	8000638 <__aeabi_dmul>
 80053fc:	4682      	mov	sl, r0
 80053fe:	468b      	mov	fp, r1
  for (int i=0;i <specifier->precision; i++)
 8005400:	e73a      	b.n	8005278 <vlc_print+0x26c>
 8005402:	ed9d 7b00 	vldr	d7, [sp]
 8005406:	ed8d 7b02 	vstr	d7, [sp, #8]
 800540a:	e748      	b.n	800529e <vlc_print+0x292>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800540c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005410:	4638      	mov	r0, r7
 8005412:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 8005414:	e7e7      	b.n	80053e6 <vlc_print+0x3da>
        if (!c)
 8005416:	2001      	movs	r0, #1
 8005418:	e617      	b.n	800504a <vlc_print+0x3e>
 800541a:	bf00      	nop
 800541c:	08010080 	.word	0x08010080
 8005420:	3fe00000 	.word	0x3fe00000
 8005424:	40240000 	.word	0x40240000
 8005428:	3ff00000 	.word	0x3ff00000
 800542c:	00000000 	.word	0x00000000

08005430 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	460d      	mov	r5, r1
 8005434:	b0a2      	sub	sp, #136	@ 0x88
 8005436:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005438:	f000 fac0 	bl	80059bc <ai_platform_context_acquire>
 800543c:	4604      	mov	r4, r0

  if (report && net_ctx)
 800543e:	2d00      	cmp	r5, #0
 8005440:	d036      	beq.n	80054b0 <ai_network_get_report+0x80>
 8005442:	2800      	cmp	r0, #0
 8005444:	d031      	beq.n	80054aa <ai_network_get_report+0x7a>
  {
    ai_network_report r = {
 8005446:	2278      	movs	r2, #120	@ 0x78
 8005448:	2100      	movs	r1, #0
 800544a:	a804      	add	r0, sp, #16
 800544c:	f004 f8dc 	bl	8009608 <memset>
 8005450:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <ai_network_get_report+0x90>)
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <ai_network_get_report+0x94>)
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <ai_network_get_report+0x98>)
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <ai_network_get_report+0x9c>)
 800545e:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005460:	f000 fa60 	bl	8005924 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005464:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005466:	f000 fa61 	bl	800592c <ai_platform_runtime_get_version>
    ai_network_report r = {
 800546a:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <ai_network_get_report+0xa0>)
      .runtime_version   = ai_platform_runtime_get_version(),
 800546c:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 800546e:	9306      	str	r3, [sp, #24]
 8005470:	2301      	movs	r3, #1
 8005472:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005476:	f000 fa71 	bl	800595c <ai_platform_api_get_version>
 800547a:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800547c:	f000 fa86 	bl	800598c <ai_platform_interface_api_get_version>
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x689b299f,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005480:	4669      	mov	r1, sp
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005482:	900a      	str	r0, [sp, #40]	@ 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005484:	4630      	mov	r0, r6
    ai_network_report r = {
 8005486:	a30c      	add	r3, pc, #48	@ (adr r3, 80054b8 <ai_network_get_report+0x88>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005490:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <ai_network_get_report+0xa4>)
 8005492:	9311      	str	r3, [sp, #68]	@ 0x44
 8005494:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <ai_network_get_report+0xa8>)
 8005496:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005498:	f000 faaa 	bl	80059f0 <ai_platform_api_get_network_report>
 800549c:	4604      	mov	r4, r0
 800549e:	b120      	cbz	r0, 80054aa <ai_network_get_report+0x7a>

    *report = r;
 80054a0:	2288      	movs	r2, #136	@ 0x88
 80054a2:	4669      	mov	r1, sp
 80054a4:	4628      	mov	r0, r5
 80054a6:	f004 f950 	bl	800974a <memcpy>
    return true;
  }
  return false;
}
 80054aa:	4620      	mov	r0, r4
 80054ac:	b022      	add	sp, #136	@ 0x88
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80054b0:	462c      	mov	r4, r5
 80054b2:	e7fa      	b.n	80054aa <ai_network_get_report+0x7a>
 80054b4:	f3af 8000 	nop.w
 80054b8:	00b9bf6b 	.word	0x00b9bf6b
 80054bc:	00000000 	.word	0x00000000
 80054c0:	0801004c 	.word	0x0801004c
 80054c4:	08010087 	.word	0x08010087
 80054c8:	080100aa 	.word	0x080100aa
 80054cc:	080100c3 	.word	0x080100c3
 80054d0:	080101f4 	.word	0x080101f4
 80054d4:	a1facade 	.word	0xa1facade
 80054d8:	689b299f 	.word	0x689b299f

080054dc <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80054dc:	f000 ba76 	b.w	80059cc <ai_platform_network_get_error>

080054e0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80054e0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80054e2:	2305      	movs	r3, #5
 80054e4:	2200      	movs	r2, #0
 80054e6:	e9cd 3200 	strd	r3, r2, [sp]
 80054ea:	2301      	movs	r3, #1
 80054ec:	4a02      	ldr	r2, [pc, #8]	@ (80054f8 <ai_network_create+0x18>)
 80054ee:	f000 fc49 	bl	8005d84 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80054f2:	b003      	add	sp, #12
 80054f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80054f8:	20000014 	.word	0x20000014

080054fc <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80054fc:	f000 bc84 	b.w	8005e08 <ai_platform_network_destroy>

08005500 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005504:	4607      	mov	r7, r0
 8005506:	4688      	mov	r8, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005508:	f000 fc90 	bl	8005e2c <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 800550c:	4604      	mov	r4, r0
 800550e:	2800      	cmp	r0, #0
 8005510:	f000 8091 	beq.w	8005636 <ai_network_init+0x136>
  if (ai_platform_get_weights_map(g_network_weights_map, 8, params)) {
 8005514:	4d4f      	ldr	r5, [pc, #316]	@ (8005654 <ai_network_init+0x154>)
 8005516:	4642      	mov	r2, r8
 8005518:	2108      	movs	r1, #8
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f938 	bl	8005790 <ai_platform_get_weights_map>
 8005520:	4606      	mov	r6, r0
 8005522:	2800      	cmp	r0, #0
 8005524:	f000 8089 	beq.w	800563a <ai_network_init+0x13a>
    conv2d_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005528:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <ai_network_init+0x158>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005530:	601a      	str	r2, [r3, #0]
    conv2d_6_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005532:	682a      	ldr	r2, [r5, #0]
    conv2d_6_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005534:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005538:	4b48      	ldr	r3, [pc, #288]	@ (800565c <ai_network_init+0x15c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005540:	601a      	str	r2, [r3, #0]
    conv2d_6_conv2d_bias_array.data = AI_PTR(g_network_weights_map[1] + 0);
 8005542:	686a      	ldr	r2, [r5, #4]
    conv2d_6_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[1] + 0);
 8005544:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005548:	4b45      	ldr	r3, [pc, #276]	@ (8005660 <ai_network_init+0x160>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005550:	601a      	str	r2, [r3, #0]
    conv2d_7_conv2d_weights_array.data = AI_PTR(g_network_weights_map[2] + 0);
 8005552:	68aa      	ldr	r2, [r5, #8]
    conv2d_7_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[2] + 0);
 8005554:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005558:	4b42      	ldr	r3, [pc, #264]	@ (8005664 <ai_network_init+0x164>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005560:	601a      	str	r2, [r3, #0]
    conv2d_7_conv2d_bias_array.data = AI_PTR(g_network_weights_map[3] + 0);
 8005562:	68ea      	ldr	r2, [r5, #12]
    conv2d_7_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[3] + 0);
 8005564:	e9c3 2202 	strd	r2, r2, [r3, #8]
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005568:	4b3f      	ldr	r3, [pc, #252]	@ (8005668 <ai_network_init+0x168>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005570:	601a      	str	r2, [r3, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_network_weights_map[4] + 0);
 8005572:	692a      	ldr	r2, [r5, #16]
    dense_6_dense_weights_array.data_start = AI_PTR(g_network_weights_map[4] + 0);
 8005574:	e9c3 2202 	strd	r2, r2, [r3, #8]
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005578:	4b3c      	ldr	r3, [pc, #240]	@ (800566c <ai_network_init+0x16c>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005580:	601a      	str	r2, [r3, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_network_weights_map[5] + 0);
 8005582:	696a      	ldr	r2, [r5, #20]
    dense_6_dense_bias_array.data_start = AI_PTR(g_network_weights_map[5] + 0);
 8005584:	e9c3 2202 	strd	r2, r2, [r3, #8]
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005588:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <ai_network_init+0x170>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005590:	601a      	str	r2, [r3, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_network_weights_map[6] + 0);
 8005592:	69aa      	ldr	r2, [r5, #24]
    dense_7_dense_weights_array.data_start = AI_PTR(g_network_weights_map[6] + 0);
 8005594:	e9c3 2202 	strd	r2, r2, [r3, #8]
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <ai_network_init+0x174>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80055a0:	601a      	str	r2, [r3, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_network_weights_map[7] + 0);
 80055a2:	69ea      	ldr	r2, [r5, #28]
    dense_7_dense_bias_array.data_start = AI_PTR(g_network_weights_map[7] + 0);
 80055a4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80055a8:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80056a4 <ai_network_init+0x1a4>
 80055ac:	4642      	mov	r2, r8
 80055ae:	2101      	movs	r1, #1
 80055b0:	4648      	mov	r0, r9
 80055b2:	f000 f945 	bl	8005840 <ai_platform_get_activations_map>
 80055b6:	4605      	mov	r5, r0
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d044      	beq.n	8005646 <ai_network_init+0x146>
    conv2d_6_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80055bc:	f8d9 3000 	ldr.w	r3, [r9]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <ai_network_init+0x178>)
    conv2d_6_conv2d_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 108);
 80055c2:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
    dense_6_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 41068);
 80055c6:	482d      	ldr	r0, [pc, #180]	@ (800567c <ai_network_init+0x17c>)
    conv2d_6_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80055c8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_6_conv2d_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 108);
 80055cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005680 <ai_network_init+0x180>)
    conv2d_6_conv2d_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 80055ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80055d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <ai_network_init+0x184>)
    conv2d_7_conv2d_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 80055d4:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
    conv2d_7_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80055d8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_7_conv2d_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 80055dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005688 <ai_network_init+0x188>)
    conv2d_7_conv2d_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1152);
 80055de:	e9c2 1102 	strd	r1, r1, [r2, #8]
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 100332);
 80055e2:	f503 32c3 	add.w	r2, r3, #99840	@ 0x18600
 80055e6:	4929      	ldr	r1, [pc, #164]	@ (800568c <ai_network_init+0x18c>)
 80055e8:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 100332);
 80055ec:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 17772);
 80055f0:	f503 428a 	add.w	r2, r3, #17664	@ 0x4500
 80055f4:	4926      	ldr	r1, [pc, #152]	@ (8005690 <ai_network_init+0x190>)
 80055f6:	326c      	adds	r2, #108	@ 0x6c
    conv2d_6_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 17772);
 80055f8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 15980);
 80055fc:	f503 5279 	add.w	r2, r3, #15936	@ 0x3e40
 8005600:	4924      	ldr	r1, [pc, #144]	@ (8005694 <ai_network_init+0x194>)
 8005602:	322c      	adds	r2, #44	@ 0x2c
    conv2d_7_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 15980);
 8005604:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_6_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 41068);
 8005608:	f503 4120 	add.w	r1, r3, #40960	@ 0xa000
    dense_7_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 16492);
 800560c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    dense_6_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 41068);
 8005610:	316c      	adds	r1, #108	@ 0x6c
    dense_7_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 16492);
 8005612:	336c      	adds	r3, #108	@ 0x6c
    dense_6_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 41068);
 8005614:	e9c0 1102 	strd	r1, r1, [r0, #8]
    dense_6_output_array.data = AI_PTR(g_network_activations_map[0] + 15980);
 8005618:	491f      	ldr	r1, [pc, #124]	@ (8005698 <ai_network_init+0x198>)
    dense_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 15980);
 800561a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_7_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 16492);
 800561e:	491f      	ldr	r1, [pc, #124]	@ (800569c <ai_network_init+0x19c>)
    dense_7_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 16492);
 8005620:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_7_output_array.data = AI_PTR(g_network_activations_map[0] + 15980);
 8005624:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <ai_network_init+0x1a0>)
    dense_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 15980);
 8005626:	e9c3 2202 	strd	r2, r2, [r3, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800562a:	4638      	mov	r0, r7
 800562c:	f000 fcbe 	bl	8005fac <ai_platform_network_post_init>
 8005630:	4028      	ands	r0, r5
 8005632:	4006      	ands	r6, r0
 8005634:	b2f0      	uxtb	r0, r6

  return ok;
}
 8005636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800563a:	2212      	movs	r2, #18
 800563c:	2130      	movs	r1, #48	@ 0x30
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f9d0 	bl	80059e4 <ai_platform_network_set_error>
  return false;
 8005644:	e7b0      	b.n	80055a8 <ai_network_init+0xa8>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005646:	2213      	movs	r2, #19
 8005648:	2130      	movs	r1, #48	@ 0x30
 800564a:	4620      	mov	r0, r4
 800564c:	f000 f9ca 	bl	80059e4 <ai_platform_network_set_error>
  return false;
 8005650:	e7eb      	b.n	800562a <ai_network_init+0x12a>
 8005652:	bf00      	nop
 8005654:	20001180 	.word	0x20001180
 8005658:	20000910 	.word	0x20000910
 800565c:	20000900 	.word	0x20000900
 8005660:	200008f0 	.word	0x200008f0
 8005664:	200008e0 	.word	0x200008e0
 8005668:	200008d0 	.word	0x200008d0
 800566c:	200008c0 	.word	0x200008c0
 8005670:	200008b0 	.word	0x200008b0
 8005674:	200008a0 	.word	0x200008a0
 8005678:	20000890 	.word	0x20000890
 800567c:	20000950 	.word	0x20000950
 8005680:	20000880 	.word	0x20000880
 8005684:	20000870 	.word	0x20000870
 8005688:	20000860 	.word	0x20000860
 800568c:	20000980 	.word	0x20000980
 8005690:	20000970 	.word	0x20000970
 8005694:	20000960 	.word	0x20000960
 8005698:	20000940 	.word	0x20000940
 800569c:	20000930 	.word	0x20000930
 80056a0:	20000920 	.word	0x20000920
 80056a4:	200011a0 	.word	0x200011a0

080056a8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80056a8:	f000 bcb0 	b.w	800600c <ai_platform_network_process>

080056ac <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80056ac:	2200      	movs	r2, #0
 80056ae:	f000 bcad 	b.w	800600c <ai_platform_network_process>
	...

080056b4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80056b4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80056b6:	4603      	mov	r3, r0
{
 80056b8:	b085      	sub	sp, #20
  if (!params) return false;
 80056ba:	b170      	cbz	r0, 80056da <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80056bc:	4c08      	ldr	r4, [pc, #32]	@ (80056e0 <ai_network_data_params_get+0x2c>)
 80056be:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80056c0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80056c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80056ca:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80056ce:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80056d2:	4629      	mov	r1, r5
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f90b 	bl	80058f0 <ai_platform_bind_network_params>
}
 80056da:	b005      	add	sp, #20
 80056dc:	bd30      	pop	{r4, r5, pc}
 80056de:	bf00      	nop
 80056e0:	0800bfe4 	.word	0x0800bfe4

080056e4 <ai_buffer_get_size>:
 80056e4:	b368      	cbz	r0, 8005742 <ai_buffer_get_size+0x5e>
 80056e6:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <ai_buffer_get_size+0x60>)
 80056e8:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <ai_buffer_get_size+0x64>)
 80056ea:	b410      	push	{r4}
 80056ec:	6804      	ldr	r4, [r0, #0]
 80056ee:	4023      	ands	r3, r4
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d123      	bne.n	800573c <ai_buffer_get_size+0x58>
 80056f4:	b311      	cbz	r1, 800573c <ai_buffer_get_size+0x58>
 80056f6:	6984      	ldr	r4, [r0, #24]
 80056f8:	6862      	ldr	r2, [r4, #4]
 80056fa:	321f      	adds	r2, #31
 80056fc:	f022 021f 	bic.w	r2, r2, #31
 8005700:	7d03      	ldrb	r3, [r0, #20]
 8005702:	6941      	ldr	r1, [r0, #20]
 8005704:	f1a3 0301 	sub.w	r3, r3, #1
 8005708:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005716:	da0c      	bge.n	8005732 <ai_buffer_get_size+0x4e>
 8005718:	2b01      	cmp	r3, #1
 800571a:	d103      	bne.n	8005724 <ai_buffer_get_size+0x40>
 800571c:	2802      	cmp	r0, #2
 800571e:	f04f 0302 	mov.w	r3, #2
 8005722:	d006      	beq.n	8005732 <ai_buffer_get_size+0x4e>
 8005724:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005728:	3301      	adds	r3, #1
 800572a:	4298      	cmp	r0, r3
 800572c:	fb01 f202 	mul.w	r2, r1, r2
 8005730:	d1f2      	bne.n	8005718 <ai_buffer_get_size+0x34>
 8005732:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	6984      	ldr	r4, [r0, #24]
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	e7de      	b.n	8005700 <ai_buffer_get_size+0x1c>
 8005742:	4770      	bx	lr
 8005744:	017fffff 	.word	0x017fffff
 8005748:	000400c0 	.word	0x000400c0

0800574c <ai_buffer_get_byte_size>:
 800574c:	b128      	cbz	r0, 800575a <ai_buffer_get_byte_size+0xe>
 800574e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8005752:	fb01 f000 	mul.w	r0, r1, r0
 8005756:	3007      	adds	r0, #7
 8005758:	08c0      	lsrs	r0, r0, #3
 800575a:	4770      	bx	lr

0800575c <ai_buffer_array_sane>:
 800575c:	b138      	cbz	r0, 800576e <ai_buffer_array_sane+0x12>
 800575e:	6843      	ldr	r3, [r0, #4]
 8005760:	b123      	cbz	r3, 800576c <ai_buffer_array_sane+0x10>
 8005762:	8840      	ldrh	r0, [r0, #2]
 8005764:	3800      	subs	r0, #0
 8005766:	bf18      	it	ne
 8005768:	2001      	movne	r0, #1
 800576a:	4770      	bx	lr
 800576c:	4618      	mov	r0, r3
 800576e:	4770      	bx	lr

08005770 <ai_buffer_array_item_set_address>:
 8005770:	b150      	cbz	r0, 8005788 <ai_buffer_array_item_set_address+0x18>
 8005772:	6843      	ldr	r3, [r0, #4]
 8005774:	b14b      	cbz	r3, 800578a <ai_buffer_array_item_set_address+0x1a>
 8005776:	8840      	ldrh	r0, [r0, #2]
 8005778:	b900      	cbnz	r0, 800577c <ai_buffer_array_item_set_address+0xc>
 800577a:	4770      	bx	lr
 800577c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005780:	2001      	movs	r0, #1
 8005782:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	4770      	bx	lr
 800578a:	4618      	mov	r0, r3
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <ai_platform_get_weights_map>:
 8005790:	2900      	cmp	r1, #0
 8005792:	bf18      	it	ne
 8005794:	2800      	cmpne	r0, #0
 8005796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005798:	bf0c      	ite	eq
 800579a:	2401      	moveq	r4, #1
 800579c:	2400      	movne	r4, #0
 800579e:	2a00      	cmp	r2, #0
 80057a0:	bf08      	it	eq
 80057a2:	f044 0401 	orreq.w	r4, r4, #1
 80057a6:	b114      	cbz	r4, 80057ae <ai_platform_get_weights_map+0x1e>
 80057a8:	2400      	movs	r4, #0
 80057aa:	4620      	mov	r0, r4
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	4616      	mov	r6, r2
 80057b0:	4b22      	ldr	r3, [pc, #136]	@ (800583c <ai_platform_get_weights_map+0xac>)
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	4605      	mov	r5, r0
 80057b6:	460f      	mov	r7, r1
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d022      	beq.n	8005802 <ai_platform_get_weights_map+0x72>
 80057bc:	6870      	ldr	r0, [r6, #4]
 80057be:	2800      	cmp	r0, #0
 80057c0:	d0f2      	beq.n	80057a8 <ai_platform_get_weights_map+0x18>
 80057c2:	6806      	ldr	r6, [r0, #0]
 80057c4:	429e      	cmp	r6, r3
 80057c6:	d006      	beq.n	80057d6 <ai_platform_get_weights_map+0x46>
 80057c8:	f1a1 0401 	sub.w	r4, r1, #1
 80057cc:	6028      	str	r0, [r5, #0]
 80057ce:	fab4 f484 	clz	r4, r4
 80057d2:	0964      	lsrs	r4, r4, #5
 80057d4:	e7e9      	b.n	80057aa <ai_platform_get_weights_map+0x1a>
 80057d6:	3d04      	subs	r5, #4
 80057d8:	4602      	mov	r2, r0
 80057da:	4621      	mov	r1, r4
 80057dc:	e000      	b.n	80057e0 <ai_platform_get_weights_map+0x50>
 80057de:	4619      	mov	r1, r3
 80057e0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80057e4:	42b3      	cmp	r3, r6
 80057e6:	d025      	beq.n	8005834 <ai_platform_get_weights_map+0xa4>
 80057e8:	f845 3f04 	str.w	r3, [r5, #4]!
 80057ec:	1c4b      	adds	r3, r1, #1
 80057ee:	429f      	cmp	r7, r3
 80057f0:	d8f5      	bhi.n	80057de <ai_platform_get_weights_map+0x4e>
 80057f2:	d1da      	bne.n	80057aa <ai_platform_get_weights_map+0x1a>
 80057f4:	3102      	adds	r1, #2
 80057f6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80057fa:	42b3      	cmp	r3, r6
 80057fc:	d1d5      	bne.n	80057aa <ai_platform_get_weights_map+0x1a>
 80057fe:	2401      	movs	r4, #1
 8005800:	e7d3      	b.n	80057aa <ai_platform_get_weights_map+0x1a>
 8005802:	1d30      	adds	r0, r6, #4
 8005804:	f7ff ffaa 	bl	800575c <ai_buffer_array_sane>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0cd      	beq.n	80057a8 <ai_platform_get_weights_map+0x18>
 800580c:	88f3      	ldrh	r3, [r6, #6]
 800580e:	429f      	cmp	r7, r3
 8005810:	d1ca      	bne.n	80057a8 <ai_platform_get_weights_map+0x18>
 8005812:	3d04      	subs	r5, #4
 8005814:	4622      	mov	r2, r4
 8005816:	68b3      	ldr	r3, [r6, #8]
 8005818:	4423      	add	r3, r4
 800581a:	341c      	adds	r4, #28
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b123      	cbz	r3, 800582a <ai_platform_get_weights_map+0x9a>
 8005820:	3201      	adds	r2, #1
 8005822:	f845 3f04 	str.w	r3, [r5, #4]!
 8005826:	4297      	cmp	r7, r2
 8005828:	d8f5      	bhi.n	8005816 <ai_platform_get_weights_map+0x86>
 800582a:	1abc      	subs	r4, r7, r2
 800582c:	fab4 f484 	clz	r4, r4
 8005830:	0964      	lsrs	r4, r4, #5
 8005832:	e7ba      	b.n	80057aa <ai_platform_get_weights_map+0x1a>
 8005834:	428f      	cmp	r7, r1
 8005836:	d1b8      	bne.n	80057aa <ai_platform_get_weights_map+0x1a>
 8005838:	e7e1      	b.n	80057fe <ai_platform_get_weights_map+0x6e>
 800583a:	bf00      	nop
 800583c:	a1facade 	.word	0xa1facade

08005840 <ai_platform_get_activations_map>:
 8005840:	2900      	cmp	r1, #0
 8005842:	bf18      	it	ne
 8005844:	2800      	cmpne	r0, #0
 8005846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005848:	bf0c      	ite	eq
 800584a:	2401      	moveq	r4, #1
 800584c:	2400      	movne	r4, #0
 800584e:	2a00      	cmp	r2, #0
 8005850:	bf08      	it	eq
 8005852:	f044 0401 	orreq.w	r4, r4, #1
 8005856:	b114      	cbz	r4, 800585e <ai_platform_get_activations_map+0x1e>
 8005858:	2400      	movs	r4, #0
 800585a:	4620      	mov	r0, r4
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	4616      	mov	r6, r2
 8005860:	4b22      	ldr	r3, [pc, #136]	@ (80058ec <ai_platform_get_activations_map+0xac>)
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	4605      	mov	r5, r0
 8005866:	460f      	mov	r7, r1
 8005868:	429a      	cmp	r2, r3
 800586a:	d022      	beq.n	80058b2 <ai_platform_get_activations_map+0x72>
 800586c:	6a30      	ldr	r0, [r6, #32]
 800586e:	2800      	cmp	r0, #0
 8005870:	d0f2      	beq.n	8005858 <ai_platform_get_activations_map+0x18>
 8005872:	6806      	ldr	r6, [r0, #0]
 8005874:	429e      	cmp	r6, r3
 8005876:	d006      	beq.n	8005886 <ai_platform_get_activations_map+0x46>
 8005878:	f1a1 0401 	sub.w	r4, r1, #1
 800587c:	6028      	str	r0, [r5, #0]
 800587e:	fab4 f484 	clz	r4, r4
 8005882:	0964      	lsrs	r4, r4, #5
 8005884:	e7e9      	b.n	800585a <ai_platform_get_activations_map+0x1a>
 8005886:	3d04      	subs	r5, #4
 8005888:	4602      	mov	r2, r0
 800588a:	4621      	mov	r1, r4
 800588c:	e000      	b.n	8005890 <ai_platform_get_activations_map+0x50>
 800588e:	4619      	mov	r1, r3
 8005890:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005894:	42b3      	cmp	r3, r6
 8005896:	d026      	beq.n	80058e6 <ai_platform_get_activations_map+0xa6>
 8005898:	f845 3f04 	str.w	r3, [r5, #4]!
 800589c:	1c4b      	adds	r3, r1, #1
 800589e:	429f      	cmp	r7, r3
 80058a0:	d8f5      	bhi.n	800588e <ai_platform_get_activations_map+0x4e>
 80058a2:	d1da      	bne.n	800585a <ai_platform_get_activations_map+0x1a>
 80058a4:	3102      	adds	r1, #2
 80058a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80058aa:	42b3      	cmp	r3, r6
 80058ac:	d1d5      	bne.n	800585a <ai_platform_get_activations_map+0x1a>
 80058ae:	2401      	movs	r4, #1
 80058b0:	e7d3      	b.n	800585a <ai_platform_get_activations_map+0x1a>
 80058b2:	f106 000c 	add.w	r0, r6, #12
 80058b6:	f7ff ff51 	bl	800575c <ai_buffer_array_sane>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d0cc      	beq.n	8005858 <ai_platform_get_activations_map+0x18>
 80058be:	89f3      	ldrh	r3, [r6, #14]
 80058c0:	429f      	cmp	r7, r3
 80058c2:	d1c9      	bne.n	8005858 <ai_platform_get_activations_map+0x18>
 80058c4:	3d04      	subs	r5, #4
 80058c6:	4622      	mov	r2, r4
 80058c8:	6933      	ldr	r3, [r6, #16]
 80058ca:	4423      	add	r3, r4
 80058cc:	341c      	adds	r4, #28
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	b123      	cbz	r3, 80058dc <ai_platform_get_activations_map+0x9c>
 80058d2:	3201      	adds	r2, #1
 80058d4:	f845 3f04 	str.w	r3, [r5, #4]!
 80058d8:	4297      	cmp	r7, r2
 80058da:	d8f5      	bhi.n	80058c8 <ai_platform_get_activations_map+0x88>
 80058dc:	1abc      	subs	r4, r7, r2
 80058de:	fab4 f484 	clz	r4, r4
 80058e2:	0964      	lsrs	r4, r4, #5
 80058e4:	e7b9      	b.n	800585a <ai_platform_get_activations_map+0x1a>
 80058e6:	428f      	cmp	r7, r1
 80058e8:	d1b7      	bne.n	800585a <ai_platform_get_activations_map+0x1a>
 80058ea:	e7e0      	b.n	80058ae <ai_platform_get_activations_map+0x6e>
 80058ec:	a1facade 	.word	0xa1facade

080058f0 <ai_platform_bind_network_params>:
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	bf18      	it	ne
 80058f4:	2900      	cmpne	r1, #0
 80058f6:	d010      	beq.n	800591a <ai_platform_bind_network_params+0x2a>
 80058f8:	b178      	cbz	r0, 800591a <ai_platform_bind_network_params+0x2a>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4808      	ldr	r0, [pc, #32]	@ (8005920 <ai_platform_bind_network_params+0x30>)
 80058fe:	f103 0c0c 	add.w	ip, r3, #12
 8005902:	f843 0b04 	str.w	r0, [r3], #4
 8005906:	c903      	ldmia	r1, {r0, r1}
 8005908:	e883 0003 	stmia.w	r3, {r0, r1}
 800590c:	2301      	movs	r3, #1
 800590e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005912:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005916:	4618      	mov	r0, r3
 8005918:	4770      	bx	lr
 800591a:	2300      	movs	r3, #0
 800591c:	4618      	mov	r0, r3
 800591e:	4770      	bx	lr
 8005920:	a1facade 	.word	0xa1facade

08005924 <ai_platform_runtime_get_revision>:
 8005924:	4800      	ldr	r0, [pc, #0]	@ (8005928 <ai_platform_runtime_get_revision+0x4>)
 8005926:	4770      	bx	lr
 8005928:	08010108 	.word	0x08010108

0800592c <ai_platform_runtime_get_version>:
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <ai_platform_runtime_get_version+0x2c>)
 800592e:	2000      	movs	r0, #0
 8005930:	b082      	sub	sp, #8
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	fa5f fc83 	uxtb.w	ip, r3
 8005938:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800593c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	f36c 0007 	bfi	r0, ip, #0, #8
 8005946:	f361 200f 	bfi	r0, r1, #8, #8
 800594a:	f362 4017 	bfi	r0, r2, #16, #8
 800594e:	f363 601f 	bfi	r0, r3, #24, #8
 8005952:	b002      	add	sp, #8
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	0801010c 	.word	0x0801010c

0800595c <ai_platform_api_get_version>:
 800595c:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <ai_platform_api_get_version+0x2c>)
 800595e:	2000      	movs	r0, #0
 8005960:	b082      	sub	sp, #8
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	fa5f fc83 	uxtb.w	ip, r3
 8005968:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800596c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005970:	0e1b      	lsrs	r3, r3, #24
 8005972:	f36c 0007 	bfi	r0, ip, #0, #8
 8005976:	f361 200f 	bfi	r0, r1, #8, #8
 800597a:	f362 4017 	bfi	r0, r2, #16, #8
 800597e:	f363 601f 	bfi	r0, r3, #24, #8
 8005982:	b002      	add	sp, #8
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	08010110 	.word	0x08010110

0800598c <ai_platform_interface_api_get_version>:
 800598c:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <ai_platform_interface_api_get_version+0x2c>)
 800598e:	2000      	movs	r0, #0
 8005990:	b082      	sub	sp, #8
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	fa5f fc83 	uxtb.w	ip, r3
 8005998:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800599c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f36c 0007 	bfi	r0, ip, #0, #8
 80059a6:	f361 200f 	bfi	r0, r1, #8, #8
 80059aa:	f362 4017 	bfi	r0, r2, #16, #8
 80059ae:	f363 601f 	bfi	r0, r3, #24, #8
 80059b2:	b002      	add	sp, #8
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	08010114 	.word	0x08010114

080059bc <ai_platform_context_acquire>:
 80059bc:	6802      	ldr	r2, [r0, #0]
 80059be:	4b02      	ldr	r3, [pc, #8]	@ (80059c8 <ai_platform_context_acquire+0xc>)
 80059c0:	4393      	bics	r3, r2
 80059c2:	bf18      	it	ne
 80059c4:	2000      	movne	r0, #0
 80059c6:	4770      	bx	lr
 80059c8:	a1c00100 	.word	0xa1c00100

080059cc <ai_platform_network_get_error>:
 80059cc:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <ai_platform_network_get_error+0x14>)
 80059ce:	6802      	ldr	r2, [r0, #0]
 80059d0:	4393      	bics	r3, r2
 80059d2:	d102      	bne.n	80059da <ai_platform_network_get_error+0xe>
 80059d4:	300c      	adds	r0, #12
 80059d6:	f000 bd61 	b.w	800649c <core_get_error>
 80059da:	f241 0010 	movw	r0, #4112	@ 0x1010
 80059de:	4770      	bx	lr
 80059e0:	a1c00100 	.word	0xa1c00100

080059e4 <ai_platform_network_set_error>:
 80059e4:	b110      	cbz	r0, 80059ec <ai_platform_network_set_error+0x8>
 80059e6:	300c      	adds	r0, #12
 80059e8:	f000 bd5e 	b.w	80064a8 <core_set_error>
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <ai_platform_api_get_network_report>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	4ba3      	ldr	r3, [pc, #652]	@ (8005c84 <ai_platform_api_get_network_report+0x294>)
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	6802      	ldr	r2, [r0, #0]
 80059fa:	9002      	str	r0, [sp, #8]
 80059fc:	4393      	bics	r3, r2
 80059fe:	d177      	bne.n	8005af0 <ai_platform_api_get_network_report+0x100>
 8005a00:	4688      	mov	r8, r1
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d074      	beq.n	8005af0 <ai_platform_api_get_network_report+0x100>
 8005a06:	2400      	movs	r4, #0
 8005a08:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8005a0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005a0c:	b14b      	cbz	r3, 8005a22 <ai_platform_api_get_network_report+0x32>
 8005a0e:	3401      	adds	r4, #1
 8005a10:	f8c8 407c 	str.w	r4, [r8, #124]	@ 0x7c
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	b122      	cbz	r2, 8005a22 <ai_platform_api_get_network_report+0x32>
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d002      	beq.n	8005a22 <ai_platform_api_get_network_report+0x32>
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f5      	bne.n	8005a0e <ai_platform_api_get_network_report+0x1e>
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	f000 8161 	beq.w	8005cea <ai_platform_api_get_network_report+0x2fa>
 8005a28:	9a02      	ldr	r2, [sp, #8]
 8005a2a:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d050      	beq.n	8005ad2 <ai_platform_api_get_network_report+0xe2>
 8005a30:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8005a34:	f1ba 0f00 	cmp.w	sl, #0
 8005a38:	d04b      	beq.n	8005ad2 <ai_platform_api_get_network_report+0xe2>
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a42:	465d      	mov	r5, fp
 8005a44:	e015      	b.n	8005a72 <ai_platform_api_get_network_report+0x82>
 8005a46:	00ea      	lsls	r2, r5, #3
 8005a48:	2101      	movs	r1, #1
 8005a4a:	50b9      	str	r1, [r7, r2]
 8005a4c:	69b2      	ldr	r2, [r6, #24]
 8005a4e:	6856      	ldr	r6, [r2, #4]
 8005a50:	f04f 0201 	mov.w	r2, #1
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	3501      	adds	r5, #1
 8005a58:	7522      	strb	r2, [r4, #20]
 8005a5a:	f10b 0b1c 	add.w	fp, fp, #28
 8005a5e:	6963      	ldr	r3, [r4, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f368 231f 	bfi	r3, r8, #8, #24
 8005a66:	e9c4 0c00 	strd	r0, ip, [r4]
 8005a6a:	e9c4 2603 	strd	r2, r6, [r4, #12]
 8005a6e:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8005a72:	f8ba 3000 	ldrh.w	r3, [sl]
 8005a76:	b2aa      	uxth	r2, r5
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	d23e      	bcs.n	8005afa <ai_platform_api_get_network_report+0x10a>
 8005a7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03a      	beq.n	8005afa <ai_platform_api_get_network_report+0x10a>
 8005a84:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d036      	beq.n	8005afa <ai_platform_api_get_network_report+0x10a>
 8005a8c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005a90:	00ea      	lsls	r2, r5, #3
 8005a92:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005a9c:	69b3      	ldr	r3, [r6, #24]
 8005a9e:	445c      	add	r4, fp
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	68b3      	ldr	r3, [r6, #8]
 8005aa4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005aa8:	f002 fce4 	bl	8008474 <ai_array_to_buffer_fmt>
 8005aac:	69b2      	ldr	r2, [r6, #24]
 8005aae:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005ab2:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0c9      	beq.n	8005a4e <ai_platform_api_get_network_report+0x5e>
 8005aba:	2200      	movs	r2, #0
 8005abc:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8005ac0:	6832      	ldr	r2, [r6, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	b112      	cbz	r2, 8005acc <ai_platform_api_get_network_report+0xdc>
 8005ac6:	8852      	ldrh	r2, [r2, #2]
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d1bc      	bne.n	8005a46 <ai_platform_api_get_network_report+0x56>
 8005acc:	69b2      	ldr	r2, [r6, #24]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e7bd      	b.n	8005a4e <ai_platform_api_get_network_report+0x5e>
 8005ad2:	2400      	movs	r4, #0
 8005ad4:	9802      	ldr	r0, [sp, #8]
 8005ad6:	2218      	movs	r2, #24
 8005ad8:	2112      	movs	r1, #18
 8005ada:	300c      	adds	r0, #12
 8005adc:	f8c8 403c 	str.w	r4, [r8, #60]	@ 0x3c
 8005ae0:	f8a8 4038 	strh.w	r4, [r8, #56]	@ 0x38
 8005ae4:	f000 fce0 	bl	80064a8 <core_set_error>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	b009      	add	sp, #36	@ 0x24
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	2400      	movs	r4, #0
 8005af2:	4620      	mov	r0, r4
 8005af4:	b009      	add	sp, #36	@ 0x24
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d0e7      	beq.n	8005ad2 <ai_platform_api_get_network_report+0xe2>
 8005b02:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f8a8 2038 	strh.w	r2, [r8, #56]	@ 0x38
 8005b0c:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f240 80a5 	bls.w	8005c64 <ai_platform_api_get_network_report+0x274>
 8005b1a:	f04f 0a00 	mov.w	sl, #0
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b24:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 8005b28:	4655      	mov	r5, sl
 8005b2a:	e016      	b.n	8005b5a <ai_platform_api_get_network_report+0x16a>
 8005b2c:	00e9      	lsls	r1, r5, #3
 8005b2e:	2301      	movs	r3, #1
 8005b30:	507b      	str	r3, [r7, r1]
 8005b32:	69b1      	ldr	r1, [r6, #24]
 8005b34:	f04f 0301 	mov.w	r3, #1
 8005b38:	6849      	ldr	r1, [r1, #4]
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	f10a 0a1c 	add.w	sl, sl, #28
 8005b40:	7523      	strb	r3, [r4, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	60a0      	str	r0, [r4, #8]
 8005b46:	f8c4 b018 	str.w	fp, [r4, #24]
 8005b4a:	e9c4 3103 	strd	r3, r1, [r4, #12]
 8005b4e:	6961      	ldr	r1, [r4, #20]
 8005b50:	f368 211f 	bfi	r1, r8, #8, #24
 8005b54:	e9c4 c200 	strd	ip, r2, [r4]
 8005b58:	6161      	str	r1, [r4, #20]
 8005b5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005b5e:	b2aa      	uxth	r2, r5
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	d928      	bls.n	8005bb6 <ai_platform_api_get_network_report+0x1c6>
 8005b64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b68:	b32b      	cbz	r3, 8005bb6 <ai_platform_api_get_network_report+0x1c6>
 8005b6a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005b6e:	b316      	cbz	r6, 8005bb6 <ai_platform_api_get_network_report+0x1c6>
 8005b70:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005b74:	00ea      	lsls	r2, r5, #3
 8005b76:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005b7a:	9201      	str	r2, [sp, #4]
 8005b7c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005b80:	69b3      	ldr	r3, [r6, #24]
 8005b82:	4454      	add	r4, sl
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	68b3      	ldr	r3, [r6, #8]
 8005b88:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005b8c:	f002 fc72 	bl	8008474 <ai_array_to_buffer_fmt>
 8005b90:	69b1      	ldr	r1, [r6, #24]
 8005b92:	4684      	mov	ip, r0
 8005b94:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005b98:	688a      	ldr	r2, [r1, #8]
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d0ca      	beq.n	8005b34 <ai_platform_api_get_network_report+0x144>
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005ba4:	6831      	ldr	r1, [r6, #0]
 8005ba6:	6041      	str	r1, [r0, #4]
 8005ba8:	b111      	cbz	r1, 8005bb0 <ai_platform_api_get_network_report+0x1c0>
 8005baa:	8849      	ldrh	r1, [r1, #2]
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d1bd      	bne.n	8005b2c <ai_platform_api_get_network_report+0x13c>
 8005bb0:	69b1      	ldr	r1, [r6, #24]
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	e7be      	b.n	8005b34 <ai_platform_api_get_network_report+0x144>
 8005bb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d052      	beq.n	8005c64 <ai_platform_api_get_network_report+0x274>
 8005bbe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005bc2:	9902      	ldr	r1, [sp, #8]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8005bca:	f8a8 203a 	strh.w	r2, [r8, #58]	@ 0x3a
 8005bce:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff fdc2 	bl	800575c <ai_buffer_array_sane>
 8005bd8:	4604      	mov	r4, r0
 8005bda:	b940      	cbnz	r0, 8005bee <ai_platform_api_get_network_report+0x1fe>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff fdbd 	bl	800575c <ai_buffer_array_sane>
 8005be2:	b120      	cbz	r0, 8005bee <ai_platform_api_get_network_report+0x1fe>
 8005be4:	9b02      	ldr	r3, [sp, #8]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f040 8088 	bne.w	8005cfe <ai_platform_api_get_network_report+0x30e>
 8005bee:	9d02      	ldr	r5, [sp, #8]
 8005bf0:	f105 0720 	add.w	r7, r5, #32
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f7ff fdb1 	bl	800575c <ai_buffer_array_sane>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	b930      	cbnz	r0, 8005c0c <ai_platform_api_get_network_report+0x21c>
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f7ff fdac 	bl	800575c <ai_buffer_array_sane>
 8005c04:	b110      	cbz	r0, 8005c0c <ai_platform_api_get_network_report+0x21c>
 8005c06:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d17f      	bne.n	8005d0c <ai_platform_api_get_network_report+0x31c>
 8005c0c:	9a02      	ldr	r2, [sp, #8]
 8005c0e:	f240 2401 	movw	r4, #513	@ 0x201
 8005c12:	6853      	ldr	r3, [r2, #4]
 8005c14:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <ai_platform_api_get_network_report+0x298>)
 8005c1a:	f8c8 3010 	str.w	r3, [r8, #16]
 8005c1e:	f240 1309 	movw	r3, #265	@ 0x109
 8005c22:	f8c8 3014 	str.w	r3, [r8, #20]
 8005c26:	f240 5301 	movw	r3, #1281	@ 0x501
 8005c2a:	e9c8 4309 	strd	r4, r3, [r8, #36]	@ 0x24
 8005c2e:	6890      	ldr	r0, [r2, #8]
 8005c30:	f002 fcd0 	bl	80085d4 <ai_platform_version_get>
 8005c34:	4b15      	ldr	r3, [pc, #84]	@ (8005c8c <ai_platform_api_get_network_report+0x29c>)
 8005c36:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
 8005c3a:	f8c8 0020 	str.w	r0, [r8, #32]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d126      	bne.n	8005c90 <ai_platform_api_get_network_report+0x2a0>
 8005c42:	f108 0250 	add.w	r2, r8, #80	@ 0x50
 8005c46:	f108 0348 	add.w	r3, r8, #72	@ 0x48
 8005c4a:	2401      	movs	r4, #1
 8005c4c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005c50:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c54:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005c58:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	b009      	add	sp, #36	@ 0x24
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	2400      	movs	r4, #0
 8005c66:	9802      	ldr	r0, [sp, #8]
 8005c68:	2218      	movs	r2, #24
 8005c6a:	2113      	movs	r1, #19
 8005c6c:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 8005c70:	300c      	adds	r0, #12
 8005c72:	f8a8 403a 	strh.w	r4, [r8, #58]	@ 0x3a
 8005c76:	f000 fc17 	bl	80064a8 <core_set_error>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	b009      	add	sp, #36	@ 0x24
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	a1c00100 	.word	0xa1c00100
 8005c88:	08010108 	.word	0x08010108
 8005c8c:	a1facade 	.word	0xa1facade
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b3a      	ldr	r3, [pc, #232]	@ (8005d7c <ai_platform_api_get_network_report+0x38c>)
 8005c94:	f108 0a44 	add.w	sl, r8, #68	@ 0x44
 8005c98:	f10d 0c10 	add.w	ip, sp, #16
 8005c9c:	f108 0960 	add.w	r9, r8, #96	@ 0x60
 8005ca0:	4655      	mov	r5, sl
 8005ca2:	f8c8 c05c 	str.w	ip, [r8, #92]	@ 0x5c
 8005ca6:	464c      	mov	r4, r9
 8005ca8:	e9c8 2212 	strd	r2, r2, [r8, #72]	@ 0x48
 8005cac:	e9c8 2214 	strd	r2, r2, [r8, #80]	@ 0x50
 8005cb0:	4a33      	ldr	r2, [pc, #204]	@ (8005d80 <ai_platform_api_get_network_report+0x390>)
 8005cb2:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
 8005cb6:	f240 4201 	movw	r2, #1025	@ 0x401
 8005cba:	f8c8 2058 	str.w	r2, [r8, #88]	@ 0x58
 8005cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cc0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f7ff fd43 	bl	800575c <ai_buffer_array_sane>
 8005cd6:	bb78      	cbnz	r0, 8005d38 <ai_platform_api_get_network_report+0x348>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff fd3f 	bl	800575c <ai_buffer_array_sane>
 8005cde:	b9e0      	cbnz	r0, 8005d1a <ai_platform_api_get_network_report+0x32a>
 8005ce0:	2401      	movs	r4, #1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	b009      	add	sp, #36	@ 0x24
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	9802      	ldr	r0, [sp, #8]
 8005cec:	2218      	movs	r2, #24
 8005cee:	2111      	movs	r1, #17
 8005cf0:	300c      	adds	r0, #12
 8005cf2:	f000 fbd9 	bl	80064a8 <core_set_error>
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	b009      	add	sp, #36	@ 0x24
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	9802      	ldr	r0, [sp, #8]
 8005d00:	2213      	movs	r2, #19
 8005d02:	2111      	movs	r1, #17
 8005d04:	300c      	adds	r0, #12
 8005d06:	f000 fbcf 	bl	80064a8 <core_set_error>
 8005d0a:	e6ed      	b.n	8005ae8 <ai_platform_api_get_network_report+0xf8>
 8005d0c:	9802      	ldr	r0, [sp, #8]
 8005d0e:	2212      	movs	r2, #18
 8005d10:	2111      	movs	r1, #17
 8005d12:	300c      	adds	r0, #12
 8005d14:	f000 fbc8 	bl	80064a8 <core_set_error>
 8005d18:	e6e6      	b.n	8005ae8 <ai_platform_api_get_network_report+0xf8>
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f7ff fd1e 	bl	800575c <ai_buffer_array_sane>
 8005d20:	b1c0      	cbz	r0, 8005d54 <ai_platform_api_get_network_report+0x364>
 8005d22:	9b02      	ldr	r3, [sp, #8]
 8005d24:	46d0      	mov	r8, sl
 8005d26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d2a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8005d2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005d32:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8005d36:	e7d3      	b.n	8005ce0 <ai_platform_api_get_network_report+0x2f0>
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff fd0f 	bl	800575c <ai_buffer_array_sane>
 8005d3e:	b198      	cbz	r0, 8005d68 <ai_platform_api_get_network_report+0x378>
 8005d40:	9b02      	ldr	r3, [sp, #8]
 8005d42:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d46:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8005d4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005d4e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8005d52:	e7c1      	b.n	8005cd8 <ai_platform_api_get_network_report+0x2e8>
 8005d54:	4604      	mov	r4, r0
 8005d56:	46d0      	mov	r8, sl
 8005d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8005d5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005d62:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8005d66:	deff      	udf	#255	@ 0xff
 8005d68:	4604      	mov	r4, r0
 8005d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d6c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8005d70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005d74:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8005d78:	deff      	udf	#255	@ 0xff
 8005d7a:	bf00      	nop
 8005d7c:	0800bff4 	.word	0x0800bff4
 8005d80:	00040440 	.word	0x00040440

08005d84 <ai_platform_network_create>:
 8005d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8005d8e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8005d92:	b320      	cbz	r0, 8005dde <ai_platform_network_create+0x5a>
 8005d94:	6002      	str	r2, [r0, #0]
 8005d96:	4616      	mov	r6, r2
 8005d98:	461f      	mov	r7, r3
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	f000 fb7c 	bl	8006498 <core_init>
 8005da0:	b970      	cbnz	r0, 8005dc0 <ai_platform_network_create+0x3c>
 8005da2:	2530      	movs	r5, #48	@ 0x30
 8005da4:	2300      	movs	r3, #0
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2410      	movs	r4, #16
 8005daa:	464a      	mov	r2, r9
 8005dac:	4641      	mov	r1, r8
 8005dae:	4638      	mov	r0, r7
 8005db0:	f002 fc0a 	bl	80085c8 <ai_version_get>
 8005db4:	60b0      	str	r0, [r6, #8]
 8005db6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005dba:	b003      	add	sp, #12
 8005dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f002 fbff 	bl	80085c8 <ai_version_get>
 8005dca:	4605      	mov	r5, r0
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2105      	movs	r1, #5
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	f002 fbf9 	bl	80085c8 <ai_version_get>
 8005dd6:	4285      	cmp	r5, r0
 8005dd8:	d008      	beq.n	8005dec <ai_platform_network_create+0x68>
 8005dda:	2501      	movs	r5, #1
 8005ddc:	e7e2      	b.n	8005da4 <ai_platform_network_create+0x20>
 8005dde:	2510      	movs	r5, #16
 8005de0:	462c      	mov	r4, r5
 8005de2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <ai_platform_network_create+0x80>)
 8005dee:	a801      	add	r0, sp, #4
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f000 fb65 	bl	80064c0 <ai_check_custom_types>
 8005df6:	b110      	cbz	r0, 8005dfe <ai_platform_network_create+0x7a>
 8005df8:	2400      	movs	r4, #0
 8005dfa:	4625      	mov	r5, r4
 8005dfc:	e7d5      	b.n	8005daa <ai_platform_network_create+0x26>
 8005dfe:	2502      	movs	r5, #2
 8005e00:	e7d0      	b.n	8005da4 <ai_platform_network_create+0x20>
 8005e02:	bf00      	nop
 8005e04:	84048403 	.word	0x84048403

08005e08 <ai_platform_network_destroy>:
 8005e08:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <ai_platform_network_destroy+0x20>)
 8005e0a:	b508      	push	{r3, lr}
 8005e0c:	6801      	ldr	r1, [r0, #0]
 8005e0e:	ea01 0c02 	and.w	ip, r1, r2
 8005e12:	438a      	bics	r2, r1
 8005e14:	d102      	bne.n	8005e1c <ai_platform_network_destroy+0x14>
 8005e16:	4561      	cmp	r1, ip
 8005e18:	d001      	beq.n	8005e1e <ai_platform_network_destroy+0x16>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	bd08      	pop	{r3, pc}
 8005e1e:	f000 fbe1 	bl	80065e4 <ai_layers_destroy_all>
 8005e22:	2000      	movs	r0, #0
 8005e24:	bd08      	pop	{r3, pc}
 8005e26:	bf00      	nop
 8005e28:	a1c00100 	.word	0xa1c00100

08005e2c <ai_platform_network_init>:
 8005e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4a5c      	ldr	r2, [pc, #368]	@ (8005fa4 <ai_platform_network_init+0x178>)
 8005e32:	460c      	mov	r4, r1
 8005e34:	6801      	ldr	r1, [r0, #0]
 8005e36:	438a      	bics	r2, r1
 8005e38:	d133      	bne.n	8005ea2 <ai_platform_network_init+0x76>
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	f000 8093 	beq.w	8005f68 <ai_platform_network_init+0x13c>
 8005e42:	f8d4 b000 	ldr.w	fp, [r4]
 8005e46:	4a58      	ldr	r2, [pc, #352]	@ (8005fa8 <ai_platform_network_init+0x17c>)
 8005e48:	4593      	cmp	fp, r2
 8005e4a:	d10f      	bne.n	8005e6c <ai_platform_network_init+0x40>
 8005e4c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8005e50:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8005e54:	4b53      	ldr	r3, [pc, #332]	@ (8005fa4 <ai_platform_network_init+0x178>)
 8005e56:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8005e5a:	0c32      	lsrs	r2, r6, #16
 8005e5c:	4299      	cmp	r1, r3
 8005e5e:	d02c      	beq.n	8005eba <ai_platform_network_init+0x8e>
 8005e60:	2303      	movs	r3, #3
 8005e62:	462c      	mov	r4, r5
 8005e64:	612b      	str	r3, [r5, #16]
 8005e66:	4620      	mov	r0, r4
 8005e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	4627      	mov	r7, r4
 8005e6e:	2101      	movs	r1, #1
 8005e70:	6864      	ldr	r4, [r4, #4]
 8005e72:	4638      	mov	r0, r7
 8005e74:	f107 081c 	add.w	r8, r7, #28
 8005e78:	f7ff fc34 	bl	80056e4 <ai_buffer_get_size>
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4640      	mov	r0, r8
 8005e82:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8005e86:	f7ff fc2d 	bl	80056e4 <ai_buffer_get_size>
 8005e8a:	b976      	cbnz	r6, 8005eaa <ai_platform_network_init+0x7e>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d150      	bne.n	8005f32 <ai_platform_network_init+0x106>
 8005e90:	4680      	mov	r8, r0
 8005e92:	4686      	mov	lr, r0
 8005e94:	4606      	mov	r6, r0
 8005e96:	4607      	mov	r7, r0
 8005e98:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8005e9c:	6829      	ldr	r1, [r5, #0]
 8005e9e:	0436      	lsls	r6, r6, #16
 8005ea0:	e7d8      	b.n	8005e54 <ai_platform_network_init+0x28>
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d13b      	bne.n	8005f26 <ai_platform_network_init+0xfa>
 8005eae:	4680      	mov	r8, r0
 8005eb0:	4686      	mov	lr, r0
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d05e      	beq.n	8005f74 <ai_platform_network_init+0x148>
 8005eb6:	2601      	movs	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <ai_platform_network_init+0x6c>
 8005eba:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8005fa8 <ai_platform_network_init+0x17c>)
 8005ec0:	d33e      	bcc.n	8005f40 <ai_platform_network_init+0x114>
 8005ec2:	459b      	cmp	fp, r3
 8005ec4:	d03e      	beq.n	8005f44 <ai_platform_network_init+0x118>
 8005ec6:	b1a2      	cbz	r2, 8005ef2 <ai_platform_network_init+0xc6>
 8005ec8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005ecc:	f04f 0c00 	mov.w	ip, #0
 8005ed0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005ed4:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8005ed6:	eb07 0b0c 	add.w	fp, r7, ip
 8005eda:	4464      	add	r4, ip
 8005edc:	f10c 0c1c 	add.w	ip, ip, #28
 8005ee0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8005ee4:	45cc      	cmp	ip, r9
 8005ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee8:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8005eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ef0:	d1f0      	bne.n	8005ed4 <ai_platform_network_init+0xa8>
 8005ef2:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8005ef4:	622e      	str	r6, [r5, #32]
 8005ef6:	4553      	cmp	r3, sl
 8005ef8:	d34b      	bcc.n	8005f92 <ai_platform_network_init+0x166>
 8005efa:	f1ba 0f00 	cmp.w	sl, #0
 8005efe:	d025      	beq.n	8005f4c <ai_platform_network_init+0x120>
 8005f00:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8005f04:	2700      	movs	r7, #0
 8005f06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005f0a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8005f0c:	eb08 0607 	add.w	r6, r8, r7
 8005f10:	443c      	add	r4, r7
 8005f12:	371c      	adds	r7, #28
 8005f14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f16:	4557      	cmp	r7, sl
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f22:	d1f2      	bne.n	8005f0a <ai_platform_network_init+0xde>
 8005f24:	e012      	b.n	8005f4c <ai_platform_network_init+0x120>
 8005f26:	f1b9 0f00 	cmp.w	r9, #0
 8005f2a:	d015      	beq.n	8005f58 <ai_platform_network_init+0x12c>
 8005f2c:	f04f 0e01 	mov.w	lr, #1
 8005f30:	e7bf      	b.n	8005eb2 <ai_platform_network_init+0x86>
 8005f32:	f1b9 0f00 	cmp.w	r9, #0
 8005f36:	d00f      	beq.n	8005f58 <ai_platform_network_init+0x12c>
 8005f38:	f04f 0e01 	mov.w	lr, #1
 8005f3c:	4637      	mov	r7, r6
 8005f3e:	e7ab      	b.n	8005e98 <ai_platform_network_init+0x6c>
 8005f40:	459b      	cmp	fp, r3
 8005f42:	d11e      	bne.n	8005f82 <ai_platform_network_init+0x156>
 8005f44:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8005f48:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8005f52:	f000 fadd 	bl	8006510 <ai_layers_init_all>
 8005f56:	e783      	b.n	8005e60 <ai_platform_network_init+0x34>
 8005f58:	2213      	movs	r2, #19
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	f105 000c 	add.w	r0, r5, #12
 8005f60:	2400      	movs	r4, #0
 8005f62:	f000 faa1 	bl	80064a8 <core_set_error>
 8005f66:	e77e      	b.n	8005e66 <ai_platform_network_init+0x3a>
 8005f68:	2211      	movs	r2, #17
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	300c      	adds	r0, #12
 8005f6e:	f000 fa9b 	bl	80064a8 <core_set_error>
 8005f72:	e778      	b.n	8005e66 <ai_platform_network_init+0x3a>
 8005f74:	2212      	movs	r2, #18
 8005f76:	2110      	movs	r1, #16
 8005f78:	f105 000c 	add.w	r0, r5, #12
 8005f7c:	f000 fa94 	bl	80064a8 <core_set_error>
 8005f80:	e771      	b.n	8005e66 <ai_platform_network_init+0x3a>
 8005f82:	2212      	movs	r2, #18
 8005f84:	2116      	movs	r1, #22
 8005f86:	f105 000c 	add.w	r0, r5, #12
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	f000 fa8c 	bl	80064a8 <core_set_error>
 8005f90:	e769      	b.n	8005e66 <ai_platform_network_init+0x3a>
 8005f92:	2213      	movs	r2, #19
 8005f94:	2116      	movs	r1, #22
 8005f96:	f105 000c 	add.w	r0, r5, #12
 8005f9a:	2400      	movs	r4, #0
 8005f9c:	f000 fa84 	bl	80064a8 <core_set_error>
 8005fa0:	e761      	b.n	8005e66 <ai_platform_network_init+0x3a>
 8005fa2:	bf00      	nop
 8005fa4:	a1c00100 	.word	0xa1c00100
 8005fa8:	a1facade 	.word	0xa1facade

08005fac <ai_platform_network_post_init>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4b16      	ldr	r3, [pc, #88]	@ (8006008 <ai_platform_network_post_init+0x5c>)
 8005fb0:	6802      	ldr	r2, [r0, #0]
 8005fb2:	ea02 0103 	and.w	r1, r2, r3
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	d108      	bne.n	8005fcc <ai_platform_network_post_init+0x20>
 8005fba:	6903      	ldr	r3, [r0, #16]
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	f013 0502 	ands.w	r5, r3, #2
 8005fc2:	d005      	beq.n	8005fd0 <ai_platform_network_post_init+0x24>
 8005fc4:	428a      	cmp	r2, r1
 8005fc6:	d00a      	beq.n	8005fde <ai_platform_network_post_init+0x32>
 8005fc8:	2001      	movs	r0, #1
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	2000      	movs	r0, #0
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	2111      	movs	r1, #17
 8005fd4:	300c      	adds	r0, #12
 8005fd6:	f000 fa67 	bl	80064a8 <core_set_error>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
 8005fde:	f000 faa5 	bl	800652c <ai_layers_post_init_all>
 8005fe2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ef      	beq.n	8005fc8 <ai_platform_network_post_init+0x1c>
 8005fe8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005fea:	e008      	b.n	8005ffe <ai_platform_network_post_init+0x52>
 8005fec:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8005ff0:	4798      	blx	r3
 8005ff2:	692b      	ldr	r3, [r5, #16]
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	d0e6      	beq.n	8005fc8 <ai_platform_network_post_init+0x1c>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0e4      	beq.n	8005fc8 <ai_platform_network_post_init+0x1c>
 8005ffe:	4629      	mov	r1, r5
 8006000:	2000      	movs	r0, #0
 8006002:	2d00      	cmp	r5, #0
 8006004:	d1f2      	bne.n	8005fec <ai_platform_network_post_init+0x40>
 8006006:	e7df      	b.n	8005fc8 <ai_platform_network_post_init+0x1c>
 8006008:	a1c00100 	.word	0xa1c00100

0800600c <ai_platform_network_process>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b085      	sub	sp, #20
 8006012:	4bb7      	ldr	r3, [pc, #732]	@ (80062f0 <ai_platform_network_process+0x2e4>)
 8006014:	9202      	str	r2, [sp, #8]
 8006016:	6802      	ldr	r2, [r0, #0]
 8006018:	4393      	bics	r3, r2
 800601a:	f040 8142 	bne.w	80062a2 <ai_platform_network_process+0x296>
 800601e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006020:	4605      	mov	r5, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8126 	beq.w	8006274 <ai_platform_network_process+0x268>
 8006028:	6903      	ldr	r3, [r0, #16]
 800602a:	2200      	movs	r2, #0
 800602c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	6182      	str	r2, [r0, #24]
 8006036:	2b03      	cmp	r3, #3
 8006038:	f040 8122 	bne.w	8006280 <ai_platform_network_process+0x274>
 800603c:	2900      	cmp	r1, #0
 800603e:	f000 8136 	beq.w	80062ae <ai_platform_network_process+0x2a2>
 8006042:	fab8 f788 	clz	r7, r8
 8006046:	097f      	lsrs	r7, r7, #5
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	f000 812f 	beq.w	80062ae <ai_platform_network_process+0x2a2>
 8006050:	f8b8 3000 	ldrh.w	r3, [r8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 812a 	beq.w	80062ae <ai_platform_network_process+0x2a2>
 800605a:	698b      	ldr	r3, [r1, #24]
 800605c:	460e      	mov	r6, r1
 800605e:	9003      	str	r0, [sp, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d072      	beq.n	8006152 <ai_platform_network_process+0x146>
 800606c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006070:	2c00      	cmp	r4, #0
 8006072:	d06e      	beq.n	8006152 <ai_platform_network_process+0x146>
 8006074:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006078:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800607c:	f8d3 a000 	ldr.w	sl, [r3]
 8006080:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006084:	f000 8112 	beq.w	80062ac <ai_platform_network_process+0x2a0>
 8006088:	69a3      	ldr	r3, [r4, #24]
 800608a:	2101      	movs	r1, #1
 800608c:	4630      	mov	r0, r6
 800608e:	685d      	ldr	r5, [r3, #4]
 8006090:	f7ff fb28 	bl	80056e4 <ai_buffer_get_size>
 8006094:	4285      	cmp	r5, r0
 8006096:	f0c0 8115 	bcc.w	80062c4 <ai_platform_network_process+0x2b8>
 800609a:	68e0      	ldr	r0, [r4, #12]
 800609c:	69b1      	ldr	r1, [r6, #24]
 800609e:	68c2      	ldr	r2, [r0, #12]
 80060a0:	68cb      	ldr	r3, [r1, #12]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f040 810e 	bne.w	80062c4 <ai_platform_network_process+0x2b8>
 80060a8:	6882      	ldr	r2, [r0, #8]
 80060aa:	688b      	ldr	r3, [r1, #8]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f040 8109 	bne.w	80062c4 <ai_platform_network_process+0x2b8>
 80060b2:	6842      	ldr	r2, [r0, #4]
 80060b4:	684b      	ldr	r3, [r1, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	f040 8104 	bne.w	80062c4 <ai_platform_network_process+0x2b8>
 80060bc:	69a3      	ldr	r3, [r4, #24]
 80060be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060c2:	f002 fa6f 	bl	80085a4 <ai_array_get_data_byte_size>
 80060c6:	4605      	mov	r5, r0
 80060c8:	4620      	mov	r0, r4
 80060ca:	f002 fa95 	bl	80085f8 <get_tensor_byte_size>
 80060ce:	4285      	cmp	r5, r0
 80060d0:	f0c0 80f8 	bcc.w	80062c4 <ai_platform_network_process+0x2b8>
 80060d4:	69a3      	ldr	r3, [r4, #24]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	f002 f9cc 	bl	8008474 <ai_array_to_buffer_fmt>
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	4058      	eors	r0, r3
 80060e0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80060e4:	f040 81a4 	bne.w	8006430 <ai_platform_network_process+0x424>
 80060e8:	6873      	ldr	r3, [r6, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80de 	beq.w	80062ac <ai_platform_network_process+0x2a0>
 80060f0:	69b3      	ldr	r3, [r6, #24]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 81a4 	beq.w	8006442 <ai_platform_network_process+0x436>
 80060fa:	9a01      	ldr	r2, [sp, #4]
 80060fc:	4620      	mov	r0, r4
 80060fe:	3701      	adds	r7, #1
 8006100:	361c      	adds	r6, #28
 8006102:	429a      	cmp	r2, r3
 8006104:	bf38      	it	cc
 8006106:	461a      	movcc	r2, r3
 8006108:	9201      	str	r2, [sp, #4]
 800610a:	f002 fa75 	bl	80085f8 <get_tensor_byte_size>
 800610e:	f8c9 0008 	str.w	r0, [r9, #8]
 8006112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	fb00 f303 	mul.w	r3, r0, r3
 800611c:	f8c9 300c 	str.w	r3, [r9, #12]
 8006120:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006124:	440b      	add	r3, r1
 8006126:	f8c9 1004 	str.w	r1, [r9, #4]
 800612a:	f84a 300b 	str.w	r3, [sl, fp]
 800612e:	69a0      	ldr	r0, [r4, #24]
 8006130:	6803      	ldr	r3, [r0, #0]
 8006132:	009a      	lsls	r2, r3, #2
 8006134:	f100 80af 	bmi.w	8006296 <ai_platform_network_process+0x28a>
 8006138:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	4419      	add	r1, r3
 8006140:	6081      	str	r1, [r0, #8]
 8006142:	69a3      	ldr	r3, [r4, #24]
 8006144:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	f8b8 3000 	ldrh.w	r3, [r8]
 800614e:	42bb      	cmp	r3, r7
 8006150:	d888      	bhi.n	8006064 <ai_platform_network_process+0x58>
 8006152:	9d03      	ldr	r5, [sp, #12]
 8006154:	9b02      	ldr	r3, [sp, #8]
 8006156:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 817b 	beq.w	8006454 <ai_platform_network_process+0x448>
 800615e:	2a01      	cmp	r2, #1
 8006160:	f240 80bd 	bls.w	80062de <ai_platform_network_process+0x2d2>
 8006164:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8006168:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80b6 	beq.w	80062de <ai_platform_network_process+0x2d2>
 8006172:	2700      	movs	r7, #0
 8006174:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006178:	9502      	str	r5, [sp, #8]
 800617a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80bd 	beq.w	80062fe <ai_platform_network_process+0x2f2>
 8006184:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006188:	2e00      	cmp	r6, #0
 800618a:	f000 80b8 	beq.w	80062fe <ai_platform_network_process+0x2f2>
 800618e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006192:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006196:	681c      	ldr	r4, [r3, #0]
 8006198:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800619c:	f000 8170 	beq.w	8006480 <ai_platform_network_process+0x474>
 80061a0:	69b3      	ldr	r3, [r6, #24]
 80061a2:	2101      	movs	r1, #1
 80061a4:	4658      	mov	r0, fp
 80061a6:	685d      	ldr	r5, [r3, #4]
 80061a8:	f7ff fa9c 	bl	80056e4 <ai_buffer_get_size>
 80061ac:	4285      	cmp	r5, r0
 80061ae:	f0c0 8095 	bcc.w	80062dc <ai_platform_network_process+0x2d0>
 80061b2:	68f0      	ldr	r0, [r6, #12]
 80061b4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80061b8:	68c2      	ldr	r2, [r0, #12]
 80061ba:	68cb      	ldr	r3, [r1, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	f040 808d 	bne.w	80062dc <ai_platform_network_process+0x2d0>
 80061c2:	6882      	ldr	r2, [r0, #8]
 80061c4:	688b      	ldr	r3, [r1, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	f040 8088 	bne.w	80062dc <ai_platform_network_process+0x2d0>
 80061cc:	6842      	ldr	r2, [r0, #4]
 80061ce:	684b      	ldr	r3, [r1, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	f040 8083 	bne.w	80062dc <ai_platform_network_process+0x2d0>
 80061d6:	69b3      	ldr	r3, [r6, #24]
 80061d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061dc:	f002 f9e2 	bl	80085a4 <ai_array_get_data_byte_size>
 80061e0:	9003      	str	r0, [sp, #12]
 80061e2:	4630      	mov	r0, r6
 80061e4:	f002 fa08 	bl	80085f8 <get_tensor_byte_size>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4283      	cmp	r3, r0
 80061ec:	d376      	bcc.n	80062dc <ai_platform_network_process+0x2d0>
 80061ee:	69b3      	ldr	r3, [r6, #24]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f002 f93f 	bl	8008474 <ai_array_to_buffer_fmt>
 80061f6:	f8db 3000 	ldr.w	r3, [fp]
 80061fa:	4058      	eors	r0, r3
 80061fc:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006200:	f040 812c 	bne.w	800645c <ai_platform_network_process+0x450>
 8006204:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8139 	beq.w	8006480 <ai_platform_network_process+0x474>
 800620e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 812a 	beq.w	800646e <ai_platform_network_process+0x462>
 800621a:	9a01      	ldr	r2, [sp, #4]
 800621c:	4630      	mov	r0, r6
 800621e:	3701      	adds	r7, #1
 8006220:	f10b 0b1c 	add.w	fp, fp, #28
 8006224:	429a      	cmp	r2, r3
 8006226:	bf38      	it	cc
 8006228:	461a      	movcc	r2, r3
 800622a:	9201      	str	r2, [sp, #4]
 800622c:	f002 f9e4 	bl	80085f8 <get_tensor_byte_size>
 8006230:	f8c8 0008 	str.w	r0, [r8, #8]
 8006234:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	fb00 f303 	mul.w	r3, r0, r3
 800623e:	f8c8 300c 	str.w	r3, [r8, #12]
 8006242:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8006246:	440b      	add	r3, r1
 8006248:	f8c8 1004 	str.w	r1, [r8, #4]
 800624c:	f844 300a 	str.w	r3, [r4, sl]
 8006250:	69b0      	ldr	r0, [r6, #24]
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	d44d      	bmi.n	80062f4 <ai_platform_network_process+0x2e8>
 8006258:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	4419      	add	r1, r3
 8006260:	6081      	str	r1, [r0, #8]
 8006262:	69b3      	ldr	r3, [r6, #24]
 8006264:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006268:	60da      	str	r2, [r3, #12]
 800626a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800626e:	42bb      	cmp	r3, r7
 8006270:	d883      	bhi.n	800617a <ai_platform_network_process+0x16e>
 8006272:	e044      	b.n	80062fe <ai_platform_network_process+0x2f2>
 8006274:	6902      	ldr	r2, [r0, #16]
 8006276:	6183      	str	r3, [r0, #24]
 8006278:	f002 0203 	and.w	r2, r2, #3
 800627c:	2a03      	cmp	r2, #3
 800627e:	d016      	beq.n	80062ae <ai_platform_network_process+0x2a2>
 8006280:	2230      	movs	r2, #48	@ 0x30
 8006282:	2111      	movs	r1, #17
 8006284:	f105 000c 	add.w	r0, r5, #12
 8006288:	2400      	movs	r4, #0
 800628a:	f000 f90d 	bl	80064a8 <core_set_error>
 800628e:	4620      	mov	r0, r4
 8006290:	b005      	add	sp, #20
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	f8b8 3000 	ldrh.w	r3, [r8]
 800629a:	429f      	cmp	r7, r3
 800629c:	f4ff aee2 	bcc.w	8006064 <ai_platform_network_process+0x58>
 80062a0:	e757      	b.n	8006152 <ai_platform_network_process+0x146>
 80062a2:	2400      	movs	r4, #0
 80062a4:	4620      	mov	r0, r4
 80062a6:	b005      	add	sp, #20
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	9d03      	ldr	r5, [sp, #12]
 80062ae:	2400      	movs	r4, #0
 80062b0:	2217      	movs	r2, #23
 80062b2:	2112      	movs	r1, #18
 80062b4:	f105 000c 	add.w	r0, r5, #12
 80062b8:	f000 f8f6 	bl	80064a8 <core_set_error>
 80062bc:	4620      	mov	r0, r4
 80062be:	b005      	add	sp, #20
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	9d03      	ldr	r5, [sp, #12]
 80062c6:	2400      	movs	r4, #0
 80062c8:	2218      	movs	r2, #24
 80062ca:	2112      	movs	r1, #18
 80062cc:	f105 000c 	add.w	r0, r5, #12
 80062d0:	f000 f8ea 	bl	80064a8 <core_set_error>
 80062d4:	4620      	mov	r0, r4
 80062d6:	b005      	add	sp, #20
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	9d02      	ldr	r5, [sp, #8]
 80062de:	2218      	movs	r2, #24
 80062e0:	2113      	movs	r1, #19
 80062e2:	f105 000c 	add.w	r0, r5, #12
 80062e6:	2400      	movs	r4, #0
 80062e8:	f000 f8de 	bl	80064a8 <core_set_error>
 80062ec:	e7cf      	b.n	800628e <ai_platform_network_process+0x282>
 80062ee:	bf00      	nop
 80062f0:	a1c00100 	.word	0xa1c00100
 80062f4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80062f8:	429f      	cmp	r7, r3
 80062fa:	f4ff af3e 	bcc.w	800617a <ai_platform_network_process+0x16e>
 80062fe:	9d02      	ldr	r5, [sp, #8]
 8006300:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006304:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006306:	832b      	strh	r3, [r5, #24]
 8006308:	2a00      	cmp	r2, #0
 800630a:	f040 808b 	bne.w	8006424 <ai_platform_network_process+0x418>
 800630e:	4616      	mov	r6, r2
 8006310:	4617      	mov	r7, r2
 8006312:	8b6c      	ldrh	r4, [r5, #26]
 8006314:	429c      	cmp	r4, r3
 8006316:	d2ba      	bcs.n	800628e <ai_platform_network_process+0x282>
 8006318:	46ab      	mov	fp, r5
 800631a:	2e00      	cmp	r6, #0
 800631c:	d030      	beq.n	8006380 <ai_platform_network_process+0x374>
 800631e:	f04f 0800 	mov.w	r8, #0
 8006322:	e014      	b.n	800634e <ai_platform_network_process+0x342>
 8006324:	6882      	ldr	r2, [r0, #8]
 8006326:	68c5      	ldr	r5, [r0, #12]
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	1b52      	subs	r2, r2, r5
 800632c:	4413      	add	r3, r2
 800632e:	6083      	str	r3, [r0, #8]
 8006330:	698b      	ldr	r3, [r1, #24]
 8006332:	6862      	ldr	r2, [r4, #4]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	f859 200a 	ldr.w	r2, [r9, sl]
 800633a:	f108 0801 	add.w	r8, r8, #1
 800633e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006342:	440b      	add	r3, r1
 8006344:	4293      	cmp	r3, r2
 8006346:	d301      	bcc.n	800634c <ai_platform_network_process+0x340>
 8006348:	68e3      	ldr	r3, [r4, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	8833      	ldrh	r3, [r6, #0]
 8006350:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006354:	4543      	cmp	r3, r8
 8006356:	d913      	bls.n	8006380 <ai_platform_network_process+0x374>
 8006358:	6873      	ldr	r3, [r6, #4]
 800635a:	b18b      	cbz	r3, 8006380 <ai_platform_network_process+0x374>
 800635c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006360:	b171      	cbz	r1, 8006380 <ai_platform_network_process+0x374>
 8006362:	6988      	ldr	r0, [r1, #24]
 8006364:	68b2      	ldr	r2, [r6, #8]
 8006366:	6803      	ldr	r3, [r0, #0]
 8006368:	f8d2 9000 	ldr.w	r9, [r2]
 800636c:	009d      	lsls	r5, r3, #2
 800636e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006372:	d5d7      	bpl.n	8006324 <ai_platform_network_process+0x318>
 8006374:	6881      	ldr	r1, [r0, #8]
 8006376:	68a2      	ldr	r2, [r4, #8]
 8006378:	6860      	ldr	r0, [r4, #4]
 800637a:	f001 fff3 	bl	8008364 <st_int8_copy>
 800637e:	e7da      	b.n	8006336 <ai_platform_network_process+0x32a>
 8006380:	4658      	mov	r0, fp
 8006382:	f000 f8e7 	bl	8006554 <ai_layers_forward_all>
 8006386:	2f00      	cmp	r7, #0
 8006388:	d03d      	beq.n	8006406 <ai_platform_network_process+0x3fa>
 800638a:	2400      	movs	r4, #0
 800638c:	e016      	b.n	80063bc <ai_platform_network_process+0x3b0>
 800638e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006392:	f859 100a 	ldr.w	r1, [r9, sl]
 8006396:	4413      	add	r3, r2
 8006398:	428b      	cmp	r3, r1
 800639a:	d302      	bcc.n	80063a2 <ai_platform_network_process+0x396>
 800639c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063a0:	1acb      	subs	r3, r1, r3
 80063a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80063a6:	6981      	ldr	r1, [r0, #24]
 80063a8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80063ac:	1b52      	subs	r2, r2, r5
 80063ae:	4413      	add	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
 80063b2:	6983      	ldr	r3, [r0, #24]
 80063b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	3401      	adds	r4, #1
 80063bc:	883b      	ldrh	r3, [r7, #0]
 80063be:	42a3      	cmp	r3, r4
 80063c0:	d921      	bls.n	8006406 <ai_platform_network_process+0x3fa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	b1fb      	cbz	r3, 8006406 <ai_platform_network_process+0x3fa>
 80063c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80063ca:	b1e0      	cbz	r0, 8006406 <ai_platform_network_process+0x3fa>
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80063d2:	6983      	ldr	r3, [r0, #24]
 80063d4:	f8d2 9000 	ldr.w	r9, [r2]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80063de:	0092      	lsls	r2, r2, #2
 80063e0:	d5d5      	bpl.n	800638e <ai_platform_network_process+0x382>
 80063e2:	6898      	ldr	r0, [r3, #8]
 80063e4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80063e8:	f001 ffbc 	bl	8008364 <st_int8_copy>
 80063ec:	f859 200a 	ldr.w	r2, [r9, sl]
 80063f0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80063f4:	440b      	add	r3, r1
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d302      	bcc.n	8006400 <ai_platform_network_process+0x3f4>
 80063fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f8c8 3004 	str.w	r3, [r8, #4]
 8006404:	e7d9      	b.n	80063ba <ai_platform_network_process+0x3ae>
 8006406:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800640a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800640e:	3401      	adds	r4, #1
 8006410:	b2a4      	uxth	r4, r4
 8006412:	42a3      	cmp	r3, r4
 8006414:	f8ab 401a 	strh.w	r4, [fp, #26]
 8006418:	f63f af7f 	bhi.w	800631a <ai_platform_network_process+0x30e>
 800641c:	4620      	mov	r0, r4
 800641e:	b005      	add	sp, #20
 8006420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	2a01      	cmp	r2, #1
 8006426:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8006428:	d033      	beq.n	8006492 <ai_platform_network_process+0x486>
 800642a:	f106 070c 	add.w	r7, r6, #12
 800642e:	e770      	b.n	8006312 <ai_platform_network_process+0x306>
 8006430:	9d03      	ldr	r5, [sp, #12]
 8006432:	2219      	movs	r2, #25
 8006434:	2112      	movs	r1, #18
 8006436:	2400      	movs	r4, #0
 8006438:	f105 000c 	add.w	r0, r5, #12
 800643c:	f000 f834 	bl	80064a8 <core_set_error>
 8006440:	e725      	b.n	800628e <ai_platform_network_process+0x282>
 8006442:	9d03      	ldr	r5, [sp, #12]
 8006444:	4604      	mov	r4, r0
 8006446:	2221      	movs	r2, #33	@ 0x21
 8006448:	2112      	movs	r1, #18
 800644a:	f105 000c 	add.w	r0, r5, #12
 800644e:	f000 f82b 	bl	80064a8 <core_set_error>
 8006452:	e71c      	b.n	800628e <ai_platform_network_process+0x282>
 8006454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006458:	832b      	strh	r3, [r5, #24]
 800645a:	e755      	b.n	8006308 <ai_platform_network_process+0x2fc>
 800645c:	9d02      	ldr	r5, [sp, #8]
 800645e:	2219      	movs	r2, #25
 8006460:	2113      	movs	r1, #19
 8006462:	2400      	movs	r4, #0
 8006464:	f105 000c 	add.w	r0, r5, #12
 8006468:	f000 f81e 	bl	80064a8 <core_set_error>
 800646c:	e70f      	b.n	800628e <ai_platform_network_process+0x282>
 800646e:	9d02      	ldr	r5, [sp, #8]
 8006470:	4604      	mov	r4, r0
 8006472:	2221      	movs	r2, #33	@ 0x21
 8006474:	2113      	movs	r1, #19
 8006476:	f105 000c 	add.w	r0, r5, #12
 800647a:	f000 f815 	bl	80064a8 <core_set_error>
 800647e:	e706      	b.n	800628e <ai_platform_network_process+0x282>
 8006480:	9d02      	ldr	r5, [sp, #8]
 8006482:	2217      	movs	r2, #23
 8006484:	2113      	movs	r1, #19
 8006486:	2400      	movs	r4, #0
 8006488:	f105 000c 	add.w	r0, r5, #12
 800648c:	f000 f80c 	bl	80064a8 <core_set_error>
 8006490:	e6fd      	b.n	800628e <ai_platform_network_process+0x282>
 8006492:	2700      	movs	r7, #0
 8006494:	e73d      	b.n	8006312 <ai_platform_network_process+0x306>
 8006496:	bf00      	nop

08006498 <core_init>:
 8006498:	2001      	movs	r0, #1
 800649a:	4770      	bx	lr

0800649c <core_get_error>:
 800649c:	4603      	mov	r3, r0
 800649e:	2200      	movs	r2, #0
 80064a0:	6800      	ldr	r0, [r0, #0]
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <core_set_error>:
 80064a8:	4603      	mov	r3, r0
 80064aa:	7800      	ldrb	r0, [r0, #0]
 80064ac:	b108      	cbz	r0, 80064b2 <core_set_error+0xa>
 80064ae:	2000      	movs	r0, #0
 80064b0:	4770      	bx	lr
 80064b2:	7019      	strb	r1, [r3, #0]
 80064b4:	2001      	movs	r0, #1
 80064b6:	6819      	ldr	r1, [r3, #0]
 80064b8:	f362 211f 	bfi	r1, r2, #8, #24
 80064bc:	6019      	str	r1, [r3, #0]
 80064be:	4770      	bx	lr

080064c0 <ai_check_custom_types>:
 80064c0:	b082      	sub	sp, #8
 80064c2:	4b12      	ldr	r3, [pc, #72]	@ (800650c <ai_check_custom_types+0x4c>)
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	b118      	cbz	r0, 80064d0 <ai_check_custom_types+0x10>
 80064c8:	7803      	ldrb	r3, [r0, #0]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d002      	beq.n	80064d4 <ai_check_custom_types+0x14>
 80064ce:	2000      	movs	r0, #0
 80064d0:	b002      	add	sp, #8
 80064d2:	4770      	bx	lr
 80064d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <ai_check_custom_types+0x26>
 80064dc:	2001      	movs	r0, #1
 80064de:	f080 0001 	eor.w	r0, r0, #1
 80064e2:	b002      	add	sp, #8
 80064e4:	4770      	bx	lr
 80064e6:	7842      	ldrb	r2, [r0, #1]
 80064e8:	3001      	adds	r0, #1
 80064ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d1f4      	bne.n	80064dc <ai_check_custom_types+0x1c>
 80064f2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80064f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d1ee      	bne.n	80064dc <ai_check_custom_types+0x1c>
 80064fe:	7842      	ldrb	r2, [r0, #1]
 8006500:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006504:	429a      	cmp	r2, r3
 8006506:	d1e9      	bne.n	80064dc <ai_check_custom_types+0x1c>
 8006508:	2000      	movs	r0, #0
 800650a:	e7e8      	b.n	80064de <ai_check_custom_types+0x1e>
 800650c:	84048403 	.word	0x84048403

08006510 <ai_layers_init_all>:
 8006510:	2100      	movs	r1, #0
 8006512:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006514:	b13b      	cbz	r3, 8006526 <ai_layers_init_all+0x16>
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	3101      	adds	r1, #1
 800651a:	60d8      	str	r0, [r3, #12]
 800651c:	429a      	cmp	r2, r3
 800651e:	4613      	mov	r3, r2
 8006520:	d001      	beq.n	8006526 <ai_layers_init_all+0x16>
 8006522:	2a00      	cmp	r2, #0
 8006524:	d1f6      	bne.n	8006514 <ai_layers_init_all+0x4>
 8006526:	4608      	mov	r0, r1
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <ai_layers_post_init_all>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	2500      	movs	r5, #0
 8006530:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006532:	b16c      	cbz	r4, 8006550 <ai_layers_post_init_all+0x24>
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	07db      	lsls	r3, r3, #31
 8006538:	d504      	bpl.n	8006544 <ai_layers_post_init_all+0x18>
 800653a:	6a23      	ldr	r3, [r4, #32]
 800653c:	4620      	mov	r0, r4
 800653e:	b10b      	cbz	r3, 8006544 <ai_layers_post_init_all+0x18>
 8006540:	3501      	adds	r5, #1
 8006542:	4798      	blx	r3
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	42a3      	cmp	r3, r4
 8006548:	461c      	mov	r4, r3
 800654a:	d001      	beq.n	8006550 <ai_layers_post_init_all+0x24>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <ai_layers_post_init_all+0x6>
 8006550:	4628      	mov	r0, r5
 8006552:	bd38      	pop	{r3, r4, r5, pc}

08006554 <ai_layers_forward_all>:
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800655c:	4604      	mov	r4, r0
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d02a      	beq.n	80065ba <ai_layers_forward_all+0x66>
 8006564:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006566:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8006568:	b319      	cbz	r1, 80065b2 <ai_layers_forward_all+0x5e>
 800656a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800656c:	2001      	movs	r0, #1
 800656e:	47c0      	blx	r8
 8006570:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8006572:	b1f6      	cbz	r6, 80065b2 <ai_layers_forward_all+0x5e>
 8006574:	2700      	movs	r7, #0
 8006576:	4631      	mov	r1, r6
 8006578:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800657a:	2002      	movs	r0, #2
 800657c:	47c0      	blx	r8
 800657e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006580:	4628      	mov	r0, r5
 8006582:	696b      	ldr	r3, [r5, #20]
 8006584:	4798      	blx	r3
 8006586:	692e      	ldr	r6, [r5, #16]
 8006588:	2003      	movs	r0, #3
 800658a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800658c:	42b5      	cmp	r5, r6
 800658e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006590:	d007      	beq.n	80065a2 <ai_layers_forward_all+0x4e>
 8006592:	47c0      	blx	r8
 8006594:	3701      	adds	r7, #1
 8006596:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006598:	2e00      	cmp	r6, #0
 800659a:	d1ec      	bne.n	8006576 <ai_layers_forward_all+0x22>
 800659c:	4638      	mov	r0, r7
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a2:	2003      	movs	r0, #3
 80065a4:	3701      	adds	r7, #1
 80065a6:	47c0      	blx	r8
 80065a8:	2300      	movs	r3, #0
 80065aa:	4638      	mov	r0, r7
 80065ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b2:	2700      	movs	r7, #0
 80065b4:	4638      	mov	r0, r7
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80065bc:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80065be:	2d00      	cmp	r5, #0
 80065c0:	d0f7      	beq.n	80065b2 <ai_layers_forward_all+0x5e>
 80065c2:	4647      	mov	r7, r8
 80065c4:	696b      	ldr	r3, [r5, #20]
 80065c6:	4628      	mov	r0, r5
 80065c8:	4798      	blx	r3
 80065ca:	462b      	mov	r3, r5
 80065cc:	692d      	ldr	r5, [r5, #16]
 80065ce:	429d      	cmp	r5, r3
 80065d0:	d004      	beq.n	80065dc <ai_layers_forward_all+0x88>
 80065d2:	3701      	adds	r7, #1
 80065d4:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	d1f4      	bne.n	80065c4 <ai_layers_forward_all+0x70>
 80065da:	e7df      	b.n	800659c <ai_layers_forward_all+0x48>
 80065dc:	2300      	movs	r3, #0
 80065de:	3701      	adds	r7, #1
 80065e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80065e2:	e7db      	b.n	800659c <ai_layers_forward_all+0x48>

080065e4 <ai_layers_destroy_all>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	2500      	movs	r5, #0
 80065e8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80065ea:	b16c      	cbz	r4, 8006608 <ai_layers_destroy_all+0x24>
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	075b      	lsls	r3, r3, #29
 80065f0:	d504      	bpl.n	80065fc <ai_layers_destroy_all+0x18>
 80065f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80065f4:	4620      	mov	r0, r4
 80065f6:	b10b      	cbz	r3, 80065fc <ai_layers_destroy_all+0x18>
 80065f8:	3501      	adds	r5, #1
 80065fa:	4798      	blx	r3
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	42a3      	cmp	r3, r4
 8006600:	461c      	mov	r4, r3
 8006602:	d001      	beq.n	8006608 <ai_layers_destroy_all+0x24>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f0      	bne.n	80065ea <ai_layers_destroy_all+0x6>
 8006608:	4628      	mov	r0, r5
 800660a:	bd38      	pop	{r3, r4, r5, pc}

0800660c <forward_conv2d_if32of32wf32_nl_pool>:
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8006614:	b0c3      	sub	sp, #268	@ 0x10c
 8006616:	f8bc 3000 	ldrh.w	r3, [ip]
 800661a:	9321      	str	r3, [sp, #132]	@ 0x84
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 813c 	beq.w	800689a <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 8006622:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006626:	4604      	mov	r4, r0
 8006628:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800662c:	f1bb 0f00 	cmp.w	fp, #0
 8006630:	d001      	beq.n	8006636 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8006632:	f8db b000 	ldr.w	fp, [fp]
 8006636:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006638:	2a01      	cmp	r2, #1
 800663a:	f000 812d 	beq.w	8006898 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800663e:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8006642:	f1ba 0f00 	cmp.w	sl, #0
 8006646:	d001      	beq.n	800664c <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8006648:	f8da a000 	ldr.w	sl, [sl]
 800664c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800664e:	2a02      	cmp	r2, #2
 8006650:	f000 8122 	beq.w	8006898 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8006654:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8006658:	8b1b      	ldrh	r3, [r3, #24]
 800665a:	f1b8 0f00 	cmp.w	r8, #0
 800665e:	f000 812f 	beq.w	80068c0 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 8006662:	2b01      	cmp	r3, #1
 8006664:	f8d8 2000 	ldr.w	r2, [r8]
 8006668:	f240 8130 	bls.w	80068cc <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 800666c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006670:	9340      	str	r3, [sp, #256]	@ 0x100
 8006672:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8006676:	f8db 100c 	ldr.w	r1, [fp, #12]
 800667a:	f8da 000c 	ldr.w	r0, [sl, #12]
 800667e:	9122      	str	r1, [sp, #136]	@ 0x88
 8006680:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8006684:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8006688:	9130      	str	r1, [sp, #192]	@ 0xc0
 800668a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800668e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006690:	9131      	str	r1, [sp, #196]	@ 0xc4
 8006692:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8006696:	f8de 7004 	ldr.w	r7, [lr, #4]
 800669a:	9132      	str	r1, [sp, #200]	@ 0xc8
 800669c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80066a0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80066a2:	9133      	str	r1, [sp, #204]	@ 0xcc
 80066a4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80066a8:	681e      	ldr	r6, [r3, #0]
 80066aa:	9123      	str	r1, [sp, #140]	@ 0x8c
 80066ac:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80066b0:	972a      	str	r7, [sp, #168]	@ 0xa8
 80066b2:	9124      	str	r1, [sp, #144]	@ 0x90
 80066b4:	f8de 7008 	ldr.w	r7, [lr, #8]
 80066b8:	9628      	str	r6, [sp, #160]	@ 0xa0
 80066ba:	972f      	str	r7, [sp, #188]	@ 0xbc
 80066bc:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 80066c0:	fa1f f189 	uxth.w	r1, r9
 80066c4:	9527      	str	r5, [sp, #156]	@ 0x9c
 80066c6:	685d      	ldr	r5, [r3, #4]
 80066c8:	9134      	str	r1, [sp, #208]	@ 0xd0
 80066ca:	9529      	str	r5, [sp, #164]	@ 0xa4
 80066cc:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 80066d0:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 80066d4:	9135      	str	r1, [sp, #212]	@ 0xd4
 80066d6:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 80066da:	9136      	str	r1, [sp, #216]	@ 0xd8
 80066dc:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 80066e0:	9137      	str	r1, [sp, #220]	@ 0xdc
 80066e2:	6899      	ldr	r1, [r3, #8]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	912d      	str	r1, [sp, #180]	@ 0xb4
 80066e8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80066ea:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80066ee:	9338      	str	r3, [sp, #224]	@ 0xe0
 80066f0:	b2ab      	uxth	r3, r5
 80066f2:	9339      	str	r3, [sp, #228]	@ 0xe4
 80066f4:	b2b3      	uxth	r3, r6
 80066f6:	933a      	str	r3, [sp, #232]	@ 0xe8
 80066f8:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 80066fc:	9325      	str	r3, [sp, #148]	@ 0x94
 80066fe:	b23b      	sxth	r3, r7
 8006700:	9326      	str	r3, [sp, #152]	@ 0x98
 8006702:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8006706:	933b      	str	r3, [sp, #236]	@ 0xec
 8006708:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800670c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800670e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8006712:	933d      	str	r3, [sp, #244]	@ 0xf4
 8006714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800671a:	933e      	str	r3, [sp, #248]	@ 0xf8
 800671c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800671e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006722:	933f      	str	r3, [sp, #252]	@ 0xfc
 8006724:	6a23      	ldr	r3, [r4, #32]
 8006726:	9322      	str	r3, [sp, #136]	@ 0x88
 8006728:	f1b8 0f00 	cmp.w	r8, #0
 800672c:	f000 80b7 	beq.w	800689e <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8006730:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80ba 	beq.w	80068ae <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 800673a:	9221      	str	r2, [sp, #132]	@ 0x84
 800673c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	9322      	str	r3, [sp, #136]	@ 0x88
 8006744:	f001 ff06 	bl	8008554 <ai_array_get_byte_size>
 8006748:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800674c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800674e:	902c      	str	r0, [sp, #176]	@ 0xb0
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80be 	beq.w	80068d2 <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 8006756:	9241      	str	r2, [sp, #260]	@ 0x104
 8006758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800675c:	f001 fefa 	bl	8008554 <ai_array_get_byte_size>
 8006760:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006764:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006766:	f8bc 3000 	ldrh.w	r3, [ip]
 800676a:	902b      	str	r0, [sp, #172]	@ 0xac
 800676c:	9321      	str	r3, [sp, #132]	@ 0x84
 800676e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006770:	b2ad      	uxth	r5, r5
 8006772:	b2b6      	uxth	r6, r6
 8006774:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8006776:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800677a:	3d01      	subs	r5, #1
 800677c:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 800677e:	3e01      	subs	r6, #1
 8006780:	fa1f f989 	uxth.w	r9, r9
 8006784:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 8006788:	fb15 7508 	smlabb	r5, r5, r8, r7
 800678c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	fa0f f885 	sxth.w	r8, r5
 8006794:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8006796:	f8db 0018 	ldr.w	r0, [fp, #24]
 800679a:	3d01      	subs	r5, #1
 800679c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80067a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a2:	fb16 7605 	smlabb	r6, r6, r5, r7
 80067a6:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80067a8:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	eba5 0508 	sub.w	r5, r5, r8
 80067b0:	b236      	sxth	r6, r6
 80067b2:	f8da 1018 	ldr.w	r1, [sl, #24]
 80067b6:	fa15 f587 	uxtah	r5, r5, r7
 80067ba:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80067bc:	6992      	ldr	r2, [r2, #24]
 80067be:	fa15 f587 	uxtah	r5, r5, r7
 80067c2:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80067c4:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 80067c8:	6880      	ldr	r0, [r0, #8]
 80067ca:	6889      	ldr	r1, [r1, #8]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	fb95 f5f9 	sdiv	r5, r5, r9
 80067d2:	eba7 0906 	sub.w	r9, r7, r6
 80067d6:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 80067d8:	f105 0501 	add.w	r5, r5, #1
 80067dc:	fa19 f987 	uxtah	r9, r9, r7
 80067e0:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 80067e2:	b22d      	sxth	r5, r5
 80067e4:	fa19 f987 	uxtah	r9, r9, r7
 80067e8:	fb99 f9fe 	sdiv	r9, r9, lr
 80067ec:	f109 0e01 	add.w	lr, r9, #1
 80067f0:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 80067f4:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 80067f8:	d94e      	bls.n	8006898 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 80067fa:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80067fe:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8006802:	f1bc 0f00 	cmp.w	ip, #0
 8006806:	d06f      	beq.n	80068e8 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8006808:	f8dc 7000 	ldr.w	r7, [ip]
 800680c:	b10f      	cbz	r7, 8006812 <forward_conv2d_if32of32wf32_nl_pool+0x206>
 800680e:	69bf      	ldr	r7, [r7, #24]
 8006810:	68bf      	ldr	r7, [r7, #8]
 8006812:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8006814:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006816:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006818:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800681a:	960e      	str	r6, [sp, #56]	@ 0x38
 800681c:	931e      	str	r3, [sp, #120]	@ 0x78
 800681e:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8006820:	931d      	str	r3, [sp, #116]	@ 0x74
 8006822:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8006824:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8006828:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800682a:	fa0f f48e 	sxth.w	r4, lr
 800682e:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8006832:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006834:	9318      	str	r3, [sp, #96]	@ 0x60
 8006836:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8006838:	9317      	str	r3, [sp, #92]	@ 0x5c
 800683a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800683c:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8006840:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8006842:	9312      	str	r3, [sp, #72]	@ 0x48
 8006844:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8006846:	9311      	str	r3, [sp, #68]	@ 0x44
 8006848:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800684a:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 800684e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8006850:	930d      	str	r3, [sp, #52]	@ 0x34
 8006852:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8006854:	930c      	str	r3, [sp, #48]	@ 0x30
 8006856:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8006858:	9414      	str	r4, [sp, #80]	@ 0x50
 800685a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800685c:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800685e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006860:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006862:	9309      	str	r3, [sp, #36]	@ 0x24
 8006864:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006866:	9308      	str	r3, [sp, #32]
 8006868:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800686a:	9307      	str	r3, [sp, #28]
 800686c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800686e:	9306      	str	r3, [sp, #24]
 8006870:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800687a:	9303      	str	r3, [sp, #12]
 800687c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800687e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006882:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006886:	465b      	mov	r3, fp
 8006888:	69a4      	ldr	r4, [r4, #24]
 800688a:	68a4      	ldr	r4, [r4, #8]
 800688c:	9400      	str	r4, [sp, #0]
 800688e:	f000 f98d 	bl	8006bac <forward_lite_conv2d_if32of32wf32_pool>
 8006892:	b043      	add	sp, #268	@ 0x10c
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	2300      	movs	r3, #0
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	deff      	udf	#255	@ 0xff
 800689e:	b10b      	cbz	r3, 80068a4 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80068a4:	2301      	movs	r3, #1
 80068a6:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 80068aa:	932b      	str	r3, [sp, #172]	@ 0xac
 80068ac:	e75f      	b.n	800676e <forward_conv2d_if32of32wf32_nl_pool+0x162>
 80068ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068b0:	b10b      	cbz	r3, 80068b6 <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	9322      	str	r3, [sp, #136]	@ 0x88
 80068b6:	2301      	movs	r3, #1
 80068b8:	2100      	movs	r1, #0
 80068ba:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 80068be:	e756      	b.n	800676e <forward_conv2d_if32of32wf32_nl_pool+0x162>
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d90e      	bls.n	80068e2 <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 80068c4:	4642      	mov	r2, r8
 80068c6:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 80068ca:	e6d4      	b.n	8006676 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 80068cc:	2300      	movs	r3, #0
 80068ce:	9340      	str	r3, [sp, #256]	@ 0x100
 80068d0:	e6cf      	b.n	8006672 <forward_conv2d_if32of32wf32_nl_pool+0x66>
 80068d2:	2301      	movs	r3, #1
 80068d4:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80068d8:	932b      	str	r3, [sp, #172]	@ 0xac
 80068da:	f8bc 3000 	ldrh.w	r3, [ip]
 80068de:	9321      	str	r3, [sp, #132]	@ 0x84
 80068e0:	e745      	b.n	800676e <forward_conv2d_if32of32wf32_nl_pool+0x162>
 80068e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068e6:	deff      	udf	#255	@ 0xff
 80068e8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80068ec:	deff      	udf	#255	@ 0xff
 80068ee:	bf00      	nop

080068f0 <forward_dense>:
 80068f0:	6982      	ldr	r2, [r0, #24]
 80068f2:	8813      	ldrh	r3, [r2, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d043      	beq.n	8006980 <forward_dense+0x90>
 80068f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	6855      	ldr	r5, [r2, #4]
 80068fe:	b08e      	sub	sp, #56	@ 0x38
 8006900:	6869      	ldr	r1, [r5, #4]
 8006902:	b101      	cbz	r1, 8006906 <forward_dense+0x16>
 8006904:	6809      	ldr	r1, [r1, #0]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d069      	beq.n	80069de <forward_dense+0xee>
 800690a:	692a      	ldr	r2, [r5, #16]
 800690c:	b102      	cbz	r2, 8006910 <forward_dense+0x20>
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d061      	beq.n	80069d8 <forward_dense+0xe8>
 8006914:	69ec      	ldr	r4, [r5, #28]
 8006916:	2c00      	cmp	r4, #0
 8006918:	d057      	beq.n	80069ca <forward_dense+0xda>
 800691a:	8b2e      	ldrh	r6, [r5, #24]
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	2e01      	cmp	r6, #1
 8006920:	d955      	bls.n	80069ce <forward_dense+0xde>
 8006922:	6864      	ldr	r4, [r4, #4]
 8006924:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8006928:	2b03      	cmp	r3, #3
 800692a:	68d0      	ldr	r0, [r2, #12]
 800692c:	68cf      	ldr	r7, [r1, #12]
 800692e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8006932:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8006936:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800693a:	f8d9 0000 	ldr.w	r0, [r9]
 800693e:	fb06 f807 	mul.w	r8, r6, r7
 8006942:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8006946:	d044      	beq.n	80069d2 <forward_dense+0xe2>
 8006948:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800694a:	b11d      	cbz	r5, 8006954 <forward_dense+0x64>
 800694c:	682d      	ldr	r5, [r5, #0]
 800694e:	b10d      	cbz	r5, 8006954 <forward_dense+0x64>
 8006950:	69ab      	ldr	r3, [r5, #24]
 8006952:	689d      	ldr	r5, [r3, #8]
 8006954:	6992      	ldr	r2, [r2, #24]
 8006956:	698b      	ldr	r3, [r1, #24]
 8006958:	6890      	ldr	r0, [r2, #8]
 800695a:	6899      	ldr	r1, [r3, #8]
 800695c:	b10c      	cbz	r4, 8006962 <forward_dense+0x72>
 800695e:	69a3      	ldr	r3, [r4, #24]
 8006960:	689c      	ldr	r4, [r3, #8]
 8006962:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <forward_dense+0xf4>)
 8006964:	459c      	cmp	ip, r3
 8006966:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800696a:	d023      	beq.n	80069b4 <forward_dense+0xc4>
 800696c:	4e1e      	ldr	r6, [pc, #120]	@ (80069e8 <forward_dense+0xf8>)
 800696e:	45b4      	cmp	ip, r6
 8006970:	d015      	beq.n	800699e <forward_dense+0xae>
 8006972:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8006976:	459c      	cmp	ip, r3
 8006978:	d004      	beq.n	8006984 <forward_dense+0x94>
 800697a:	b00e      	add	sp, #56	@ 0x38
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	deff      	udf	#255	@ 0xff
 8006984:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8006988:	a807      	add	r0, sp, #28
 800698a:	9209      	str	r2, [sp, #36]	@ 0x24
 800698c:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8006990:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8006994:	f000 ff92 	bl	80078bc <forward_lite_dense_if32of32wf32>
 8006998:	b00e      	add	sp, #56	@ 0x38
 800699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699e:	464b      	mov	r3, r9
 80069a0:	9500      	str	r5, [sp, #0]
 80069a2:	e9cd e803 	strd	lr, r8, [sp, #12]
 80069a6:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80069aa:	f001 f8e5 	bl	8007b78 <forward_lite_dense_if32of32wf32_lut4>
 80069ae:	b00e      	add	sp, #56	@ 0x38
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	464b      	mov	r3, r9
 80069b6:	9500      	str	r5, [sp, #0]
 80069b8:	e9cd e803 	strd	lr, r8, [sp, #12]
 80069bc:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80069c0:	f001 fa04 	bl	8007dcc <forward_lite_dense_if32of32wf32_lut8>
 80069c4:	b00e      	add	sp, #56	@ 0x38
 80069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ca:	4620      	mov	r0, r4
 80069cc:	e7aa      	b.n	8006924 <forward_dense+0x34>
 80069ce:	2400      	movs	r4, #0
 80069d0:	e7a8      	b.n	8006924 <forward_dense+0x34>
 80069d2:	2300      	movs	r3, #0
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	deff      	udf	#255	@ 0xff
 80069d8:	2300      	movs	r3, #0
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	deff      	udf	#255	@ 0xff
 80069de:	2300      	movs	r3, #0
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	deff      	udf	#255	@ 0xff
 80069e4:	01d01040 	.word	0x01d01040
 80069e8:	01e81040 	.word	0x01e81040

080069ec <forward_sigmoid>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	ed2d 8b02 	vpush	{d8}
 80069f2:	6982      	ldr	r2, [r0, #24]
 80069f4:	8813      	ldrh	r3, [r2, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03b      	beq.n	8006a72 <forward_sigmoid+0x86>
 80069fa:	6852      	ldr	r2, [r2, #4]
 80069fc:	6854      	ldr	r4, [r2, #4]
 80069fe:	b104      	cbz	r4, 8006a02 <forward_sigmoid+0x16>
 8006a00:	6824      	ldr	r4, [r4, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d034      	beq.n	8006a70 <forward_sigmoid+0x84>
 8006a06:	6915      	ldr	r5, [r2, #16]
 8006a08:	b105      	cbz	r5, 8006a0c <forward_sigmoid+0x20>
 8006a0a:	682d      	ldr	r5, [r5, #0]
 8006a0c:	68a3      	ldr	r3, [r4, #8]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	d031      	beq.n	8006a76 <forward_sigmoid+0x8a>
 8006a12:	68e0      	ldr	r0, [r4, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a1e:	4298      	cmp	r0, r3
 8006a20:	fb01 f202 	mul.w	r2, r1, r2
 8006a24:	d1f9      	bne.n	8006a1a <forward_sigmoid+0x2e>
 8006a26:	69a7      	ldr	r7, [r4, #24]
 8006a28:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006a2c:	69a9      	ldr	r1, [r5, #24]
 8006a2e:	4413      	add	r3, r2
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	688e      	ldr	r6, [r1, #8]
 8006a34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006a38:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006a3c:	42aa      	cmp	r2, r5
 8006a3e:	d814      	bhi.n	8006a6a <forward_sigmoid+0x7e>
 8006a40:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8006a44:	3504      	adds	r5, #4
 8006a46:	3604      	adds	r6, #4
 8006a48:	462c      	mov	r4, r5
 8006a4a:	ed35 0a01 	vldmdb	r5!, {s0}
 8006a4e:	eeb1 0a40 	vneg.f32	s0, s0
 8006a52:	3c08      	subs	r4, #8
 8006a54:	f004 fb16 	bl	800b084 <expf>
 8006a58:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006a5c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8006a60:	ed66 7a01 	vstmdb	r6!, {s15}
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	d9ee      	bls.n	8006a48 <forward_sigmoid+0x5c>
 8006a6a:	ecbd 8b02 	vpop	{d8}
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	2300      	movs	r3, #0
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	deff      	udf	#255	@ 0xff
 8006a76:	69ab      	ldr	r3, [r5, #24]
 8006a78:	69a7      	ldr	r7, [r4, #24]
 8006a7a:	689e      	ldr	r6, [r3, #8]
 8006a7c:	68bd      	ldr	r5, [r7, #8]
 8006a7e:	e7df      	b.n	8006a40 <forward_sigmoid+0x54>

08006a80 <forward_relu>:
 8006a80:	6982      	ldr	r2, [r0, #24]
 8006a82:	8813      	ldrh	r3, [r2, #0]
 8006a84:	b323      	cbz	r3, 8006ad0 <forward_relu+0x50>
 8006a86:	6851      	ldr	r1, [r2, #4]
 8006a88:	684a      	ldr	r2, [r1, #4]
 8006a8a:	b102      	cbz	r2, 8006a8e <forward_relu+0xe>
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	f000 8086 	beq.w	8006ba0 <forward_relu+0x120>
 8006a94:	b470      	push	{r4, r5, r6}
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	b103      	cbz	r3, 8006a9c <forward_relu+0x1c>
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69c6      	ldr	r6, [r0, #28]
 8006a9e:	b1ce      	cbz	r6, 8006ad4 <forward_relu+0x54>
 8006aa0:	6871      	ldr	r1, [r6, #4]
 8006aa2:	6998      	ldr	r0, [r3, #24]
 8006aa4:	2901      	cmp	r1, #1
 8006aa6:	d03f      	beq.n	8006b28 <forward_relu+0xa8>
 8006aa8:	6893      	ldr	r3, [r2, #8]
 8006aaa:	6991      	ldr	r1, [r2, #24]
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	6880      	ldr	r0, [r0, #8]
 8006ab0:	6889      	ldr	r1, [r1, #8]
 8006ab2:	d06c      	beq.n	8006b8e <forward_relu+0x10e>
 8006ab4:	68d5      	ldr	r5, [r2, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006abc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006ac0:	429d      	cmp	r5, r3
 8006ac2:	fb04 f202 	mul.w	r2, r4, r2
 8006ac6:	d1f9      	bne.n	8006abc <forward_relu+0x3c>
 8006ac8:	68b3      	ldr	r3, [r6, #8]
 8006aca:	bc70      	pop	{r4, r5, r6}
 8006acc:	f000 bc78 	b.w	80073c0 <forward_lite_nl_relu_generic_if32of32_kernel>
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	deff      	udf	#255	@ 0xff
 8006ad4:	6999      	ldr	r1, [r3, #24]
 8006ad6:	6893      	ldr	r3, [r2, #8]
 8006ad8:	6990      	ldr	r0, [r2, #24]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	6889      	ldr	r1, [r1, #8]
 8006ade:	6884      	ldr	r4, [r0, #8]
 8006ae0:	d057      	beq.n	8006b92 <forward_relu+0x112>
 8006ae2:	68d5      	ldr	r5, [r2, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006aea:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8006aee:	429d      	cmp	r5, r3
 8006af0:	fb00 f202 	mul.w	r2, r0, r2
 8006af4:	d1f9      	bne.n	8006aea <forward_relu+0x6a>
 8006af6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006afa:	4413      	add	r3, r2
 8006afc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006b00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006b04:	4294      	cmp	r4, r2
 8006b06:	d80d      	bhi.n	8006b24 <forward_relu+0xa4>
 8006b08:	3204      	adds	r2, #4
 8006b0a:	3104      	adds	r1, #4
 8006b0c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006ba8 <forward_relu+0x128>
 8006b10:	4613      	mov	r3, r2
 8006b12:	ed72 7a01 	vldmdb	r2!, {s15}
 8006b16:	3b08      	subs	r3, #8
 8006b18:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8006b1c:	ed61 7a01 	vstmdb	r1!, {s15}
 8006b20:	429c      	cmp	r4, r3
 8006b22:	d9f5      	bls.n	8006b10 <forward_relu+0x90>
 8006b24:	bc70      	pop	{r4, r5, r6}
 8006b26:	4770      	bx	lr
 8006b28:	6993      	ldr	r3, [r2, #24]
 8006b2a:	6880      	ldr	r0, [r0, #8]
 8006b2c:	689c      	ldr	r4, [r3, #8]
 8006b2e:	6893      	ldr	r3, [r2, #8]
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	d030      	beq.n	8006b96 <forward_relu+0x116>
 8006b34:	68d5      	ldr	r5, [r2, #12]
 8006b36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	fb02 f101 	mul.w	r1, r2, r1
 8006b44:	d1f9      	bne.n	8006b3a <forward_relu+0xba>
 8006b46:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8006b4a:	68b3      	ldr	r3, [r6, #8]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	ed93 7a00 	vldr	s14, [r3]
 8006b52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	d8e2      	bhi.n	8006b24 <forward_relu+0xa4>
 8006b5e:	1d02      	adds	r2, r0, #4
 8006b60:	3304      	adds	r3, #4
 8006b62:	2000      	movs	r0, #0
 8006b64:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006b68:	1f19      	subs	r1, r3, #4
 8006b6a:	3b08      	subs	r3, #8
 8006b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b74:	d405      	bmi.n	8006b82 <forward_relu+0x102>
 8006b76:	429c      	cmp	r4, r3
 8006b78:	f842 0d04 	str.w	r0, [r2, #-4]!
 8006b7c:	d8d2      	bhi.n	8006b24 <forward_relu+0xa4>
 8006b7e:	460b      	mov	r3, r1
 8006b80:	e7f0      	b.n	8006b64 <forward_relu+0xe4>
 8006b82:	429c      	cmp	r4, r3
 8006b84:	ed62 7a01 	vstmdb	r2!, {s15}
 8006b88:	d8cc      	bhi.n	8006b24 <forward_relu+0xa4>
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	e7ea      	b.n	8006b64 <forward_relu+0xe4>
 8006b8e:	2201      	movs	r2, #1
 8006b90:	e79a      	b.n	8006ac8 <forward_relu+0x48>
 8006b92:	4622      	mov	r2, r4
 8006b94:	e7b8      	b.n	8006b08 <forward_relu+0x88>
 8006b96:	68b2      	ldr	r2, [r6, #8]
 8006b98:	4623      	mov	r3, r4
 8006b9a:	ed92 7a00 	vldr	s14, [r2]
 8006b9e:	e7de      	b.n	8006b5e <forward_relu+0xde>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	deff      	udf	#255	@ 0xff
 8006ba6:	bf00      	nop
 8006ba8:	00000000 	.word	0x00000000

08006bac <forward_lite_conv2d_if32of32wf32_pool>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	ed2d 8b0e 	vpush	{d8-d14}
 8006bb4:	b0c9      	sub	sp, #292	@ 0x124
 8006bb6:	4696      	mov	lr, r2
 8006bb8:	4680      	mov	r8, r0
 8006bba:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 8006bbe:	9323      	str	r3, [sp, #140]	@ 0x8c
 8006bc0:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 8006bc4:	9138      	str	r1, [sp, #224]	@ 0xe0
 8006bc6:	9239      	str	r2, [sp, #228]	@ 0xe4
 8006bc8:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8006bcc:	fb05 f203 	mul.w	r2, r5, r3
 8006bd0:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8006bd4:	9129      	str	r1, [sp, #164]	@ 0xa4
 8006bd6:	460e      	mov	r6, r1
 8006bd8:	fb01 f202 	mul.w	r2, r1, r2
 8006bdc:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8006be0:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 8006be4:	9142      	str	r1, [sp, #264]	@ 0x108
 8006be6:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8006bea:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 8006bee:	932d      	str	r3, [sp, #180]	@ 0xb4
 8006bf0:	942a      	str	r4, [sp, #168]	@ 0xa8
 8006bf2:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 8006bf6:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 8006bfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006bfc:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8006c00:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 8006c04:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8006c08:	9041      	str	r0, [sp, #260]	@ 0x104
 8006c0a:	933a      	str	r3, [sp, #232]	@ 0xe8
 8006c0c:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8006c10:	912b      	str	r1, [sp, #172]	@ 0xac
 8006c12:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 8006c16:	4243      	negs	r3, r0
 8006c18:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006c1a:	9418      	str	r4, [sp, #96]	@ 0x60
 8006c1c:	9714      	str	r7, [sp, #80]	@ 0x50
 8006c1e:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8006c22:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8006c26:	931e      	str	r3, [sp, #120]	@ 0x78
 8006c28:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8006c2c:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8006c30:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006c32:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8006c36:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8006c40:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8006c44:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8006c48:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8006c4c:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8006c50:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8006c54:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8006c58:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8006c5c:	f340 80a9 	ble.w	8006db2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8006c60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c62:	3901      	subs	r1, #1
 8006c64:	9020      	str	r0, [sp, #128]	@ 0x80
 8006c66:	fb03 f309 	mul.w	r3, r3, r9
 8006c6a:	fa1f fc81 	uxth.w	ip, r1
 8006c6e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8006c70:	fb04 f303 	mul.w	r3, r4, r3
 8006c74:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 8006dbc <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8006c78:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8006c7c:	0099      	lsls	r1, r3, #2
 8006c7e:	9124      	str	r1, [sp, #144]	@ 0x90
 8006c80:	4631      	mov	r1, r6
 8006c82:	b2b6      	uxth	r6, r6
 8006c84:	fb00 f301 	mul.w	r3, r0, r1
 8006c88:	9636      	str	r6, [sp, #216]	@ 0xd8
 8006c8a:	00a6      	lsls	r6, r4, #2
 8006c8c:	fb05 f303 	mul.w	r3, r5, r3
 8006c90:	fb05 f501 	mul.w	r5, r5, r1
 8006c94:	0098      	lsls	r0, r3, #2
 8006c96:	9616      	str	r6, [sp, #88]	@ 0x58
 8006c98:	953d      	str	r5, [sp, #244]	@ 0xf4
 8006c9a:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8006c9e:	903e      	str	r0, [sp, #248]	@ 0xf8
 8006ca0:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8006ca2:	953b      	str	r5, [sp, #236]	@ 0xec
 8006ca4:	1e43      	subs	r3, r0, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3301      	adds	r3, #1
 8006caa:	0098      	lsls	r0, r3, #2
 8006cac:	9035      	str	r0, [sp, #212]	@ 0xd4
 8006cae:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8006cb0:	fb00 f307 	mul.w	r3, r0, r7
 8006cb4:	fb04 f303 	mul.w	r3, r4, r3
 8006cb8:	0098      	lsls	r0, r3, #2
 8006cba:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8006cbc:	9034      	str	r0, [sp, #208]	@ 0xd0
 8006cbe:	0090      	lsls	r0, r2, #2
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	0089      	lsls	r1, r1, #2
 8006cc6:	9032      	str	r0, [sp, #200]	@ 0xc8
 8006cc8:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8006cca:	9112      	str	r1, [sp, #72]	@ 0x48
 8006ccc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006cd0:	0098      	lsls	r0, r3, #2
 8006cd2:	fb07 f306 	mul.w	r3, r7, r6
 8006cd6:	921f      	str	r2, [sp, #124]	@ 0x7c
 8006cd8:	903c      	str	r0, [sp, #240]	@ 0xf0
 8006cda:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8006cdc:	fb00 8703 	mla	r7, r0, r3, r8
 8006ce0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006ce2:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8006ce4:	9722      	str	r7, [sp, #136]	@ 0x88
 8006ce6:	425f      	negs	r7, r3
 8006ce8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cea:	4241      	negs	r1, r0
 8006cec:	9731      	str	r7, [sp, #196]	@ 0xc4
 8006cee:	fb03 f304 	mul.w	r3, r3, r4
 8006cf2:	9125      	str	r1, [sp, #148]	@ 0x94
 8006cf4:	009c      	lsls	r4, r3, #2
 8006cf6:	fb06 f107 	mul.w	r1, r6, r7
 8006cfa:	9417      	str	r4, [sp, #92]	@ 0x5c
 8006cfc:	2400      	movs	r4, #0
 8006cfe:	9137      	str	r1, [sp, #220]	@ 0xdc
 8006d00:	9960      	ldr	r1, [sp, #384]	@ 0x180
 8006d02:	9427      	str	r4, [sp, #156]	@ 0x9c
 8006d04:	911b      	str	r1, [sp, #108]	@ 0x6c
 8006d06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006d08:	9428      	str	r4, [sp, #160]	@ 0xa0
 8006d0a:	9333      	str	r3, [sp, #204]	@ 0xcc
 8006d0c:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 8006d0e:	932f      	str	r3, [sp, #188]	@ 0xbc
 8006d10:	1e53      	subs	r3, r2, #1
 8006d12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006d14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d16:	3301      	adds	r3, #1
 8006d18:	b21b      	sxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc68      	bgt.n	8006df0 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 8006d1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	f100 81d5 	bmi.w	80070d0 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 8006d26:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8006d28:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8006d2a:	42b2      	cmp	r2, r6
 8006d2c:	dc48      	bgt.n	8006dc0 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 8006d2e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8006d30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006d32:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8006d34:	3301      	adds	r3, #1
 8006d36:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8006d38:	4420      	add	r0, r4
 8006d3a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8006d3c:	b21d      	sxth	r5, r3
 8006d3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d40:	901e      	str	r0, [sp, #120]	@ 0x78
 8006d42:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8006d44:	1b1b      	subs	r3, r3, r4
 8006d46:	9108      	str	r1, [sp, #32]
 8006d48:	4401      	add	r1, r0
 8006d4a:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d4e:	9138      	str	r1, [sp, #224]	@ 0xe0
 8006d50:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006d52:	9528      	str	r5, [sp, #160]	@ 0xa0
 8006d54:	440b      	add	r3, r1
 8006d56:	9322      	str	r3, [sp, #136]	@ 0x88
 8006d58:	b293      	uxth	r3, r2
 8006d5a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	b2bb      	uxth	r3, r7
 8006d64:	1af1      	subs	r1, r6, r3
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 8006d6a:	b20b      	sxth	r3, r1
 8006d6c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8006d70:	931d      	str	r3, [sp, #116]	@ 0x74
 8006d72:	b2b3      	uxth	r3, r6
 8006d74:	9303      	str	r3, [sp, #12]
 8006d76:	2301      	movs	r3, #1
 8006d78:	9307      	str	r3, [sp, #28]
 8006d7a:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 8006d7e:	9306      	str	r3, [sp, #24]
 8006d80:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8006d8a:	9302      	str	r3, [sp, #8]
 8006d8c:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8006d94:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8006d96:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8006d98:	47a0      	blx	r4
 8006d9a:	1bf3      	subs	r3, r6, r7
 8006d9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006da2:	3a01      	subs	r2, #1
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	b292      	uxth	r2, r2
 8006da8:	9333      	str	r3, [sp, #204]	@ 0xcc
 8006daa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006dac:	9221      	str	r2, [sp, #132]	@ 0x84
 8006dae:	42ab      	cmp	r3, r5
 8006db0:	dcb0      	bgt.n	8006d14 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 8006db2:	b049      	add	sp, #292	@ 0x124
 8006db4:	ecbd 8b0e 	vpop	{d8-d14}
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	00000000 	.word	0x00000000
 8006dc0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8006dc2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8006dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dc6:	440a      	add	r2, r1
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	921e      	str	r2, [sp, #120]	@ 0x78
 8006dcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	1a52      	subs	r2, r2, r1
 8006dd2:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006dd4:	9321      	str	r3, [sp, #132]	@ 0x84
 8006dd6:	9220      	str	r2, [sp, #128]	@ 0x80
 8006dd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006dda:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006ddc:	440a      	add	r2, r1
 8006dde:	9222      	str	r2, [sp, #136]	@ 0x88
 8006de0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	dde5      	ble.n	8006db2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8006de6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006de8:	3301      	adds	r3, #1
 8006dea:	b21b      	sxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd96      	ble.n	8006d1e <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8006df0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f2c0 82d1 	blt.w	800739a <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8006df8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dfa:	931c      	str	r3, [sp, #112]	@ 0x70
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006e00:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8006e02:	440a      	add	r2, r1
 8006e04:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8006e06:	428a      	cmp	r2, r1
 8006e08:	bfd4      	ite	le
 8006e0a:	ebc3 0b02 	rsble	fp, r3, r2
 8006e0e:	ebc3 0b01 	rsbgt	fp, r3, r1
 8006e12:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	f000 819d 	beq.w	8007154 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8006e1a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8006e1c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8006e20:	f0c0 8198 	bcc.w	8007154 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8006e24:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	f340 8115 	ble.w	8007056 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8006e2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e2e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8006e30:	fb02 f303 	mul.w	r3, r2, r3
 8006e34:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8006e36:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e38:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e3a:	189a      	adds	r2, r3, r2
 8006e3c:	9326      	str	r3, [sp, #152]	@ 0x98
 8006e3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e40:	923f      	str	r2, [sp, #252]	@ 0xfc
 8006e42:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e44:	9330      	str	r3, [sp, #192]	@ 0xc0
 8006e46:	440a      	add	r2, r1
 8006e48:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8006e4a:	9240      	str	r2, [sp, #256]	@ 0x100
 8006e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e50:	9961      	ldr	r1, [sp, #388]	@ 0x184
 8006e52:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8006e54:	f001 fa86 	bl	8008364 <st_int8_copy>
 8006e58:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8135 	beq.w	80070ca <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8006e60:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8006e62:	ecf3 1a01 	vldmia	r3!, {s3}
 8006e66:	9330      	str	r3, [sp, #192]	@ 0xc0
 8006e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80e8 	beq.w	8007040 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8006e70:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006e72:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e74:	189a      	adds	r2, r3, r2
 8006e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e78:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8006e7a:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8006e7e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006e80:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e82:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e86:	2300      	movs	r3, #0
 8006e88:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f2c0 8113 	blt.w	80070b8 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8006e92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e94:	2600      	movs	r6, #0
 8006e96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e98:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006e9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e9c:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bf94      	ite	ls
 8006ea2:	ebc6 0600 	rsbls	r6, r6, r0
 8006ea6:	ebc6 0603 	rsbhi	r6, r6, r3
 8006eaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006eac:	f1bb 0f00 	cmp.w	fp, #0
 8006eb0:	eba0 0906 	sub.w	r9, r0, r6
 8006eb4:	fb02 4203 	mla	r2, r2, r3, r4
 8006eb8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006eba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8006ebc:	eba4 0a06 	sub.w	sl, r4, r6
 8006ec0:	fb00 f606 	mul.w	r6, r0, r6
 8006ec4:	f340 80fe 	ble.w	80070c4 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8006ec8:	f026 070f 	bic.w	r7, r6, #15
 8006ecc:	eeb0 7a61 	vmov.f32	s14, s3
 8006ed0:	fb0a fa03 	mul.w	sl, sl, r3
 8006ed4:	f04f 0c00 	mov.w	ip, #0
 8006ed8:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006edc:	fb09 f903 	mul.w	r9, r9, r3
 8006ee0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006ee4:	f108 0801 	add.w	r8, r8, #1
 8006ee8:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8006eec:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006ef0:	2f00      	cmp	r7, #0
 8006ef2:	f340 80df 	ble.w	80070b4 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 8006ef6:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8006efa:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8006efe:	2400      	movs	r4, #0
 8006f00:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8006f04:	3410      	adds	r4, #16
 8006f06:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8006f0a:	3340      	adds	r3, #64	@ 0x40
 8006f0c:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8006f10:	42bc      	cmp	r4, r7
 8006f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f16:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8006f1a:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8006f1e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8006f22:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8006f26:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006f2a:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8006f2e:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8006f32:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8006f36:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8006f3a:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 8006f3e:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 8006f42:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f46:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 8006f4a:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 8006f4e:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 8006f52:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8006f56:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 8006f5a:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8006f5e:	eeee 7a26 	vfma.f32	s15, s28, s13
 8006f62:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8006f66:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8006f6a:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 8006f6e:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8006f72:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8006f76:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8006f7a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006f7e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8006f82:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006f86:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8006f8a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006f8e:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8006f92:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006f96:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006f9a:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8006f9e:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8006fa2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006fa6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006faa:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006fae:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006fb2:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006fb6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006fba:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006fbe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006fc2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006fc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fce:	db97      	blt.n	8006f00 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8006fd0:	4471      	add	r1, lr
 8006fd2:	4472      	add	r2, lr
 8006fd4:	4645      	mov	r5, r8
 8006fd6:	42ae      	cmp	r6, r5
 8006fd8:	dd10      	ble.n	8006ffc <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8006fda:	462b      	mov	r3, r5
 8006fdc:	460c      	mov	r4, r1
 8006fde:	4610      	mov	r0, r2
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	ecf0 6a01 	vldmia	r0!, {s13}
 8006fe6:	ecf4 7a01 	vldmia	r4!, {s15}
 8006fea:	429e      	cmp	r6, r3
 8006fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ff0:	d1f6      	bne.n	8006fe0 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8006ff2:	1b75      	subs	r5, r6, r5
 8006ff4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006ff8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006ffc:	f10c 0c01 	add.w	ip, ip, #1
 8007000:	4451      	add	r1, sl
 8007002:	444a      	add	r2, r9
 8007004:	45e3      	cmp	fp, ip
 8007006:	f47f af73 	bne.w	8006ef0 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 800700a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800700c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800700e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007010:	4410      	add	r0, r2
 8007012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007014:	ed81 7a00 	vstr	s14, [r1]
 8007018:	900b      	str	r0, [sp, #44]	@ 0x2c
 800701a:	3301      	adds	r3, #1
 800701c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800701e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007020:	4401      	add	r1, r0
 8007022:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007024:	9110      	str	r1, [sp, #64]	@ 0x40
 8007026:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007028:	1a89      	subs	r1, r1, r2
 800702a:	910e      	str	r1, [sp, #56]	@ 0x38
 800702c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800702e:	4401      	add	r1, r0
 8007030:	910d      	str	r1, [sp, #52]	@ 0x34
 8007032:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007034:	1a8a      	subs	r2, r1, r2
 8007036:	920c      	str	r2, [sp, #48]	@ 0x30
 8007038:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800703a:	429a      	cmp	r2, r3
 800703c:	f47f af25 	bne.w	8006e8a <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 8007040:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007042:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8007044:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007046:	440a      	add	r2, r1
 8007048:	3304      	adds	r3, #4
 800704a:	921a      	str	r2, [sp, #104]	@ 0x68
 800704c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800704e:	9326      	str	r3, [sp, #152]	@ 0x98
 8007050:	4293      	cmp	r3, r2
 8007052:	f47f aefc 	bne.w	8006e4e <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8007056:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007058:	2b00      	cmp	r3, #0
 800705a:	dd26      	ble.n	80070aa <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 800705c:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 819f 	beq.w	80073a2 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8007064:	4699      	mov	r9, r3
 8007066:	2400      	movs	r4, #0
 8007068:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 800706a:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 800706e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8007070:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8007074:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8007078:	462b      	mov	r3, r5
 800707a:	4455      	add	r5, sl
 800707c:	463a      	mov	r2, r7
 800707e:	4641      	mov	r1, r8
 8007080:	4640      	mov	r0, r8
 8007082:	3401      	adds	r4, #1
 8007084:	47c8      	blx	r9
 8007086:	1bab      	subs	r3, r5, r6
 8007088:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800708a:	b224      	sxth	r4, r4
 800708c:	455b      	cmp	r3, fp
 800708e:	bfa8      	it	ge
 8007090:	4635      	movge	r5, r6
 8007092:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007094:	4490      	add	r8, r2
 8007096:	4543      	cmp	r3, r8
 8007098:	d801      	bhi.n	800709e <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 800709a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800709c:	4498      	add	r8, r3
 800709e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d1e9      	bne.n	8007078 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 80070a4:	952f      	str	r5, [sp, #188]	@ 0xbc
 80070a6:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 80070aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070ac:	3301      	adds	r3, #1
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	931d      	str	r3, [sp, #116]	@ 0x74
 80070b2:	e638      	b.n	8006d26 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80070b4:	2500      	movs	r5, #0
 80070b6:	e78e      	b.n	8006fd6 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 80070b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070bc:	4616      	mov	r6, r2
 80070be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80070c0:	189a      	adds	r2, r3, r2
 80070c2:	e6e9      	b.n	8006e98 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 80070c4:	eeb0 7a61 	vmov.f32	s14, s3
 80070c8:	e79f      	b.n	800700a <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 80070ca:	eef0 1a48 	vmov.f32	s3, s16
 80070ce:	e6cb      	b.n	8006e68 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 80070d0:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 80070d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
 80070d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070da:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80070de:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d901      	bls.n	80070e8 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 80070e4:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80070e6:	4413      	add	r3, r2
 80070e8:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d217      	bcs.n	800711e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80070ee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80070f0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80070f2:	428a      	cmp	r2, r1
 80070f4:	d013      	beq.n	800711e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80070f6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d910      	bls.n	800711e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80070fc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80070fe:	461a      	mov	r2, r3
 8007100:	f852 0b04 	ldr.w	r0, [r2], #4
 8007104:	f841 0b04 	str.w	r0, [r1], #4
 8007108:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800710a:	4290      	cmp	r0, r2
 800710c:	d8f8      	bhi.n	8007100 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 800710e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007114:	f023 0303 	bic.w	r3, r3, #3
 8007118:	3304      	adds	r3, #4
 800711a:	441a      	add	r2, r3
 800711c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800711e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8007120:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8007122:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8007126:	440a      	add	r2, r1
 8007128:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 800712a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800712c:	1ad2      	subs	r2, r2, r3
 800712e:	4401      	add	r1, r0
 8007130:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8007132:	b212      	sxth	r2, r2
 8007134:	4403      	add	r3, r0
 8007136:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007138:	9227      	str	r2, [sp, #156]	@ 0x9c
 800713a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800713c:	b21b      	sxth	r3, r3
 800713e:	428a      	cmp	r2, r1
 8007140:	931d      	str	r3, [sp, #116]	@ 0x74
 8007142:	460b      	mov	r3, r1
 8007144:	f63f adef 	bhi.w	8006d26 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8007148:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800714a:	440b      	add	r3, r1
 800714c:	429a      	cmp	r2, r3
 800714e:	d9fc      	bls.n	800714a <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8007150:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007152:	e5e8      	b.n	8006d26 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8007154:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8007156:	2a00      	cmp	r2, #0
 8007158:	f77f af7d 	ble.w	8007056 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800715c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800715e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8007166:	931a      	str	r3, [sp, #104]	@ 0x68
 8007168:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800716a:	189a      	adds	r2, r3, r2
 800716c:	9326      	str	r3, [sp, #152]	@ 0x98
 800716e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007170:	923f      	str	r2, [sp, #252]	@ 0xfc
 8007172:	9330      	str	r3, [sp, #192]	@ 0xc0
 8007174:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007176:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8007178:	440a      	add	r2, r1
 800717a:	9319      	str	r3, [sp, #100]	@ 0x64
 800717c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800717e:	9240      	str	r2, [sp, #256]	@ 0x100
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80fc 	beq.w	800737e <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8007186:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8007188:	ecf3 1a01 	vldmia	r3!, {s3}
 800718c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800718e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80e5 	beq.w	8007360 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8007196:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8007198:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800719a:	189a      	adds	r2, r3, r2
 800719c:	920c      	str	r2, [sp, #48]	@ 0x30
 800719e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 80071a0:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 80071a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80071a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80071a8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80071aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ac:	2300      	movs	r3, #0
 80071ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80071b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f2c0 80e8 	blt.w	8007388 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 80071b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071ba:	2000      	movs	r0, #0
 80071bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80071be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80071c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071c2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80071c4:	428c      	cmp	r4, r1
 80071c6:	bf94      	ite	ls
 80071c8:	ebc0 0004 	rsbls	r0, r0, r4
 80071cc:	ebc0 0001 	rsbhi	r0, r0, r1
 80071d0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80071d2:	f1bb 0f00 	cmp.w	fp, #0
 80071d6:	eba4 0900 	sub.w	r9, r4, r0
 80071da:	fb03 5301 	mla	r3, r3, r1, r5
 80071de:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80071e0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80071e2:	eba5 0a00 	sub.w	sl, r5, r0
 80071e6:	fb04 f000 	mul.w	r0, r4, r0
 80071ea:	f340 80d3 	ble.w	8007394 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 80071ee:	f020 080f 	bic.w	r8, r0, #15
 80071f2:	eeb0 7a61 	vmov.f32	s14, s3
 80071f6:	fb0a fa01 	mul.w	sl, sl, r1
 80071fa:	2400      	movs	r4, #0
 80071fc:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8007200:	fb09 f901 	mul.w	r9, r9, r1
 8007204:	093f      	lsrs	r7, r7, #4
 8007206:	3701      	adds	r7, #1
 8007208:	01be      	lsls	r6, r7, #6
 800720a:	013f      	lsls	r7, r7, #4
 800720c:	f1b8 0f00 	cmp.w	r8, #0
 8007210:	f340 80b8 	ble.w	8007384 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 8007214:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8007218:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800721c:	f04f 0c00 	mov.w	ip, #0
 8007220:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8007224:	f10c 0c10 	add.w	ip, ip, #16
 8007228:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 800722c:	3140      	adds	r1, #64	@ 0x40
 800722e:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 8007232:	45c4      	cmp	ip, r8
 8007234:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007238:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 800723c:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8007240:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8007244:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8007248:	eee4 7a85 	vfma.f32	s15, s9, s10
 800724c:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8007250:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8007254:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8007258:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 800725c:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8007260:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8007264:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007268:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 800726c:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8007270:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8007274:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8007278:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 800727c:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8007280:	eeee 7a26 	vfma.f32	s15, s28, s13
 8007284:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8007288:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800728c:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8007290:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8007294:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8007298:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 800729c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80072a0:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 80072a4:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 80072a8:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 80072ac:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 80072b0:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 80072b4:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 80072b8:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80072bc:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80072c0:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 80072c4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80072c8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80072cc:	eee9 7a89 	vfma.f32	s15, s19, s18
 80072d0:	eee8 7a80 	vfma.f32	s15, s17, s0
 80072d4:	eee0 7a81 	vfma.f32	s15, s1, s2
 80072d8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80072dc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80072e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80072e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80072ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072f0:	db96      	blt.n	8007220 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 80072f2:	4432      	add	r2, r6
 80072f4:	4433      	add	r3, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	4288      	cmp	r0, r1
 80072fa:	dd10      	ble.n	800731e <forward_lite_conv2d_if32of32wf32_pool+0x772>
 80072fc:	460d      	mov	r5, r1
 80072fe:	4696      	mov	lr, r2
 8007300:	469c      	mov	ip, r3
 8007302:	3501      	adds	r5, #1
 8007304:	ecfc 6a01 	vldmia	ip!, {s13}
 8007308:	ecfe 7a01 	vldmia	lr!, {s15}
 800730c:	42a8      	cmp	r0, r5
 800730e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007312:	d1f6      	bne.n	8007302 <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8007314:	1a41      	subs	r1, r0, r1
 8007316:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800731a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800731e:	3401      	adds	r4, #1
 8007320:	4452      	add	r2, sl
 8007322:	444b      	add	r3, r9
 8007324:	45a3      	cmp	fp, r4
 8007326:	f47f af71 	bne.w	800720c <forward_lite_conv2d_if32of32wf32_pool+0x660>
 800732a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800732c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800732e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007330:	4410      	add	r0, r2
 8007332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007334:	ed81 7a00 	vstr	s14, [r1]
 8007338:	900b      	str	r0, [sp, #44]	@ 0x2c
 800733a:	3301      	adds	r3, #1
 800733c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800733e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007340:	4401      	add	r1, r0
 8007342:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007344:	9110      	str	r1, [sp, #64]	@ 0x40
 8007346:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007348:	1a89      	subs	r1, r1, r2
 800734a:	910e      	str	r1, [sp, #56]	@ 0x38
 800734c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800734e:	4401      	add	r1, r0
 8007350:	910d      	str	r1, [sp, #52]	@ 0x34
 8007352:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007354:	1a8a      	subs	r2, r1, r2
 8007356:	920c      	str	r2, [sp, #48]	@ 0x30
 8007358:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800735a:	429a      	cmp	r2, r3
 800735c:	f47f af28 	bne.w	80071b0 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8007360:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007362:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8007364:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007366:	440a      	add	r2, r1
 8007368:	3304      	adds	r3, #4
 800736a:	9219      	str	r2, [sp, #100]	@ 0x64
 800736c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800736e:	9326      	str	r3, [sp, #152]	@ 0x98
 8007370:	4293      	cmp	r3, r2
 8007372:	f43f ae70 	beq.w	8007056 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8007376:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007378:	2b00      	cmp	r3, #0
 800737a:	f47f af04 	bne.w	8007186 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 800737e:	eef0 1a48 	vmov.f32	s3, s16
 8007382:	e704      	b.n	800718e <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8007384:	2100      	movs	r1, #0
 8007386:	e7b7      	b.n	80072f8 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8007388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800738a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800738c:	4610      	mov	r0, r2
 800738e:	4413      	add	r3, r2
 8007390:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007392:	e714      	b.n	80071be <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8007394:	eeb0 7a61 	vmov.f32	s14, s3
 8007398:	e7c7      	b.n	800732a <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 800739a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800739c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800739e:	921c      	str	r2, [sp, #112]	@ 0x70
 80073a0:	e52d      	b.n	8006dfe <forward_lite_conv2d_if32of32wf32_pool+0x252>
 80073a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80073a6:	3301      	adds	r3, #1
 80073a8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80073aa:	440a      	add	r2, r1
 80073ac:	b219      	sxth	r1, r3
 80073ae:	4290      	cmp	r0, r2
 80073b0:	d801      	bhi.n	80073b6 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 80073b2:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80073b4:	4402      	add	r2, r0
 80073b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80073b8:	4281      	cmp	r1, r0
 80073ba:	dbf3      	blt.n	80073a4 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 80073bc:	921b      	str	r2, [sp, #108]	@ 0x6c
 80073be:	e674      	b.n	80070aa <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

080073c0 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80073c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80073c4:	ed93 7a00 	vldr	s14, [r3]
 80073c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80073cc:	ed93 6a01 	vldr	s12, [r3, #4]
 80073d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d4:	d42b      	bmi.n	800742e <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80073d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80073da:	4413      	add	r3, r2
 80073dc:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80073e0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80073e4:	4291      	cmp	r1, r2
 80073e6:	d821      	bhi.n	800742c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80073e8:	f10c 0104 	add.w	r1, ip, #4
 80073ec:	1d13      	adds	r3, r2, #4
 80073ee:	eba2 020c 	sub.w	r2, r2, ip
 80073f2:	4408      	add	r0, r1
 80073f4:	e00c      	b.n	8007410 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80073f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073fa:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	db01      	blt.n	8007408 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8007404:	ee65 7a86 	vmul.f32	s15, s11, s12
 8007408:	4293      	cmp	r3, r2
 800740a:	ed60 7a01 	vstmdb	r0!, {s15}
 800740e:	d00c      	beq.n	800742a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8007410:	ed73 7a01 	vldmdb	r3!, {s15}
 8007414:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	daeb      	bge.n	80073f6 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800741e:	eef0 7a66 	vmov.f32	s15, s13
 8007422:	4293      	cmp	r3, r2
 8007424:	ed60 7a01 	vstmdb	r0!, {s15}
 8007428:	d1f2      	bne.n	8007410 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800742a:	4770      	bx	lr
 800742c:	4770      	bx	lr
 800742e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007432:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007436:	4413      	add	r3, r2
 8007438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8007440:	b500      	push	{lr}
 8007442:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8007446:	d019      	beq.n	800747c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8007448:	4561      	cmp	r1, ip
 800744a:	d815      	bhi.n	8007478 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800744c:	f10e 0204 	add.w	r2, lr, #4
 8007450:	f10c 0304 	add.w	r3, ip, #4
 8007454:	ebac 010e 	sub.w	r1, ip, lr
 8007458:	4402      	add	r2, r0
 800745a:	ed73 7a01 	vldmdb	r3!, {s15}
 800745e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007462:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800746e:	d827      	bhi.n	80074c0 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8007470:	428b      	cmp	r3, r1
 8007472:	ed62 6a01 	vstmdb	r2!, {s13}
 8007476:	d1f0      	bne.n	800745a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8007478:	f85d fb04 	ldr.w	pc, [sp], #4
 800747c:	4561      	cmp	r1, ip
 800747e:	d8fb      	bhi.n	8007478 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8007480:	f10e 0204 	add.w	r2, lr, #4
 8007484:	f10c 0304 	add.w	r3, ip, #4
 8007488:	ebac 010e 	sub.w	r1, ip, lr
 800748c:	f04f 0c00 	mov.w	ip, #0
 8007490:	4402      	add	r2, r0
 8007492:	ed73 7a01 	vldmdb	r3!, {s15}
 8007496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	d40a      	bmi.n	80074b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80074a0:	428b      	cmp	r3, r1
 80074a2:	f842 cd04 	str.w	ip, [r2, #-4]!
 80074a6:	d0e7      	beq.n	8007478 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80074a8:	ed73 7a01 	vldmdb	r3!, {s15}
 80074ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	d5f4      	bpl.n	80074a0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80074b6:	428b      	cmp	r3, r1
 80074b8:	ed62 7a01 	vstmdb	r2!, {s15}
 80074bc:	d1e9      	bne.n	8007492 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80074be:	e7db      	b.n	8007478 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80074c0:	428b      	cmp	r3, r1
 80074c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80074c6:	d1c8      	bne.n	800745a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80074c8:	e7d6      	b.n	8007478 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80074ca:	bf00      	nop

080074cc <pool_func_mp_array_f32>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	b091      	sub	sp, #68	@ 0x44
 80074d2:	468b      	mov	fp, r1
 80074d4:	469c      	mov	ip, r3
 80074d6:	4690      	mov	r8, r2
 80074d8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80074dc:	4681      	mov	r9, r0
 80074de:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80074e2:	9101      	str	r1, [sp, #4]
 80074e4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80074e8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80074ec:	9105      	str	r1, [sp, #20]
 80074ee:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9106      	str	r1, [sp, #24]
 80074f6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80074fa:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80074fe:	ea52 0403 	orrs.w	r4, r2, r3
 8007502:	9102      	str	r1, [sp, #8]
 8007504:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8007508:	9103      	str	r1, [sp, #12]
 800750a:	d173      	bne.n	80075f4 <pool_func_mp_array_f32+0x128>
 800750c:	9904      	ldr	r1, [sp, #16]
 800750e:	9d02      	ldr	r5, [sp, #8]
 8007510:	eba1 000b 	sub.w	r0, r1, fp
 8007514:	9e05      	ldr	r6, [sp, #20]
 8007516:	1e69      	subs	r1, r5, #1
 8007518:	3801      	subs	r0, #1
 800751a:	fb11 0106 	smlabb	r1, r1, r6, r0
 800751e:	0409      	lsls	r1, r1, #16
 8007520:	d568      	bpl.n	80075f4 <pool_func_mp_array_f32+0x128>
 8007522:	9901      	ldr	r1, [sp, #4]
 8007524:	9e03      	ldr	r6, [sp, #12]
 8007526:	eba1 0008 	sub.w	r0, r1, r8
 800752a:	9f06      	ldr	r7, [sp, #24]
 800752c:	1e71      	subs	r1, r6, #1
 800752e:	3801      	subs	r0, #1
 8007530:	fb11 0107 	smlabb	r1, r1, r7, r0
 8007534:	040f      	lsls	r7, r1, #16
 8007536:	d55d      	bpl.n	80075f4 <pool_func_mp_array_f32+0x128>
 8007538:	2e00      	cmp	r6, #0
 800753a:	d058      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 800753c:	2d00      	cmp	r5, #0
 800753e:	d056      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 8007540:	4663      	mov	r3, ip
 8007542:	2b00      	cmp	r3, #0
 8007544:	d053      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 8007546:	2b01      	cmp	r3, #1
 8007548:	f040 814a 	bne.w	80077e0 <pool_func_mp_array_f32+0x314>
 800754c:	46a2      	mov	sl, r4
 800754e:	4623      	mov	r3, r4
 8007550:	9407      	str	r4, [sp, #28]
 8007552:	9a02      	ldr	r2, [sp, #8]
 8007554:	2700      	movs	r7, #0
 8007556:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800755a:	fb02 f303 	mul.w	r3, r2, r3
 800755e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007562:	46be      	mov	lr, r7
 8007564:	46bc      	mov	ip, r7
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	fa0f f38a 	sxth.w	r3, sl
 800756c:	9309      	str	r3, [sp, #36]	@ 0x24
 800756e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007570:	b23d      	sxth	r5, r7
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	fa0f f088 	sxth.w	r0, r8
 8007578:	42b4      	cmp	r4, r6
 800757a:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80077dc <pool_func_mp_array_f32+0x310>
 800757e:	449c      	add	ip, r3
 8007580:	da12      	bge.n	80075a8 <pool_func_mp_array_f32+0xdc>
 8007582:	4285      	cmp	r5, r0
 8007584:	da0c      	bge.n	80075a0 <pool_func_mp_array_f32+0xd4>
 8007586:	fb04 520b 	mla	r2, r4, fp, r5
 800758a:	462b      	mov	r3, r5
 800758c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8007590:	3301      	adds	r3, #1
 8007592:	ecb2 7a01 	vldmia	r2!, {s14}
 8007596:	b219      	sxth	r1, r3
 8007598:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800759c:	4281      	cmp	r1, r0
 800759e:	dbf7      	blt.n	8007590 <pool_func_mp_array_f32+0xc4>
 80075a0:	3401      	adds	r4, #1
 80075a2:	b224      	sxth	r4, r4
 80075a4:	42b4      	cmp	r4, r6
 80075a6:	dbec      	blt.n	8007582 <pool_func_mp_array_f32+0xb6>
 80075a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075aa:	f10e 0e01 	add.w	lr, lr, #1
 80075ae:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80075b2:	9b05      	ldr	r3, [sp, #20]
 80075b4:	fa0f fe8e 	sxth.w	lr, lr
 80075b8:	4498      	add	r8, r3
 80075ba:	441f      	add	r7, r3
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	edcc 7a00 	vstr	s15, [ip]
 80075c2:	fa1f f888 	uxth.w	r8, r8
 80075c6:	4573      	cmp	r3, lr
 80075c8:	b2bf      	uxth	r7, r7
 80075ca:	46f4      	mov	ip, lr
 80075cc:	dccf      	bgt.n	800756e <pool_func_mp_array_f32+0xa2>
 80075ce:	9a07      	ldr	r2, [sp, #28]
 80075d0:	9906      	ldr	r1, [sp, #24]
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	3201      	adds	r2, #1
 80075d6:	448a      	add	sl, r1
 80075d8:	b212      	sxth	r2, r2
 80075da:	440b      	add	r3, r1
 80075dc:	9903      	ldr	r1, [sp, #12]
 80075de:	fa1f fa8a 	uxth.w	sl, sl
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	9207      	str	r2, [sp, #28]
 80075e6:	4291      	cmp	r1, r2
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	dcb1      	bgt.n	8007552 <pool_func_mp_array_f32+0x86>
 80075ee:	b011      	add	sp, #68	@ 0x44
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	9903      	ldr	r1, [sp, #12]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d0f9      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 80075fa:	9902      	ldr	r1, [sp, #8]
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d0f6      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 8007600:	4661      	mov	r1, ip
 8007602:	2900      	cmp	r1, #0
 8007604:	d0f3      	beq.n	80075ee <pool_func_mp_array_f32+0x122>
 8007606:	2901      	cmp	r1, #1
 8007608:	9901      	ldr	r1, [sp, #4]
 800760a:	d163      	bne.n	80076d4 <pool_func_mp_array_f32+0x208>
 800760c:	1a8a      	subs	r2, r1, r2
 800760e:	9904      	ldr	r1, [sp, #16]
 8007610:	1ac9      	subs	r1, r1, r3
 8007612:	425b      	negs	r3, r3
 8007614:	b292      	uxth	r2, r2
 8007616:	b29b      	uxth	r3, r3
 8007618:	9204      	str	r2, [sp, #16]
 800761a:	b28a      	uxth	r2, r1
 800761c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800761e:	2300      	movs	r3, #0
 8007620:	920a      	str	r2, [sp, #40]	@ 0x28
 8007622:	9307      	str	r3, [sp, #28]
 8007624:	9a02      	ldr	r2, [sp, #8]
 8007626:	2700      	movs	r7, #0
 8007628:	fb02 f303 	mul.w	r3, r2, r3
 800762c:	9a04      	ldr	r2, [sp, #16]
 800762e:	46bc      	mov	ip, r7
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	b216      	sxth	r6, r2
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 800763c:	b21b      	sxth	r3, r3
 800763e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007640:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007642:	fa0f f58e 	sxth.w	r5, lr
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	fa0f f48a 	sxth.w	r4, sl
 800764c:	428e      	cmp	r6, r1
 800764e:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80077dc <pool_func_mp_array_f32+0x310>
 8007652:	449c      	add	ip, r3
 8007654:	dd1c      	ble.n	8007690 <pool_func_mp_array_f32+0x1c4>
 8007656:	42a5      	cmp	r5, r4
 8007658:	da16      	bge.n	8007688 <pool_func_mp_array_f32+0x1bc>
 800765a:	4588      	cmp	r8, r1
 800765c:	fb01 f20b 	mul.w	r2, r1, fp
 8007660:	dd12      	ble.n	8007688 <pool_func_mp_array_f32+0x1bc>
 8007662:	442a      	add	r2, r5
 8007664:	462b      	mov	r3, r5
 8007666:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800766a:	ea41 0003 	orr.w	r0, r1, r3
 800766e:	0400      	lsls	r0, r0, #16
 8007670:	d405      	bmi.n	800767e <pool_func_mp_array_f32+0x1b2>
 8007672:	459b      	cmp	fp, r3
 8007674:	dd03      	ble.n	800767e <pool_func_mp_array_f32+0x1b2>
 8007676:	ed92 7a00 	vldr	s14, [r2]
 800767a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800767e:	3301      	adds	r3, #1
 8007680:	3204      	adds	r2, #4
 8007682:	b218      	sxth	r0, r3
 8007684:	42a0      	cmp	r0, r4
 8007686:	dbf0      	blt.n	800766a <pool_func_mp_array_f32+0x19e>
 8007688:	3101      	adds	r1, #1
 800768a:	b209      	sxth	r1, r1
 800768c:	42b1      	cmp	r1, r6
 800768e:	dbe2      	blt.n	8007656 <pool_func_mp_array_f32+0x18a>
 8007690:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007692:	3701      	adds	r7, #1
 8007694:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007698:	9b05      	ldr	r3, [sp, #20]
 800769a:	b23f      	sxth	r7, r7
 800769c:	449a      	add	sl, r3
 800769e:	449e      	add	lr, r3
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	edcc 7a00 	vstr	s15, [ip]
 80076a6:	fa1f fa8a 	uxth.w	sl, sl
 80076aa:	42bb      	cmp	r3, r7
 80076ac:	fa1f fe8e 	uxth.w	lr, lr
 80076b0:	46bc      	mov	ip, r7
 80076b2:	dcc5      	bgt.n	8007640 <pool_func_mp_array_f32+0x174>
 80076b4:	9a07      	ldr	r2, [sp, #28]
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	9906      	ldr	r1, [sp, #24]
 80076ba:	3201      	adds	r2, #1
 80076bc:	440b      	add	r3, r1
 80076be:	b212      	sxth	r2, r2
 80076c0:	9903      	ldr	r1, [sp, #12]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	9207      	str	r2, [sp, #28]
 80076c6:	4291      	cmp	r1, r2
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	4613      	mov	r3, r2
 80076cc:	dcaa      	bgt.n	8007624 <pool_func_mp_array_f32+0x158>
 80076ce:	b011      	add	sp, #68	@ 0x44
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	1a88      	subs	r0, r1, r2
 80076d6:	9904      	ldr	r1, [sp, #16]
 80076d8:	4252      	negs	r2, r2
 80076da:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80076de:	1ac9      	subs	r1, r1, r3
 80076e0:	425b      	negs	r3, r3
 80076e2:	b292      	uxth	r2, r2
 80076e4:	46e6      	mov	lr, ip
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	b280      	uxth	r0, r0
 80076ea:	9208      	str	r2, [sp, #32]
 80076ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076ee:	b28a      	uxth	r2, r1
 80076f0:	2300      	movs	r3, #0
 80076f2:	9007      	str	r0, [sp, #28]
 80076f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80076f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076f8:	9a02      	ldr	r2, [sp, #8]
 80076fa:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
 8007702:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8007706:	920a      	str	r2, [sp, #40]	@ 0x28
 8007708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800770a:	930d      	str	r3, [sp, #52]	@ 0x34
 800770c:	2300      	movs	r3, #0
 800770e:	9201      	str	r2, [sp, #4]
 8007710:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007712:	930c      	str	r3, [sp, #48]	@ 0x30
 8007714:	9204      	str	r2, [sp, #16]
 8007716:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007718:	f04f 0c00 	mov.w	ip, #0
 800771c:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8007720:	4413      	add	r3, r2
 8007722:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8007726:	4667      	mov	r7, ip
 8007728:	fb0e f303 	mul.w	r3, lr, r3
 800772c:	9309      	str	r3, [sp, #36]	@ 0x24
 800772e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007730:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80077dc <pool_func_mp_array_f32+0x310>
 8007734:	42b1      	cmp	r1, r6
 8007736:	da1e      	bge.n	8007776 <pool_func_mp_array_f32+0x2aa>
 8007738:	42a5      	cmp	r5, r4
 800773a:	da18      	bge.n	800776e <pool_func_mp_array_f32+0x2a2>
 800773c:	4541      	cmp	r1, r8
 800773e:	fb01 f30b 	mul.w	r3, r1, fp
 8007742:	da14      	bge.n	800776e <pool_func_mp_array_f32+0x2a2>
 8007744:	195a      	adds	r2, r3, r5
 8007746:	462b      	mov	r3, r5
 8007748:	fb0e 7202 	mla	r2, lr, r2, r7
 800774c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8007750:	ea41 0003 	orr.w	r0, r1, r3
 8007754:	0400      	lsls	r0, r0, #16
 8007756:	d405      	bmi.n	8007764 <pool_func_mp_array_f32+0x298>
 8007758:	459b      	cmp	fp, r3
 800775a:	dd03      	ble.n	8007764 <pool_func_mp_array_f32+0x298>
 800775c:	ed92 7a00 	vldr	s14, [r2]
 8007760:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007764:	3301      	adds	r3, #1
 8007766:	4452      	add	r2, sl
 8007768:	b218      	sxth	r0, r3
 800776a:	42a0      	cmp	r0, r4
 800776c:	dbf0      	blt.n	8007750 <pool_func_mp_array_f32+0x284>
 800776e:	3101      	adds	r1, #1
 8007770:	b209      	sxth	r1, r1
 8007772:	42b1      	cmp	r1, r6
 8007774:	dbe0      	blt.n	8007738 <pool_func_mp_array_f32+0x26c>
 8007776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007778:	f10c 0c01 	add.w	ip, ip, #1
 800777c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800777e:	443b      	add	r3, r7
 8007780:	fa0f fc8c 	sxth.w	ip, ip
 8007784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007788:	45f4      	cmp	ip, lr
 800778a:	4667      	mov	r7, ip
 800778c:	edc3 7a00 	vstr	s15, [r3]
 8007790:	dbcd      	blt.n	800772e <pool_func_mp_array_f32+0x262>
 8007792:	9a01      	ldr	r2, [sp, #4]
 8007794:	9805      	ldr	r0, [sp, #20]
 8007796:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007798:	4402      	add	r2, r0
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	3101      	adds	r1, #1
 800779e:	b292      	uxth	r2, r2
 80077a0:	4403      	add	r3, r0
 80077a2:	b209      	sxth	r1, r1
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	9a02      	ldr	r2, [sp, #8]
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	460b      	mov	r3, r1
 80077ae:	428a      	cmp	r2, r1
 80077b0:	910c      	str	r1, [sp, #48]	@ 0x30
 80077b2:	dcb0      	bgt.n	8007716 <pool_func_mp_array_f32+0x24a>
 80077b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077b6:	9b08      	ldr	r3, [sp, #32]
 80077b8:	3101      	adds	r1, #1
 80077ba:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80077be:	b209      	sxth	r1, r1
 80077c0:	4402      	add	r2, r0
 80077c2:	4403      	add	r3, r0
 80077c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80077c6:	b292      	uxth	r2, r2
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	9a03      	ldr	r2, [sp, #12]
 80077ce:	9308      	str	r3, [sp, #32]
 80077d0:	460b      	mov	r3, r1
 80077d2:	428a      	cmp	r2, r1
 80077d4:	dc90      	bgt.n	80076f8 <pool_func_mp_array_f32+0x22c>
 80077d6:	b011      	add	sp, #68	@ 0x44
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	cf000000 	.word	0xcf000000
 80077e0:	4623      	mov	r3, r4
 80077e2:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80077e6:	46e0      	mov	r8, ip
 80077e8:	9408      	str	r4, [sp, #32]
 80077ea:	9409      	str	r4, [sp, #36]	@ 0x24
 80077ec:	9a02      	ldr	r2, [sp, #8]
 80077ee:	f04f 0c00 	mov.w	ip, #0
 80077f2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80077fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8007800:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8007804:	930d      	str	r3, [sp, #52]	@ 0x34
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	4663      	mov	r3, ip
 800780c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800780e:	f04f 0e00 	mov.w	lr, #0
 8007812:	fa0f f58c 	sxth.w	r5, ip
 8007816:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800781a:	4413      	add	r3, r2
 800781c:	4676      	mov	r6, lr
 800781e:	fb08 f303 	mul.w	r3, r8, r3
 8007822:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007824:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8007826:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80077dc <pool_func_mp_array_f32+0x310>
 800782a:	42bc      	cmp	r4, r7
 800782c:	da15      	bge.n	800785a <pool_func_mp_array_f32+0x38e>
 800782e:	4285      	cmp	r5, r0
 8007830:	da0f      	bge.n	8007852 <pool_func_mp_array_f32+0x386>
 8007832:	fb0b 5304 	mla	r3, fp, r4, r5
 8007836:	462a      	mov	r2, r5
 8007838:	fb08 6303 	mla	r3, r8, r3, r6
 800783c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007840:	3201      	adds	r2, #1
 8007842:	ed93 7a00 	vldr	s14, [r3]
 8007846:	4453      	add	r3, sl
 8007848:	b211      	sxth	r1, r2
 800784a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800784e:	4281      	cmp	r1, r0
 8007850:	dbf6      	blt.n	8007840 <pool_func_mp_array_f32+0x374>
 8007852:	3401      	adds	r4, #1
 8007854:	b224      	sxth	r4, r4
 8007856:	42bc      	cmp	r4, r7
 8007858:	dbe9      	blt.n	800782e <pool_func_mp_array_f32+0x362>
 800785a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800785c:	f10e 0e01 	add.w	lr, lr, #1
 8007860:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007862:	4433      	add	r3, r6
 8007864:	fa0f fe8e 	sxth.w	lr, lr
 8007868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800786c:	45c6      	cmp	lr, r8
 800786e:	4676      	mov	r6, lr
 8007870:	edc3 7a00 	vstr	s15, [r3]
 8007874:	dbd6      	blt.n	8007824 <pool_func_mp_array_f32+0x358>
 8007876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007878:	9905      	ldr	r1, [sp, #20]
 800787a:	9b07      	ldr	r3, [sp, #28]
 800787c:	3201      	adds	r2, #1
 800787e:	448c      	add	ip, r1
 8007880:	b212      	sxth	r2, r2
 8007882:	440b      	add	r3, r1
 8007884:	9902      	ldr	r1, [sp, #8]
 8007886:	fa1f fc8c 	uxth.w	ip, ip
 800788a:	b29b      	uxth	r3, r3
 800788c:	920a      	str	r2, [sp, #40]	@ 0x28
 800788e:	4291      	cmp	r1, r2
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	4613      	mov	r3, r2
 8007894:	dcba      	bgt.n	800780c <pool_func_mp_array_f32+0x340>
 8007896:	9a01      	ldr	r2, [sp, #4]
 8007898:	9806      	ldr	r0, [sp, #24]
 800789a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800789c:	4402      	add	r2, r0
 800789e:	9b08      	ldr	r3, [sp, #32]
 80078a0:	3101      	adds	r1, #1
 80078a2:	b292      	uxth	r2, r2
 80078a4:	4403      	add	r3, r0
 80078a6:	b209      	sxth	r1, r1
 80078a8:	9201      	str	r2, [sp, #4]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	9a03      	ldr	r2, [sp, #12]
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	460b      	mov	r3, r1
 80078b2:	428a      	cmp	r2, r1
 80078b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80078b6:	dc99      	bgt.n	80077ec <pool_func_mp_array_f32+0x320>
 80078b8:	e699      	b.n	80075ee <pool_func_mp_array_f32+0x122>
 80078ba:	bf00      	nop

080078bc <forward_lite_dense_if32of32wf32>:
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	ed2d 8b0c 	vpush	{d8-d13}
 80078c4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80078c8:	6801      	ldr	r1, [r0, #0]
 80078ca:	b083      	sub	sp, #12
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80078d4:	9100      	str	r1, [sp, #0]
 80078d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80078da:	4299      	cmp	r1, r3
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	f080 811c 	bcs.w	8007b1a <forward_lite_dense_if32of32wf32+0x25e>
 80078e2:	4607      	mov	r7, r0
 80078e4:	6904      	ldr	r4, [r0, #16]
 80078e6:	0096      	lsls	r6, r2, #2
 80078e8:	9b00      	ldr	r3, [sp, #0]
 80078ea:	68bd      	ldr	r5, [r7, #8]
 80078ec:	eb03 0e06 	add.w	lr, r3, r6
 80078f0:	461e      	mov	r6, r3
 80078f2:	459e      	cmp	lr, r3
 80078f4:	f240 8103 	bls.w	8007afe <forward_lite_dense_if32of32wf32+0x242>
 80078f8:	f1a4 0c10 	sub.w	ip, r4, #16
 80078fc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8007900:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8007904:	f10c 0c01 	add.w	ip, ip, #1
 8007908:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800790c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8007910:	2c0f      	cmp	r4, #15
 8007912:	f240 8107 	bls.w	8007b24 <forward_lite_dense_if32of32wf32+0x268>
 8007916:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800791a:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800791e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8007b74 <forward_lite_dense_if32of32wf32+0x2b8>
 8007922:	4621      	mov	r1, r4
 8007924:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8007928:	3910      	subs	r1, #16
 800792a:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800792e:	3340      	adds	r3, #64	@ 0x40
 8007930:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8007934:	290f      	cmp	r1, #15
 8007936:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800793a:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800793e:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8007942:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007946:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800794a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800794e:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8007952:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8007956:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 800795a:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 800795e:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8007962:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8007966:	eee5 7a86 	vfma.f32	s15, s11, s12
 800796a:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 800796e:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8007972:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8007976:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 800797a:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 800797e:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8007982:	eeed 7a26 	vfma.f32	s15, s26, s13
 8007986:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 800798a:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 800798e:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8007992:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8007996:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 800799a:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800799e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80079a2:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80079a6:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80079aa:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80079ae:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80079b2:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80079b6:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80079ba:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80079be:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80079c2:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80079c6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80079ca:	eee9 7a89 	vfma.f32	s15, s19, s18
 80079ce:	eee8 7a88 	vfma.f32	s15, s17, s16
 80079d2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80079d6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80079da:	eee2 7a22 	vfma.f32	s15, s4, s5
 80079de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80079e2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80079e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80079ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079f2:	d897      	bhi.n	8007924 <forward_lite_dense_if32of32wf32+0x68>
 80079f4:	eb05 020b 	add.w	r2, r5, fp
 80079f8:	f004 010f 	and.w	r1, r4, #15
 80079fc:	4663      	mov	r3, ip
 80079fe:	2903      	cmp	r1, #3
 8007a00:	d95f      	bls.n	8007ac2 <forward_lite_dense_if32of32wf32+0x206>
 8007a02:	edd2 6a01 	vldr	s13, [r2, #4]
 8007a06:	1f08      	subs	r0, r1, #4
 8007a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a0c:	ed93 4a00 	vldr	s8, [r3]
 8007a10:	2803      	cmp	r0, #3
 8007a12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a16:	edd2 4a00 	vldr	s9, [r2]
 8007a1a:	ed93 5a02 	vldr	s10, [r3, #8]
 8007a1e:	edd2 5a02 	vldr	s11, [r2, #8]
 8007a22:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a26:	ed93 6a03 	vldr	s12, [r3, #12]
 8007a2a:	edd2 6a03 	vldr	s13, [r2, #12]
 8007a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a32:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a3a:	eeb0 7a67 	vmov.f32	s14, s15
 8007a3e:	d938      	bls.n	8007ab2 <forward_lite_dense_if32of32wf32+0x1f6>
 8007a40:	edd2 6a05 	vldr	s13, [r2, #20]
 8007a44:	f1a1 0a08 	sub.w	sl, r1, #8
 8007a48:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a4c:	ed93 4a04 	vldr	s8, [r3, #16]
 8007a50:	f1ba 0f03 	cmp.w	sl, #3
 8007a54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a58:	edd2 4a04 	vldr	s9, [r2, #16]
 8007a5c:	ed93 5a06 	vldr	s10, [r3, #24]
 8007a60:	edd2 5a06 	vldr	s11, [r2, #24]
 8007a64:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a68:	ed93 6a07 	vldr	s12, [r3, #28]
 8007a6c:	edd2 6a07 	vldr	s13, [r2, #28]
 8007a70:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a74:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a7c:	d919      	bls.n	8007ab2 <forward_lite_dense_if32of32wf32+0x1f6>
 8007a7e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8007a82:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8007a86:	ed92 4a08 	vldr	s8, [r2, #32]
 8007a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a8e:	edd3 4a08 	vldr	s9, [r3, #32]
 8007a92:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8007a96:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8007a9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a9e:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8007aa2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007aa6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007aaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ab2:	0880      	lsrs	r0, r0, #2
 8007ab4:	f001 0103 	and.w	r1, r1, #3
 8007ab8:	3001      	adds	r0, #1
 8007aba:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007abe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007ac2:	b1a9      	cbz	r1, 8007af0 <forward_lite_dense_if32of32wf32+0x234>
 8007ac4:	edd3 6a00 	vldr	s13, [r3]
 8007ac8:	3901      	subs	r1, #1
 8007aca:	edd2 7a00 	vldr	s15, [r2]
 8007ace:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ad2:	d00d      	beq.n	8007af0 <forward_lite_dense_if32of32wf32+0x234>
 8007ad4:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ad8:	2901      	cmp	r1, #1
 8007ada:	edd2 7a01 	vldr	s15, [r2, #4]
 8007ade:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ae2:	d005      	beq.n	8007af0 <forward_lite_dense_if32of32wf32+0x234>
 8007ae4:	edd2 6a02 	vldr	s13, [r2, #8]
 8007ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007af0:	eca6 7a01 	vstmia	r6!, {s14}
 8007af4:	45b6      	cmp	lr, r6
 8007af6:	444d      	add	r5, r9
 8007af8:	f63f af0a 	bhi.w	8007910 <forward_lite_dense_if32of32wf32+0x54>
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	b9b3      	cbnz	r3, 8007b30 <forward_lite_dense_if32of32wf32+0x274>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	0096      	lsls	r6, r2, #2
 8007b06:	9901      	ldr	r1, [sp, #4]
 8007b08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007b0c:	693c      	ldr	r4, [r7, #16]
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	f63f aee7 	bhi.w	80078e8 <forward_lite_dense_if32of32wf32+0x2c>
 8007b1a:	b003      	add	sp, #12
 8007b1c:	ecbd 8b0c 	vpop	{d8-d13}
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	4621      	mov	r1, r4
 8007b26:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007b74 <forward_lite_dense_if32of32wf32+0x2b8>
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	e766      	b.n	80079fe <forward_lite_dense_if32of32wf32+0x142>
 8007b30:	2a00      	cmp	r2, #0
 8007b32:	d0e6      	beq.n	8007b02 <forward_lite_dense_if32of32wf32+0x246>
 8007b34:	9a00      	ldr	r2, [sp, #0]
 8007b36:	ed93 7a00 	vldr	s14, [r3]
 8007b3a:	edd2 7a00 	vldr	s15, [r2]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b44:	edc2 7a00 	vstr	s15, [r2]
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	2a01      	cmp	r2, #1
 8007b4c:	d9d9      	bls.n	8007b02 <forward_lite_dense_if32of32wf32+0x246>
 8007b4e:	1d19      	adds	r1, r3, #4
 8007b50:	2301      	movs	r3, #1
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	ed91 7a00 	vldr	s14, [r1]
 8007b58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	edd2 7a00 	vldr	s15, [r2]
 8007b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b66:	ece1 7a01 	vstmia	r1!, {s15}
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d8f0      	bhi.n	8007b52 <forward_lite_dense_if32of32wf32+0x296>
 8007b70:	e7c7      	b.n	8007b02 <forward_lite_dense_if32of32wf32+0x246>
 8007b72:	bf00      	nop
 8007b74:	00000000 	.word	0x00000000

08007b78 <forward_lite_dense_if32of32wf32_lut4>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	b08d      	sub	sp, #52	@ 0x34
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	9005      	str	r0, [sp, #20]
 8007b84:	4618      	mov	r0, r3
 8007b86:	920a      	str	r2, [sp, #40]	@ 0x28
 8007b88:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8007b8a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007b96:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	b126      	cbz	r6, 8007ba6 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8007b9c:	2240      	movs	r2, #64	@ 0x40
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	f000 fbe0 	bl	8008364 <st_int8_copy>
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	9a08      	ldr	r2, [sp, #32]
 8007baa:	4293      	cmp	r3, r2
 8007bac:	f080 80f7 	bcs.w	8007d9e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8007bb0:	08eb      	lsrs	r3, r5, #3
 8007bb2:	f005 0101 	and.w	r1, r5, #1
 8007bb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bb8:	f025 0801 	bic.w	r8, r5, #1
 8007bbc:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	9102      	str	r1, [sp, #8]
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f104 0b20 	add.w	fp, r4, #32
 8007bcc:	00a9      	lsls	r1, r5, #2
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007bd4:	9b05      	ldr	r3, [sp, #20]
 8007bd6:	9207      	str	r2, [sp, #28]
 8007bd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bdc:	9a07      	ldr	r2, [sp, #28]
 8007bde:	eb03 0902 	add.w	r9, r3, r2
 8007be2:	f1ab 0220 	sub.w	r2, fp, #32
 8007be6:	4599      	cmp	r9, r3
 8007be8:	9206      	str	r2, [sp, #24]
 8007bea:	f240 80db 	bls.w	8007da4 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8007bee:	469e      	mov	lr, r3
 8007bf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bf2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80b4 	beq.w	8007d68 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8007dc8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8007c06:	18d4      	adds	r4, r2, r3
 8007c08:	465b      	mov	r3, fp
 8007c0a:	7816      	ldrb	r6, [r2, #0]
 8007c0c:	3204      	adds	r2, #4
 8007c0e:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8007c12:	3320      	adds	r3, #32
 8007c14:	f006 070f 	and.w	r7, r6, #15
 8007c18:	0936      	lsrs	r6, r6, #4
 8007c1a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8007c1e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007c22:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8007c26:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007c2a:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8007c2e:	edd7 7a00 	vldr	s15, [r7]
 8007c32:	ed96 3a00 	vldr	s6, [r6]
 8007c36:	092e      	lsrs	r6, r5, #4
 8007c38:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007c3c:	f005 050f 	and.w	r5, r5, #15
 8007c40:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007c44:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8007c48:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007c4c:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8007c50:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007c54:	ed96 3a00 	vldr	s6, [r6]
 8007c58:	ed95 4a00 	vldr	s8, [r5]
 8007c5c:	090d      	lsrs	r5, r1, #4
 8007c5e:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8007c62:	f001 010f 	and.w	r1, r1, #15
 8007c66:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007c6a:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8007c6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c72:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8007c76:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8007c7a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c7e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007c82:	ed95 4a00 	vldr	s8, [r5]
 8007c86:	ed91 5a00 	vldr	s10, [r1]
 8007c8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007c8e:	42a2      	cmp	r2, r4
 8007c90:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8007c94:	f001 010f 	and.w	r1, r1, #15
 8007c98:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c9c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007ca0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ca4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007ca8:	ed95 5a00 	vldr	s10, [r5]
 8007cac:	ed91 6a00 	vldr	s12, [r1]
 8007cb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007cb4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007cbc:	d1a5      	bne.n	8007c0a <forward_lite_dense_if32of32wf32_lut4+0x92>
 8007cbe:	4656      	mov	r6, sl
 8007cc0:	4546      	cmp	r6, r8
 8007cc2:	d257      	bcs.n	8007d74 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	f106 0208 	add.w	r2, r6, #8
 8007cca:	1e61      	subs	r1, r4, #1
 8007ccc:	1b9d      	subs	r5, r3, r6
 8007cce:	08ef      	lsrs	r7, r5, #3
 8007cd0:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8007cd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cd8:	3208      	adds	r2, #8
 8007cda:	ed52 5a03 	vldr	s11, [r2, #-12]
 8007cde:	f003 0c0f 	and.w	ip, r3, #15
 8007ce2:	091b      	lsrs	r3, r3, #4
 8007ce4:	ed52 6a04 	vldr	s13, [r2, #-16]
 8007ce8:	42a9      	cmp	r1, r5
 8007cea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007cee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007cf2:	eddc 7a00 	vldr	s15, [ip]
 8007cf6:	ed93 6a00 	vldr	s12, [r3]
 8007cfa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007cfe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d06:	d1e5      	bne.n	8007cd4 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8007d08:	3701      	adds	r7, #1
 8007d0a:	19e2      	adds	r2, r4, r7
 8007d0c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8007d10:	9b02      	ldr	r3, [sp, #8]
 8007d12:	b30b      	cbz	r3, 8007d58 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8007d14:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007d18:	edd6 7a00 	vldr	s15, [r6]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007d22:	edd3 6a00 	vldr	s13, [r3]
 8007d26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d2a:	ecae 7a01 	vstmia	lr!, {s14}
 8007d2e:	45f1      	cmp	r9, lr
 8007d30:	f63f af62 	bhi.w	8007bf8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8007d34:	9b05      	ldr	r3, [sp, #20]
 8007d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d38:	1899      	adds	r1, r3, r2
 8007d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d3c:	b9e3      	cbnz	r3, 8007d78 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8007d3e:	9b08      	ldr	r3, [sp, #32]
 8007d40:	428b      	cmp	r3, r1
 8007d42:	d92c      	bls.n	8007d9e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8007d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d46:	4498      	add	r8, r3
 8007d48:	449a      	add	sl, r3
 8007d4a:	449b      	add	fp, r3
 8007d4c:	9b05      	ldr	r3, [sp, #20]
 8007d4e:	4599      	cmp	r9, r3
 8007d50:	d92a      	bls.n	8007da8 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8007d52:	460b      	mov	r3, r1
 8007d54:	9105      	str	r1, [sp, #20]
 8007d56:	e741      	b.n	8007bdc <forward_lite_dense_if32of32wf32_lut4+0x64>
 8007d58:	ecae 7a01 	vstmia	lr!, {s14}
 8007d5c:	45f1      	cmp	r9, lr
 8007d5e:	d9e9      	bls.n	8007d34 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f47f af4c 	bne.w	8007c00 <forward_lite_dense_if32of32wf32_lut4+0x88>
 8007d68:	9e06      	ldr	r6, [sp, #24]
 8007d6a:	4614      	mov	r4, r2
 8007d6c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8007dc8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8007d70:	4546      	cmp	r6, r8
 8007d72:	d3a7      	bcc.n	8007cc4 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	e7cb      	b.n	8007d10 <forward_lite_dense_if32of32wf32_lut4+0x198>
 8007d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0df      	beq.n	8007d3e <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007d82:	1acb      	subs	r3, r1, r3
 8007d84:	edd3 7a00 	vldr	s15, [r3]
 8007d88:	ecb2 7a01 	vldmia	r2!, {s14}
 8007d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d90:	ece3 7a01 	vstmia	r3!, {s15}
 8007d94:	428b      	cmp	r3, r1
 8007d96:	d1f5      	bne.n	8007d84 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8007d98:	9b08      	ldr	r3, [sp, #32]
 8007d9a:	428b      	cmp	r3, r1
 8007d9c:	d8d2      	bhi.n	8007d44 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8007d9e:	b00d      	add	sp, #52	@ 0x34
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	4619      	mov	r1, r3
 8007da6:	e7c8      	b.n	8007d3a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8007da8:	9b07      	ldr	r3, [sp, #28]
 8007daa:	1acb      	subs	r3, r1, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007db0:	ed92 7a00 	vldr	s14, [r2]
 8007db4:	ecf0 7a01 	vldmia	r0!, {s15}
 8007db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dbc:	ece2 7a01 	vstmia	r2!, {s15}
 8007dc0:	428a      	cmp	r2, r1
 8007dc2:	d1f5      	bne.n	8007db0 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8007dc4:	e7f2      	b.n	8007dac <forward_lite_dense_if32of32wf32_lut4+0x234>
 8007dc6:	bf00      	nop
 8007dc8:	00000000 	.word	0x00000000

08007dcc <forward_lite_dense_if32of32wf32_lut8>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	b091      	sub	sp, #68	@ 0x44
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dd8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8007dda:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8007dde:	9003      	str	r0, [sp, #12]
 8007de0:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8007de4:	fb02 f303 	mul.w	r3, r2, r3
 8007de8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007dec:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dee:	b134      	cbz	r4, 8007dfe <forward_lite_dense_if32of32wf32_lut8+0x32>
 8007df0:	4648      	mov	r0, r9
 8007df2:	46a1      	mov	r9, r4
 8007df4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f000 fab3 	bl	8008364 <st_int8_copy>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e02:	4293      	cmp	r3, r2
 8007e04:	f080 8084 	bcs.w	8007f10 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8007e08:	4bb7      	ldr	r3, [pc, #732]	@ (80080e8 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8007e0a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007e0c:	4443      	add	r3, r8
 8007e0e:	9d03      	ldr	r5, [sp, #12]
 8007e10:	0092      	lsls	r2, r2, #2
 8007e12:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 80080ec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e1a:	f103 0120 	add.w	r1, r3, #32
 8007e1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e20:	445b      	add	r3, fp
 8007e22:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	eb0b 0301 	add.w	r3, fp, r1
 8007e2c:	469a      	mov	sl, r3
 8007e2e:	469e      	mov	lr, r3
 8007e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e32:	eb05 0c03 	add.w	ip, r5, r3
 8007e36:	45ac      	cmp	ip, r5
 8007e38:	d952      	bls.n	8007ee0 <forward_lite_dense_if32of32wf32_lut8+0x114>
 8007e3a:	9800      	ldr	r0, [sp, #0]
 8007e3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e3e:	f100 011f 	add.w	r1, r0, #31
 8007e42:	eba0 020b 	sub.w	r2, r0, fp
 8007e46:	445b      	add	r3, fp
 8007e48:	9101      	str	r1, [sp, #4]
 8007e4a:	eba1 010b 	sub.w	r1, r1, fp
 8007e4e:	0952      	lsrs	r2, r2, #5
 8007e50:	9306      	str	r3, [sp, #24]
 8007e52:	0889      	lsrs	r1, r1, #2
 8007e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e56:	3101      	adds	r1, #1
 8007e58:	9102      	str	r1, [sp, #8]
 8007e5a:	1c51      	adds	r1, r2, #1
 8007e5c:	00d2      	lsls	r2, r2, #3
 8007e5e:	3210      	adds	r2, #16
 8007e60:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e62:	00ca      	lsls	r2, r1, #3
 8007e64:	9208      	str	r2, [sp, #32]
 8007e66:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8007e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e6c:	1f02      	subs	r2, r0, #4
 8007e6e:	9204      	str	r2, [sp, #16]
 8007e70:	f10b 0204 	add.w	r2, fp, #4
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	f1b8 0f07 	cmp.w	r8, #7
 8007e7a:	d84c      	bhi.n	8007f16 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8007e7c:	45d3      	cmp	fp, sl
 8007e7e:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80080ec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8007e82:	d20f      	bcs.n	8007ea4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8007e84:	4659      	mov	r1, fp
 8007e86:	4618      	mov	r0, r3
 8007e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8c:	ecf1 7a01 	vldmia	r1!, {s15}
 8007e90:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8007e94:	4551      	cmp	r1, sl
 8007e96:	edd2 6a00 	vldr	s13, [r2]
 8007e9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e9e:	d3f3      	bcc.n	8007e88 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8007ea0:	9a02      	ldr	r2, [sp, #8]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	eca5 7a01 	vstmia	r5!, {s14}
 8007ea8:	45ac      	cmp	ip, r5
 8007eaa:	d8e4      	bhi.n	8007e76 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	46f3      	mov	fp, lr
 8007eb0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007eb2:	1899      	adds	r1, r3, r2
 8007eb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007eb6:	b9c3      	cbnz	r3, 8007eea <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8007eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eba:	428b      	cmp	r3, r1
 8007ebc:	d928      	bls.n	8007f10 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8007ebe:	9b00      	ldr	r3, [sp, #0]
 8007ec0:	9a05      	ldr	r2, [sp, #20]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	4492      	add	sl, r2
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	459c      	cmp	ip, r3
 8007ecc:	f240 821e 	bls.w	800830c <forward_lite_dense_if32of32wf32_lut8+0x540>
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ed4:	4496      	add	lr, r2
 8007ed6:	9103      	str	r1, [sp, #12]
 8007ed8:	eb05 0c03 	add.w	ip, r5, r3
 8007edc:	45ac      	cmp	ip, r5
 8007ede:	d8ac      	bhi.n	8007e3a <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8007ee0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	46f3      	mov	fp, lr
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0e6      	beq.n	8007eb8 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8007eea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0e3      	beq.n	8007eb8 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ef2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007ef4:	1acb      	subs	r3, r1, r3
 8007ef6:	edd3 7a00 	vldr	s15, [r3]
 8007efa:	ecb2 7a01 	vldmia	r2!, {s14}
 8007efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f02:	ece3 7a01 	vstmia	r3!, {s15}
 8007f06:	428b      	cmp	r3, r1
 8007f08:	d1f5      	bne.n	8007ef6 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8007f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	d8d6      	bhi.n	8007ebe <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8007f10:	b011      	add	sp, #68	@ 0x44
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	f003 0203 	and.w	r2, r3, #3
 8007f1a:	2a02      	cmp	r2, #2
 8007f1c:	f000 81ee 	beq.w	80082fc <forward_lite_dense_if32of32wf32_lut8+0x530>
 8007f20:	2a03      	cmp	r2, #3
 8007f22:	f000 80e5 	beq.w	80080f0 <forward_lite_dense_if32of32wf32_lut8+0x324>
 8007f26:	2a01      	cmp	r2, #1
 8007f28:	f000 81d2 	beq.w	80082d0 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8007f2c:	9a06      	ldr	r2, [sp, #24]
 8007f2e:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80080ec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8007f32:	4593      	cmp	fp, r2
 8007f34:	f200 81e8 	bhi.w	8008308 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8007f38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f3a:	f103 0208 	add.w	r2, r3, #8
 8007f3e:	f10b 0120 	add.w	r1, fp, #32
 8007f42:	18c4      	adds	r4, r0, r3
 8007f44:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8007f48:	3208      	adds	r2, #8
 8007f4a:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8007f4e:	3120      	adds	r1, #32
 8007f50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007f54:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 8007f58:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8007f5c:	edd0 7a00 	vldr	s15, [r0]
 8007f60:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8007f64:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007f68:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8007f6c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007f70:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 8007f74:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 8007f78:	edd0 2a00 	vldr	s5, [r0]
 8007f7c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8007f80:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007f84:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 8007f88:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007f8c:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8007f90:	ed90 3a00 	vldr	s6, [r0]
 8007f94:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8007f98:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007f9c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007fa0:	ed90 4a00 	vldr	s8, [r0]
 8007fa4:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8007fa8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007fac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007fb0:	edd0 4a00 	vldr	s9, [r0]
 8007fb4:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8007fb8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007fbc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007fc0:	ed90 5a00 	vldr	s10, [r0]
 8007fc4:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8007fc8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007fcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007fd0:	edd0 5a00 	vldr	s11, [r0]
 8007fd4:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8007fd8:	42a2      	cmp	r2, r4
 8007fda:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007fde:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007fe2:	ed90 6a00 	vldr	s12, [r0]
 8007fe6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fee:	d1a9      	bne.n	8007f44 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8007ff0:	9a08      	ldr	r2, [sp, #32]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff6:	4572      	cmp	r2, lr
 8007ff8:	f4bf af54 	bcs.w	8007ea4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8007ffc:	7819      	ldrb	r1, [r3, #0]
 8007ffe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008002:	edd1 7a00 	vldr	s15, [r1]
 8008006:	4611      	mov	r1, r2
 8008008:	ecf1 6a01 	vldmia	r1!, {s13}
 800800c:	458a      	cmp	sl, r1
 800800e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008012:	d963      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8008014:	7859      	ldrb	r1, [r3, #1]
 8008016:	edd2 6a01 	vldr	s13, [r2, #4]
 800801a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800801e:	edd1 7a00 	vldr	s15, [r1]
 8008022:	f102 0108 	add.w	r1, r2, #8
 8008026:	458a      	cmp	sl, r1
 8008028:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800802c:	d956      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 800802e:	7899      	ldrb	r1, [r3, #2]
 8008030:	edd2 6a02 	vldr	s13, [r2, #8]
 8008034:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008038:	edd1 7a00 	vldr	s15, [r1]
 800803c:	f102 010c 	add.w	r1, r2, #12
 8008040:	458a      	cmp	sl, r1
 8008042:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008046:	d949      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8008048:	78d9      	ldrb	r1, [r3, #3]
 800804a:	edd2 6a03 	vldr	s13, [r2, #12]
 800804e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008052:	edd1 7a00 	vldr	s15, [r1]
 8008056:	f102 0110 	add.w	r1, r2, #16
 800805a:	458a      	cmp	sl, r1
 800805c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008060:	d93c      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8008062:	7919      	ldrb	r1, [r3, #4]
 8008064:	edd2 6a04 	vldr	s13, [r2, #16]
 8008068:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800806c:	edd1 7a00 	vldr	s15, [r1]
 8008070:	f102 0114 	add.w	r1, r2, #20
 8008074:	458a      	cmp	sl, r1
 8008076:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800807a:	d92f      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 800807c:	7959      	ldrb	r1, [r3, #5]
 800807e:	edd2 6a05 	vldr	s13, [r2, #20]
 8008082:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008086:	edd1 7a00 	vldr	s15, [r1]
 800808a:	f102 0118 	add.w	r1, r2, #24
 800808e:	458a      	cmp	sl, r1
 8008090:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008094:	d922      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8008096:	7999      	ldrb	r1, [r3, #6]
 8008098:	edd2 6a06 	vldr	s13, [r2, #24]
 800809c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80080a0:	edd1 7a00 	vldr	s15, [r1]
 80080a4:	f102 011c 	add.w	r1, r2, #28
 80080a8:	458a      	cmp	sl, r1
 80080aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080ae:	d915      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 80080b0:	79d9      	ldrb	r1, [r3, #7]
 80080b2:	edd2 6a07 	vldr	s13, [r2, #28]
 80080b6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80080ba:	edd1 7a00 	vldr	s15, [r1]
 80080be:	f102 0120 	add.w	r1, r2, #32
 80080c2:	458a      	cmp	sl, r1
 80080c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c8:	d908      	bls.n	80080dc <forward_lite_dense_if32of32wf32_lut8+0x310>
 80080ca:	7a19      	ldrb	r1, [r3, #8]
 80080cc:	edd2 7a08 	vldr	s15, [r2, #32]
 80080d0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80080d4:	edd1 6a00 	vldr	s13, [r1]
 80080d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080dc:	9901      	ldr	r1, [sp, #4]
 80080de:	1a8a      	subs	r2, r1, r2
 80080e0:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 80080e4:	1c53      	adds	r3, r2, #1
 80080e6:	e6dd      	b.n	8007ea4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80080e8:	3ffffff8 	.word	0x3ffffff8
 80080ec:	00000000 	.word	0x00000000
 80080f0:	eeb0 7a63 	vmov.f32	s14, s7
 80080f4:	465a      	mov	r2, fp
 80080f6:	461f      	mov	r7, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080fe:	ecf0 7a01 	vldmia	r0!, {s15}
 8008102:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008106:	edd1 6a00 	vldr	s13, [r1]
 800810a:	9900      	ldr	r1, [sp, #0]
 800810c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008110:	4288      	cmp	r0, r1
 8008112:	f200 80f7 	bhi.w	8008304 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8008116:	9904      	ldr	r1, [sp, #16]
 8008118:	f103 0411 	add.w	r4, r3, #17
 800811c:	3309      	adds	r3, #9
 800811e:	1a8e      	subs	r6, r1, r2
 8008120:	3224      	adds	r2, #36	@ 0x24
 8008122:	0976      	lsrs	r6, r6, #5
 8008124:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008128:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800812c:	3308      	adds	r3, #8
 800812e:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8008132:	3220      	adds	r2, #32
 8008134:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008138:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 800813c:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8008140:	edd1 7a00 	vldr	s15, [r1]
 8008144:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8008148:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800814c:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8008150:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008154:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8008158:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 800815c:	edd1 2a00 	vldr	s5, [r1]
 8008160:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8008164:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008168:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 800816c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008170:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8008174:	ed91 3a00 	vldr	s6, [r1]
 8008178:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800817c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008180:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008184:	ed91 4a00 	vldr	s8, [r1]
 8008188:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800818c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008190:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008194:	edd1 4a00 	vldr	s9, [r1]
 8008198:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800819c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80081a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80081a4:	ed91 5a00 	vldr	s10, [r1]
 80081a8:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80081ac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80081b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081b4:	edd1 5a00 	vldr	s11, [r1]
 80081b8:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80081c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80081c6:	ed91 6a00 	vldr	s12, [r1]
 80081ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80081d2:	d1a9      	bne.n	8008128 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 80081d4:	3601      	adds	r6, #1
 80081d6:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 80081da:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80081de:	4550      	cmp	r0, sl
 80081e0:	f4bf ae60 	bcs.w	8007ea4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80081ea:	edd2 7a00 	vldr	s15, [r2]
 80081ee:	4602      	mov	r2, r0
 80081f0:	ecf2 6a01 	vldmia	r2!, {s13}
 80081f4:	4592      	cmp	sl, r2
 80081f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081fa:	d963      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80081fc:	785a      	ldrb	r2, [r3, #1]
 80081fe:	edd0 6a01 	vldr	s13, [r0, #4]
 8008202:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008206:	edd2 7a00 	vldr	s15, [r2]
 800820a:	f100 0208 	add.w	r2, r0, #8
 800820e:	4592      	cmp	sl, r2
 8008210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008214:	d956      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8008216:	789a      	ldrb	r2, [r3, #2]
 8008218:	edd0 6a02 	vldr	s13, [r0, #8]
 800821c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008220:	edd2 7a00 	vldr	s15, [r2]
 8008224:	f100 020c 	add.w	r2, r0, #12
 8008228:	4592      	cmp	sl, r2
 800822a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800822e:	d949      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8008230:	78da      	ldrb	r2, [r3, #3]
 8008232:	edd0 6a03 	vldr	s13, [r0, #12]
 8008236:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800823a:	edd2 7a00 	vldr	s15, [r2]
 800823e:	f100 0210 	add.w	r2, r0, #16
 8008242:	4592      	cmp	sl, r2
 8008244:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008248:	d93c      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800824a:	791a      	ldrb	r2, [r3, #4]
 800824c:	edd0 6a04 	vldr	s13, [r0, #16]
 8008250:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008254:	edd2 7a00 	vldr	s15, [r2]
 8008258:	f100 0214 	add.w	r2, r0, #20
 800825c:	4592      	cmp	sl, r2
 800825e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008262:	d92f      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8008264:	795a      	ldrb	r2, [r3, #5]
 8008266:	edd0 6a05 	vldr	s13, [r0, #20]
 800826a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800826e:	edd2 7a00 	vldr	s15, [r2]
 8008272:	f100 0218 	add.w	r2, r0, #24
 8008276:	4596      	cmp	lr, r2
 8008278:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800827c:	d922      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800827e:	799a      	ldrb	r2, [r3, #6]
 8008280:	edd0 6a06 	vldr	s13, [r0, #24]
 8008284:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008288:	edd2 7a00 	vldr	s15, [r2]
 800828c:	f100 021c 	add.w	r2, r0, #28
 8008290:	4596      	cmp	lr, r2
 8008292:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008296:	d915      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8008298:	79da      	ldrb	r2, [r3, #7]
 800829a:	edd0 6a07 	vldr	s13, [r0, #28]
 800829e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80082a2:	edd2 7a00 	vldr	s15, [r2]
 80082a6:	f100 0220 	add.w	r2, r0, #32
 80082aa:	4596      	cmp	lr, r2
 80082ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082b0:	d908      	bls.n	80082c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80082b2:	7a1a      	ldrb	r2, [r3, #8]
 80082b4:	edd0 7a08 	vldr	s15, [r0, #32]
 80082b8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80082bc:	edd2 6a00 	vldr	s13, [r2]
 80082c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	1a10      	subs	r0, r2, r0
 80082c8:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	e5e9      	b.n	8007ea4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80082d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80082d4:	eddb 7a00 	vldr	s15, [fp]
 80082d8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80082dc:	9a07      	ldr	r2, [sp, #28]
 80082de:	ed91 7a00 	vldr	s14, [r1]
 80082e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80082ea:	ecf2 7a01 	vldmia	r2!, {s15}
 80082ee:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80082f2:	edd1 6a00 	vldr	s13, [r1]
 80082f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082fa:	e6fc      	b.n	80080f6 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 80082fc:	eeb0 7a63 	vmov.f32	s14, s7
 8008300:	465a      	mov	r2, fp
 8008302:	e7f0      	b.n	80082e6 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8008304:	463b      	mov	r3, r7
 8008306:	e76a      	b.n	80081de <forward_lite_dense_if32of32wf32_lut8+0x412>
 8008308:	465a      	mov	r2, fp
 800830a:	e674      	b.n	8007ff6 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 800830c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800830e:	1acb      	subs	r3, r1, r3
 8008310:	461a      	mov	r2, r3
 8008312:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8008314:	ed92 7a00 	vldr	s14, [r2]
 8008318:	ecf0 7a01 	vldmia	r0!, {s15}
 800831c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008320:	ece2 7a01 	vstmia	r2!, {s15}
 8008324:	4291      	cmp	r1, r2
 8008326:	d1f5      	bne.n	8008314 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8008328:	e7f2      	b.n	8008310 <forward_lite_dense_if32of32wf32_lut8+0x544>
 800832a:	bf00      	nop

0800832c <forward_lite_nl_relu_if32of32>:
 800832c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008330:	4413      	add	r3, r2
 8008332:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008336:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800833a:	4291      	cmp	r1, r2
 800833c:	d80f      	bhi.n	800835e <forward_lite_nl_relu_if32of32+0x32>
 800833e:	f10c 0104 	add.w	r1, ip, #4
 8008342:	1d13      	adds	r3, r2, #4
 8008344:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8008360 <forward_lite_nl_relu_if32of32+0x34>
 8008348:	eba2 020c 	sub.w	r2, r2, ip
 800834c:	4408      	add	r0, r1
 800834e:	ed73 7a01 	vldmdb	r3!, {s15}
 8008352:	4293      	cmp	r3, r2
 8008354:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008358:	ed60 7a01 	vstmdb	r0!, {s15}
 800835c:	d1f7      	bne.n	800834e <forward_lite_nl_relu_if32of32+0x22>
 800835e:	4770      	bx	lr
 8008360:	00000000 	.word	0x00000000

08008364 <st_int8_copy>:
 8008364:	4288      	cmp	r0, r1
 8008366:	d010      	beq.n	800838a <st_int8_copy+0x26>
 8008368:	b17a      	cbz	r2, 800838a <st_int8_copy+0x26>
 800836a:	4288      	cmp	r0, r1
 800836c:	eb00 0302 	add.w	r3, r0, r2
 8008370:	d20c      	bcs.n	800838c <st_int8_copy+0x28>
 8008372:	428b      	cmp	r3, r1
 8008374:	d90a      	bls.n	800838c <st_int8_copy+0x28>
 8008376:	4283      	cmp	r3, r0
 8008378:	440a      	add	r2, r1
 800837a:	d906      	bls.n	800838a <st_int8_copy+0x26>
 800837c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008380:	4283      	cmp	r3, r0
 8008382:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008386:	d1f9      	bne.n	800837c <st_int8_copy+0x18>
 8008388:	4770      	bx	lr
 800838a:	4770      	bx	lr
 800838c:	078b      	lsls	r3, r1, #30
 800838e:	d102      	bne.n	8008396 <st_int8_copy+0x32>
 8008390:	e008      	b.n	80083a4 <st_int8_copy+0x40>
 8008392:	2a00      	cmp	r2, #0
 8008394:	d04c      	beq.n	8008430 <st_int8_copy+0xcc>
 8008396:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800839a:	3a01      	subs	r2, #1
 800839c:	f801 3b01 	strb.w	r3, [r1], #1
 80083a0:	078b      	lsls	r3, r1, #30
 80083a2:	d1f6      	bne.n	8008392 <st_int8_copy+0x2e>
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80083ac:	d05d      	beq.n	800846a <st_int8_copy+0x106>
 80083ae:	ea41 0300 	orr.w	r3, r1, r0
 80083b2:	075b      	lsls	r3, r3, #29
 80083b4:	d13d      	bne.n	8008432 <st_int8_copy+0xce>
 80083b6:	f1be 0f01 	cmp.w	lr, #1
 80083ba:	d03a      	beq.n	8008432 <st_int8_copy+0xce>
 80083bc:	f100 0310 	add.w	r3, r0, #16
 80083c0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80083c4:	f101 0c10 	add.w	ip, r1, #16
 80083c8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80083cc:	3310      	adds	r3, #16
 80083ce:	f10c 0c10 	add.w	ip, ip, #16
 80083d2:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 80083d6:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 80083da:	4573      	cmp	r3, lr
 80083dc:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 80083e0:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 80083e4:	d1f2      	bne.n	80083cc <st_int8_copy+0x68>
 80083e6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80083ea:	4421      	add	r1, r4
 80083ec:	4420      	add	r0, r4
 80083ee:	f002 0203 	and.w	r2, r2, #3
 80083f2:	b16b      	cbz	r3, 8008410 <st_int8_copy+0xac>
 80083f4:	6804      	ldr	r4, [r0, #0]
 80083f6:	600c      	str	r4, [r1, #0]
 80083f8:	1e5c      	subs	r4, r3, #1
 80083fa:	d005      	beq.n	8008408 <st_int8_copy+0xa4>
 80083fc:	6845      	ldr	r5, [r0, #4]
 80083fe:	2c01      	cmp	r4, #1
 8008400:	604d      	str	r5, [r1, #4]
 8008402:	d001      	beq.n	8008408 <st_int8_copy+0xa4>
 8008404:	6884      	ldr	r4, [r0, #8]
 8008406:	608c      	str	r4, [r1, #8]
 8008408:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800840c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008410:	b162      	cbz	r2, 800842c <st_int8_copy+0xc8>
 8008412:	f990 3000 	ldrsb.w	r3, [r0]
 8008416:	3a01      	subs	r2, #1
 8008418:	700b      	strb	r3, [r1, #0]
 800841a:	d007      	beq.n	800842c <st_int8_copy+0xc8>
 800841c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008420:	2a01      	cmp	r2, #1
 8008422:	704b      	strb	r3, [r1, #1]
 8008424:	d002      	beq.n	800842c <st_int8_copy+0xc8>
 8008426:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800842a:	708b      	strb	r3, [r1, #2]
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	4770      	bx	lr
 8008432:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008436:	460b      	mov	r3, r1
 8008438:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800843c:	4684      	mov	ip, r0
 800843e:	f8dc 8000 	ldr.w	r8, [ip]
 8008442:	3310      	adds	r3, #16
 8008444:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008448:	f10c 0c10 	add.w	ip, ip, #16
 800844c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8008450:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8008454:	f843 8c10 	str.w	r8, [r3, #-16]
 8008458:	f843 7c0c 	str.w	r7, [r3, #-12]
 800845c:	f843 6c08 	str.w	r6, [r3, #-8]
 8008460:	f843 5c04 	str.w	r5, [r3, #-4]
 8008464:	459e      	cmp	lr, r3
 8008466:	d1ea      	bne.n	800843e <st_int8_copy+0xda>
 8008468:	e7bd      	b.n	80083e6 <st_int8_copy+0x82>
 800846a:	0893      	lsrs	r3, r2, #2
 800846c:	f002 0203 	and.w	r2, r2, #3
 8008470:	e7bf      	b.n	80083f2 <st_int8_copy+0x8e>
 8008472:	bf00      	nop

08008474 <ai_array_to_buffer_fmt>:
 8008474:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008478:	2b02      	cmp	r3, #2
 800847a:	d053      	beq.n	8008524 <ai_array_to_buffer_fmt+0xb0>
 800847c:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008480:	4a2b      	ldr	r2, [pc, #172]	@ (8008530 <ai_array_to_buffer_fmt+0xbc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d010      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008486:	dc21      	bgt.n	80084cc <ai_array_to_buffer_fmt+0x58>
 8008488:	4a2a      	ldr	r2, [pc, #168]	@ (8008534 <ai_array_to_buffer_fmt+0xc0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00c      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 800848e:	dd0f      	ble.n	80084b0 <ai_array_to_buffer_fmt+0x3c>
 8008490:	4a29      	ldr	r2, [pc, #164]	@ (8008538 <ai_array_to_buffer_fmt+0xc4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d008      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008496:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 800849e:	4a27      	ldr	r2, [pc, #156]	@ (800853c <ai_array_to_buffer_fmt+0xc8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bf0c      	ite	eq
 80084a4:	4613      	moveq	r3, r2
 80084a6:	2340      	movne	r3, #64	@ 0x40
 80084a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084ac:	4318      	orrs	r0, r3
 80084ae:	4770      	bx	lr
 80084b0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d0f7      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 80084b8:	dd2a      	ble.n	8008510 <ai_array_to_buffer_fmt+0x9c>
 80084ba:	4a21      	ldr	r2, [pc, #132]	@ (8008540 <ai_array_to_buffer_fmt+0xcc>)
 80084bc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084c0:	4293      	cmp	r3, r2
 80084c2:	bf0c      	ite	eq
 80084c4:	4613      	moveq	r3, r2
 80084c6:	2340      	movne	r3, #64	@ 0x40
 80084c8:	4318      	orrs	r0, r3
 80084ca:	4770      	bx	lr
 80084cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008544 <ai_array_to_buffer_fmt+0xd0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d0ea      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 80084d2:	dd0f      	ble.n	80084f4 <ai_array_to_buffer_fmt+0x80>
 80084d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <ai_array_to_buffer_fmt+0xd4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d0e6      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 80084da:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80084de:	4293      	cmp	r3, r2
 80084e0:	d0e2      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 80084e2:	4a1a      	ldr	r2, [pc, #104]	@ (800854c <ai_array_to_buffer_fmt+0xd8>)
 80084e4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bf0c      	ite	eq
 80084ec:	4613      	moveq	r3, r2
 80084ee:	2340      	movne	r3, #64	@ 0x40
 80084f0:	4318      	orrs	r0, r3
 80084f2:	4770      	bx	lr
 80084f4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d0d5      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 80084fc:	3207      	adds	r2, #7
 80084fe:	4293      	cmp	r3, r2
 8008500:	d0d2      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008502:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8008506:	4293      	cmp	r3, r2
 8008508:	bf0c      	ite	eq
 800850a:	4613      	moveq	r3, r2
 800850c:	2340      	movne	r3, #64	@ 0x40
 800850e:	e7cb      	b.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008510:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008514:	4293      	cmp	r3, r2
 8008516:	d0c7      	beq.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008518:	3280      	adds	r2, #128	@ 0x80
 800851a:	4293      	cmp	r3, r2
 800851c:	bf0c      	ite	eq
 800851e:	4613      	moveq	r3, r2
 8008520:	2340      	movne	r3, #64	@ 0x40
 8008522:	e7c1      	b.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 8008524:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <ai_array_to_buffer_fmt+0xdc>)
 8008526:	4003      	ands	r3, r0
 8008528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800852c:	e7bc      	b.n	80084a8 <ai_array_to_buffer_fmt+0x34>
 800852e:	bf00      	nop
 8008530:	00840040 	.word	0x00840040
 8008534:	00040840 	.word	0x00040840
 8008538:	00041040 	.word	0x00041040
 800853c:	0004084f 	.word	0x0004084f
 8008540:	00040447 	.word	0x00040447
 8008544:	00840840 	.word	0x00840840
 8008548:	00841040 	.word	0x00841040
 800854c:	0084084f 	.word	0x0084084f
 8008550:	00803fff 	.word	0x00803fff

08008554 <ai_array_get_byte_size>:
 8008554:	b319      	cbz	r1, 800859e <ai_array_get_byte_size+0x4a>
 8008556:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800855a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800855e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8008562:	11c0      	asrs	r0, r0, #7
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	2a04      	cmp	r2, #4
 800856a:	f103 0307 	add.w	r3, r3, #7
 800856e:	f023 0307 	bic.w	r3, r3, #7
 8008572:	fa23 f10c 	lsr.w	r1, r3, ip
 8008576:	d00b      	beq.n	8008590 <ai_array_get_byte_size+0x3c>
 8008578:	2a08      	cmp	r2, #8
 800857a:	d002      	beq.n	8008582 <ai_array_get_byte_size+0x2e>
 800857c:	3107      	adds	r1, #7
 800857e:	08c8      	lsrs	r0, r1, #3
 8008580:	4770      	bx	lr
 8008582:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008586:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800858a:	3107      	adds	r1, #7
 800858c:	08c8      	lsrs	r0, r1, #3
 800858e:	4770      	bx	lr
 8008590:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008594:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008598:	3107      	adds	r1, #7
 800859a:	08c8      	lsrs	r0, r1, #3
 800859c:	4770      	bx	lr
 800859e:	4608      	mov	r0, r1
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <ai_array_get_data_byte_size>:
 80085a4:	b169      	cbz	r1, 80085c2 <ai_array_get_data_byte_size+0x1e>
 80085a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80085aa:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80085ae:	fb03 f101 	mul.w	r1, r3, r1
 80085b2:	1dcb      	adds	r3, r1, #7
 80085b4:	f023 0307 	bic.w	r3, r3, #7
 80085b8:	fa23 f000 	lsr.w	r0, r3, r0
 80085bc:	3007      	adds	r0, #7
 80085be:	08c0      	lsrs	r0, r0, #3
 80085c0:	4770      	bx	lr
 80085c2:	4608      	mov	r0, r1
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop

080085c8 <ai_version_get>:
 80085c8:	0212      	lsls	r2, r2, #8
 80085ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80085ce:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80085d2:	4770      	bx	lr

080085d4 <ai_platform_version_get>:
 80085d4:	0e01      	lsrs	r1, r0, #24
 80085d6:	2300      	movs	r3, #0
 80085d8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80085dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80085e0:	f361 0307 	bfi	r3, r1, #0, #8
 80085e4:	b082      	sub	sp, #8
 80085e6:	f362 230f 	bfi	r3, r2, #8, #8
 80085ea:	f360 4317 	bfi	r3, r0, #16, #8
 80085ee:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 80085f2:	b002      	add	sp, #8
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop

080085f8 <get_tensor_byte_size>:
 80085f8:	b430      	push	{r4, r5}
 80085fa:	6985      	ldr	r5, [r0, #24]
 80085fc:	68c4      	ldr	r4, [r0, #12]
 80085fe:	6941      	ldr	r1, [r0, #20]
 8008600:	4b06      	ldr	r3, [pc, #24]	@ (800861c <get_tensor_byte_size+0x24>)
 8008602:	6828      	ldr	r0, [r5, #0]
 8008604:	4a06      	ldr	r2, [pc, #24]	@ (8008620 <get_tensor_byte_size+0x28>)
 8008606:	4003      	ands	r3, r0
 8008608:	68c9      	ldr	r1, [r1, #12]
 800860a:	68e0      	ldr	r0, [r4, #12]
 800860c:	4293      	cmp	r3, r2
 800860e:	fb01 f000 	mul.w	r0, r1, r0
 8008612:	d101      	bne.n	8008618 <get_tensor_byte_size+0x20>
 8008614:	3007      	adds	r0, #7
 8008616:	08c0      	lsrs	r0, r0, #3
 8008618:	bc30      	pop	{r4, r5}
 800861a:	4770      	bx	lr
 800861c:	017fffff 	.word	0x017fffff
 8008620:	000400c0 	.word	0x000400c0

08008624 <malloc>:
 8008624:	4b02      	ldr	r3, [pc, #8]	@ (8008630 <malloc+0xc>)
 8008626:	4601      	mov	r1, r0
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f000 b825 	b.w	8008678 <_malloc_r>
 800862e:	bf00      	nop
 8008630:	20000b28 	.word	0x20000b28

08008634 <sbrk_aligned>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	4e0f      	ldr	r6, [pc, #60]	@ (8008674 <sbrk_aligned+0x40>)
 8008638:	460c      	mov	r4, r1
 800863a:	6831      	ldr	r1, [r6, #0]
 800863c:	4605      	mov	r5, r0
 800863e:	b911      	cbnz	r1, 8008646 <sbrk_aligned+0x12>
 8008640:	f001 f834 	bl	80096ac <_sbrk_r>
 8008644:	6030      	str	r0, [r6, #0]
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f001 f82f 	bl	80096ac <_sbrk_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d103      	bne.n	800865a <sbrk_aligned+0x26>
 8008652:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008656:	4620      	mov	r0, r4
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	1cc4      	adds	r4, r0, #3
 800865c:	f024 0403 	bic.w	r4, r4, #3
 8008660:	42a0      	cmp	r0, r4
 8008662:	d0f8      	beq.n	8008656 <sbrk_aligned+0x22>
 8008664:	1a21      	subs	r1, r4, r0
 8008666:	4628      	mov	r0, r5
 8008668:	f001 f820 	bl	80096ac <_sbrk_r>
 800866c:	3001      	adds	r0, #1
 800866e:	d1f2      	bne.n	8008656 <sbrk_aligned+0x22>
 8008670:	e7ef      	b.n	8008652 <sbrk_aligned+0x1e>
 8008672:	bf00      	nop
 8008674:	200011a4 	.word	0x200011a4

08008678 <_malloc_r>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	1ccd      	adds	r5, r1, #3
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	2d00      	cmp	r5, #0
 800868c:	4606      	mov	r6, r0
 800868e:	db01      	blt.n	8008694 <_malloc_r+0x1c>
 8008690:	42a9      	cmp	r1, r5
 8008692:	d904      	bls.n	800869e <_malloc_r+0x26>
 8008694:	230c      	movs	r3, #12
 8008696:	6033      	str	r3, [r6, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008774 <_malloc_r+0xfc>
 80086a2:	f000 f869 	bl	8008778 <__malloc_lock>
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	461c      	mov	r4, r3
 80086ac:	bb44      	cbnz	r4, 8008700 <_malloc_r+0x88>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffbf 	bl	8008634 <sbrk_aligned>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	4604      	mov	r4, r0
 80086ba:	d158      	bne.n	800876e <_malloc_r+0xf6>
 80086bc:	f8d8 4000 	ldr.w	r4, [r8]
 80086c0:	4627      	mov	r7, r4
 80086c2:	2f00      	cmp	r7, #0
 80086c4:	d143      	bne.n	800874e <_malloc_r+0xd6>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	d04b      	beq.n	8008762 <_malloc_r+0xea>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	4639      	mov	r1, r7
 80086ce:	4630      	mov	r0, r6
 80086d0:	eb04 0903 	add.w	r9, r4, r3
 80086d4:	f000 ffea 	bl	80096ac <_sbrk_r>
 80086d8:	4581      	cmp	r9, r0
 80086da:	d142      	bne.n	8008762 <_malloc_r+0xea>
 80086dc:	6821      	ldr	r1, [r4, #0]
 80086de:	1a6d      	subs	r5, r5, r1
 80086e0:	4629      	mov	r1, r5
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ffa6 	bl	8008634 <sbrk_aligned>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d03a      	beq.n	8008762 <_malloc_r+0xea>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	442b      	add	r3, r5
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	f8d8 3000 	ldr.w	r3, [r8]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	bb62      	cbnz	r2, 8008754 <_malloc_r+0xdc>
 80086fa:	f8c8 7000 	str.w	r7, [r8]
 80086fe:	e00f      	b.n	8008720 <_malloc_r+0xa8>
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	1b52      	subs	r2, r2, r5
 8008704:	d420      	bmi.n	8008748 <_malloc_r+0xd0>
 8008706:	2a0b      	cmp	r2, #11
 8008708:	d917      	bls.n	800873a <_malloc_r+0xc2>
 800870a:	1961      	adds	r1, r4, r5
 800870c:	42a3      	cmp	r3, r4
 800870e:	6025      	str	r5, [r4, #0]
 8008710:	bf18      	it	ne
 8008712:	6059      	strne	r1, [r3, #4]
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	bf08      	it	eq
 8008718:	f8c8 1000 	streq.w	r1, [r8]
 800871c:	5162      	str	r2, [r4, r5]
 800871e:	604b      	str	r3, [r1, #4]
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f82f 	bl	8008784 <__malloc_unlock>
 8008726:	f104 000b 	add.w	r0, r4, #11
 800872a:	1d23      	adds	r3, r4, #4
 800872c:	f020 0007 	bic.w	r0, r0, #7
 8008730:	1ac2      	subs	r2, r0, r3
 8008732:	bf1c      	itt	ne
 8008734:	1a1b      	subne	r3, r3, r0
 8008736:	50a3      	strne	r3, [r4, r2]
 8008738:	e7af      	b.n	800869a <_malloc_r+0x22>
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	42a3      	cmp	r3, r4
 800873e:	bf0c      	ite	eq
 8008740:	f8c8 2000 	streq.w	r2, [r8]
 8008744:	605a      	strne	r2, [r3, #4]
 8008746:	e7eb      	b.n	8008720 <_malloc_r+0xa8>
 8008748:	4623      	mov	r3, r4
 800874a:	6864      	ldr	r4, [r4, #4]
 800874c:	e7ae      	b.n	80086ac <_malloc_r+0x34>
 800874e:	463c      	mov	r4, r7
 8008750:	687f      	ldr	r7, [r7, #4]
 8008752:	e7b6      	b.n	80086c2 <_malloc_r+0x4a>
 8008754:	461a      	mov	r2, r3
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	42a3      	cmp	r3, r4
 800875a:	d1fb      	bne.n	8008754 <_malloc_r+0xdc>
 800875c:	2300      	movs	r3, #0
 800875e:	6053      	str	r3, [r2, #4]
 8008760:	e7de      	b.n	8008720 <_malloc_r+0xa8>
 8008762:	230c      	movs	r3, #12
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f80c 	bl	8008784 <__malloc_unlock>
 800876c:	e794      	b.n	8008698 <_malloc_r+0x20>
 800876e:	6005      	str	r5, [r0, #0]
 8008770:	e7d6      	b.n	8008720 <_malloc_r+0xa8>
 8008772:	bf00      	nop
 8008774:	200011a8 	.word	0x200011a8

08008778 <__malloc_lock>:
 8008778:	4801      	ldr	r0, [pc, #4]	@ (8008780 <__malloc_lock+0x8>)
 800877a:	f000 bfe4 	b.w	8009746 <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	200012ec 	.word	0x200012ec

08008784 <__malloc_unlock>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__malloc_unlock+0x8>)
 8008786:	f000 bfdf 	b.w	8009748 <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	200012ec 	.word	0x200012ec

08008790 <srand>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <srand+0x44>)
 8008794:	681d      	ldr	r5, [r3, #0]
 8008796:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008798:	4604      	mov	r4, r0
 800879a:	b9b3      	cbnz	r3, 80087ca <srand+0x3a>
 800879c:	2018      	movs	r0, #24
 800879e:	f7fc f9b9 	bl	8004b14 <__wrap_malloc>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6328      	str	r0, [r5, #48]	@ 0x30
 80087a6:	b920      	cbnz	r0, 80087b2 <srand+0x22>
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <srand+0x48>)
 80087aa:	480c      	ldr	r0, [pc, #48]	@ (80087dc <srand+0x4c>)
 80087ac:	2146      	movs	r1, #70	@ 0x46
 80087ae:	f000 ffdb 	bl	8009768 <__assert_func>
 80087b2:	490b      	ldr	r1, [pc, #44]	@ (80087e0 <srand+0x50>)
 80087b4:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <srand+0x54>)
 80087b6:	e9c0 1300 	strd	r1, r3, [r0]
 80087ba:	4b0b      	ldr	r3, [pc, #44]	@ (80087e8 <srand+0x58>)
 80087bc:	6083      	str	r3, [r0, #8]
 80087be:	230b      	movs	r3, #11
 80087c0:	8183      	strh	r3, [r0, #12]
 80087c2:	2100      	movs	r1, #0
 80087c4:	2001      	movs	r0, #1
 80087c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80087ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80087cc:	2200      	movs	r2, #0
 80087ce:	611c      	str	r4, [r3, #16]
 80087d0:	615a      	str	r2, [r3, #20]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20000b28 	.word	0x20000b28
 80087d8:	08010118 	.word	0x08010118
 80087dc:	0801012f 	.word	0x0801012f
 80087e0:	abcd330e 	.word	0xabcd330e
 80087e4:	e66d1234 	.word	0xe66d1234
 80087e8:	0005deec 	.word	0x0005deec

080087ec <__cvt>:
 80087ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	ec57 6b10 	vmov	r6, r7, d0
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	460c      	mov	r4, r1
 80087f8:	4619      	mov	r1, r3
 80087fa:	463b      	mov	r3, r7
 80087fc:	bfbb      	ittet	lt
 80087fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008802:	461f      	movlt	r7, r3
 8008804:	2300      	movge	r3, #0
 8008806:	232d      	movlt	r3, #45	@ 0x2d
 8008808:	700b      	strb	r3, [r1, #0]
 800880a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800880c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008810:	4691      	mov	r9, r2
 8008812:	f023 0820 	bic.w	r8, r3, #32
 8008816:	bfbc      	itt	lt
 8008818:	4632      	movlt	r2, r6
 800881a:	4616      	movlt	r6, r2
 800881c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008820:	d005      	beq.n	800882e <__cvt+0x42>
 8008822:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008826:	d100      	bne.n	800882a <__cvt+0x3e>
 8008828:	3401      	adds	r4, #1
 800882a:	2102      	movs	r1, #2
 800882c:	e000      	b.n	8008830 <__cvt+0x44>
 800882e:	2103      	movs	r1, #3
 8008830:	ab03      	add	r3, sp, #12
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	ab02      	add	r3, sp, #8
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	ec47 6b10 	vmov	d0, r6, r7
 800883c:	4653      	mov	r3, sl
 800883e:	4622      	mov	r2, r4
 8008840:	f001 f83a 	bl	80098b8 <_dtoa_r>
 8008844:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008848:	4605      	mov	r5, r0
 800884a:	d119      	bne.n	8008880 <__cvt+0x94>
 800884c:	f019 0f01 	tst.w	r9, #1
 8008850:	d00e      	beq.n	8008870 <__cvt+0x84>
 8008852:	eb00 0904 	add.w	r9, r0, r4
 8008856:	2200      	movs	r2, #0
 8008858:	2300      	movs	r3, #0
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f8 f953 	bl	8000b08 <__aeabi_dcmpeq>
 8008862:	b108      	cbz	r0, 8008868 <__cvt+0x7c>
 8008864:	f8cd 900c 	str.w	r9, [sp, #12]
 8008868:	2230      	movs	r2, #48	@ 0x30
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	454b      	cmp	r3, r9
 800886e:	d31e      	bcc.n	80088ae <__cvt+0xc2>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008874:	1b5b      	subs	r3, r3, r5
 8008876:	4628      	mov	r0, r5
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	b004      	add	sp, #16
 800887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008880:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008884:	eb00 0904 	add.w	r9, r0, r4
 8008888:	d1e5      	bne.n	8008856 <__cvt+0x6a>
 800888a:	7803      	ldrb	r3, [r0, #0]
 800888c:	2b30      	cmp	r3, #48	@ 0x30
 800888e:	d10a      	bne.n	80088a6 <__cvt+0xba>
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f8 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800889c:	b918      	cbnz	r0, 80088a6 <__cvt+0xba>
 800889e:	f1c4 0401 	rsb	r4, r4, #1
 80088a2:	f8ca 4000 	str.w	r4, [sl]
 80088a6:	f8da 3000 	ldr.w	r3, [sl]
 80088aa:	4499      	add	r9, r3
 80088ac:	e7d3      	b.n	8008856 <__cvt+0x6a>
 80088ae:	1c59      	adds	r1, r3, #1
 80088b0:	9103      	str	r1, [sp, #12]
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e7d9      	b.n	800886a <__cvt+0x7e>

080088b6 <__exponent>:
 80088b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b8:	2900      	cmp	r1, #0
 80088ba:	bfba      	itte	lt
 80088bc:	4249      	neglt	r1, r1
 80088be:	232d      	movlt	r3, #45	@ 0x2d
 80088c0:	232b      	movge	r3, #43	@ 0x2b
 80088c2:	2909      	cmp	r1, #9
 80088c4:	7002      	strb	r2, [r0, #0]
 80088c6:	7043      	strb	r3, [r0, #1]
 80088c8:	dd29      	ble.n	800891e <__exponent+0x68>
 80088ca:	f10d 0307 	add.w	r3, sp, #7
 80088ce:	461d      	mov	r5, r3
 80088d0:	270a      	movs	r7, #10
 80088d2:	461a      	mov	r2, r3
 80088d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80088d8:	fb07 1416 	mls	r4, r7, r6, r1
 80088dc:	3430      	adds	r4, #48	@ 0x30
 80088de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088e2:	460c      	mov	r4, r1
 80088e4:	2c63      	cmp	r4, #99	@ 0x63
 80088e6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80088ea:	4631      	mov	r1, r6
 80088ec:	dcf1      	bgt.n	80088d2 <__exponent+0x1c>
 80088ee:	3130      	adds	r1, #48	@ 0x30
 80088f0:	1e94      	subs	r4, r2, #2
 80088f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088f6:	1c41      	adds	r1, r0, #1
 80088f8:	4623      	mov	r3, r4
 80088fa:	42ab      	cmp	r3, r5
 80088fc:	d30a      	bcc.n	8008914 <__exponent+0x5e>
 80088fe:	f10d 0309 	add.w	r3, sp, #9
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	42ac      	cmp	r4, r5
 8008906:	bf88      	it	hi
 8008908:	2300      	movhi	r3, #0
 800890a:	3302      	adds	r3, #2
 800890c:	4403      	add	r3, r0
 800890e:	1a18      	subs	r0, r3, r0
 8008910:	b003      	add	sp, #12
 8008912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008914:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008918:	f801 6f01 	strb.w	r6, [r1, #1]!
 800891c:	e7ed      	b.n	80088fa <__exponent+0x44>
 800891e:	2330      	movs	r3, #48	@ 0x30
 8008920:	3130      	adds	r1, #48	@ 0x30
 8008922:	7083      	strb	r3, [r0, #2]
 8008924:	70c1      	strb	r1, [r0, #3]
 8008926:	1d03      	adds	r3, r0, #4
 8008928:	e7f1      	b.n	800890e <__exponent+0x58>
	...

0800892c <_printf_float>:
 800892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	b08d      	sub	sp, #52	@ 0x34
 8008932:	460c      	mov	r4, r1
 8008934:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008938:	4616      	mov	r6, r2
 800893a:	461f      	mov	r7, r3
 800893c:	4605      	mov	r5, r0
 800893e:	f000 fe7d 	bl	800963c <_localeconv_r>
 8008942:	6803      	ldr	r3, [r0, #0]
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	4618      	mov	r0, r3
 8008948:	f7f7 fcb2 	bl	80002b0 <strlen>
 800894c:	2300      	movs	r3, #0
 800894e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008950:	f8d8 3000 	ldr.w	r3, [r8]
 8008954:	9005      	str	r0, [sp, #20]
 8008956:	3307      	adds	r3, #7
 8008958:	f023 0307 	bic.w	r3, r3, #7
 800895c:	f103 0208 	add.w	r2, r3, #8
 8008960:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008964:	f8d4 b000 	ldr.w	fp, [r4]
 8008968:	f8c8 2000 	str.w	r2, [r8]
 800896c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008970:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	f8cd 8018 	str.w	r8, [sp, #24]
 800897a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800897e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008982:	4b9c      	ldr	r3, [pc, #624]	@ (8008bf4 <_printf_float+0x2c8>)
 8008984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008988:	f7f8 f8f0 	bl	8000b6c <__aeabi_dcmpun>
 800898c:	bb70      	cbnz	r0, 80089ec <_printf_float+0xc0>
 800898e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008992:	4b98      	ldr	r3, [pc, #608]	@ (8008bf4 <_printf_float+0x2c8>)
 8008994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008998:	f7f8 f8ca 	bl	8000b30 <__aeabi_dcmple>
 800899c:	bb30      	cbnz	r0, 80089ec <_printf_float+0xc0>
 800899e:	2200      	movs	r2, #0
 80089a0:	2300      	movs	r3, #0
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	f7f8 f8b9 	bl	8000b1c <__aeabi_dcmplt>
 80089aa:	b110      	cbz	r0, 80089b2 <_printf_float+0x86>
 80089ac:	232d      	movs	r3, #45	@ 0x2d
 80089ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089b2:	4a91      	ldr	r2, [pc, #580]	@ (8008bf8 <_printf_float+0x2cc>)
 80089b4:	4b91      	ldr	r3, [pc, #580]	@ (8008bfc <_printf_float+0x2d0>)
 80089b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089ba:	bf94      	ite	ls
 80089bc:	4690      	movls	r8, r2
 80089be:	4698      	movhi	r8, r3
 80089c0:	2303      	movs	r3, #3
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	f02b 0304 	bic.w	r3, fp, #4
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	f04f 0900 	mov.w	r9, #0
 80089ce:	9700      	str	r7, [sp, #0]
 80089d0:	4633      	mov	r3, r6
 80089d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f9d2 	bl	8008d80 <_printf_common>
 80089dc:	3001      	adds	r0, #1
 80089de:	f040 808d 	bne.w	8008afc <_printf_float+0x1d0>
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e6:	b00d      	add	sp, #52	@ 0x34
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	4642      	mov	r2, r8
 80089ee:	464b      	mov	r3, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7f8 f8ba 	bl	8000b6c <__aeabi_dcmpun>
 80089f8:	b140      	cbz	r0, 8008a0c <_printf_float+0xe0>
 80089fa:	464b      	mov	r3, r9
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bfbc      	itt	lt
 8008a00:	232d      	movlt	r3, #45	@ 0x2d
 8008a02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a06:	4a7e      	ldr	r2, [pc, #504]	@ (8008c00 <_printf_float+0x2d4>)
 8008a08:	4b7e      	ldr	r3, [pc, #504]	@ (8008c04 <_printf_float+0x2d8>)
 8008a0a:	e7d4      	b.n	80089b6 <_printf_float+0x8a>
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a12:	9206      	str	r2, [sp, #24]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	d13b      	bne.n	8008a90 <_printf_float+0x164>
 8008a18:	2306      	movs	r3, #6
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a20:	2300      	movs	r3, #0
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	9303      	str	r3, [sp, #12]
 8008a26:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a2c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	ec49 8b10 	vmov	d0, r8, r9
 8008a36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff fed6 	bl	80087ec <__cvt>
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a44:	2b47      	cmp	r3, #71	@ 0x47
 8008a46:	4680      	mov	r8, r0
 8008a48:	d129      	bne.n	8008a9e <_printf_float+0x172>
 8008a4a:	1cc8      	adds	r0, r1, #3
 8008a4c:	db02      	blt.n	8008a54 <_printf_float+0x128>
 8008a4e:	6863      	ldr	r3, [r4, #4]
 8008a50:	4299      	cmp	r1, r3
 8008a52:	dd41      	ble.n	8008ad8 <_printf_float+0x1ac>
 8008a54:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a58:	fa5f fa8a 	uxtb.w	sl, sl
 8008a5c:	3901      	subs	r1, #1
 8008a5e:	4652      	mov	r2, sl
 8008a60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a64:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a66:	f7ff ff26 	bl	80088b6 <__exponent>
 8008a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a6c:	1813      	adds	r3, r2, r0
 8008a6e:	2a01      	cmp	r2, #1
 8008a70:	4681      	mov	r9, r0
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	dc02      	bgt.n	8008a7c <_printf_float+0x150>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	07d2      	lsls	r2, r2, #31
 8008a7a:	d501      	bpl.n	8008a80 <_printf_float+0x154>
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0a2      	beq.n	80089ce <_printf_float+0xa2>
 8008a88:	232d      	movs	r3, #45	@ 0x2d
 8008a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a8e:	e79e      	b.n	80089ce <_printf_float+0xa2>
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	2a47      	cmp	r2, #71	@ 0x47
 8008a94:	d1c2      	bne.n	8008a1c <_printf_float+0xf0>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1c0      	bne.n	8008a1c <_printf_float+0xf0>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e7bd      	b.n	8008a1a <_printf_float+0xee>
 8008a9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aa2:	d9db      	bls.n	8008a5c <_printf_float+0x130>
 8008aa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008aa8:	d118      	bne.n	8008adc <_printf_float+0x1b0>
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	dd0b      	ble.n	8008ac8 <_printf_float+0x19c>
 8008ab0:	6121      	str	r1, [r4, #16]
 8008ab2:	b913      	cbnz	r3, 8008aba <_printf_float+0x18e>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	07d0      	lsls	r0, r2, #31
 8008ab8:	d502      	bpl.n	8008ac0 <_printf_float+0x194>
 8008aba:	3301      	adds	r3, #1
 8008abc:	440b      	add	r3, r1
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	e7db      	b.n	8008a80 <_printf_float+0x154>
 8008ac8:	b913      	cbnz	r3, 8008ad0 <_printf_float+0x1a4>
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	07d2      	lsls	r2, r2, #31
 8008ace:	d501      	bpl.n	8008ad4 <_printf_float+0x1a8>
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	e7f4      	b.n	8008abe <_printf_float+0x192>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e7f2      	b.n	8008abe <_printf_float+0x192>
 8008ad8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	db05      	blt.n	8008aee <_printf_float+0x1c2>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6121      	str	r1, [r4, #16]
 8008ae6:	07d8      	lsls	r0, r3, #31
 8008ae8:	d5ea      	bpl.n	8008ac0 <_printf_float+0x194>
 8008aea:	1c4b      	adds	r3, r1, #1
 8008aec:	e7e7      	b.n	8008abe <_printf_float+0x192>
 8008aee:	2900      	cmp	r1, #0
 8008af0:	bfd4      	ite	le
 8008af2:	f1c1 0202 	rsble	r2, r1, #2
 8008af6:	2201      	movgt	r2, #1
 8008af8:	4413      	add	r3, r2
 8008afa:	e7e0      	b.n	8008abe <_printf_float+0x192>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	055a      	lsls	r2, r3, #21
 8008b00:	d407      	bmi.n	8008b12 <_printf_float+0x1e6>
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	4642      	mov	r2, r8
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d12b      	bne.n	8008b68 <_printf_float+0x23c>
 8008b10:	e767      	b.n	80089e2 <_printf_float+0xb6>
 8008b12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b16:	f240 80dd 	bls.w	8008cd4 <_printf_float+0x3a8>
 8008b1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2300      	movs	r3, #0
 8008b22:	f7f7 fff1 	bl	8000b08 <__aeabi_dcmpeq>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d033      	beq.n	8008b92 <_printf_float+0x266>
 8008b2a:	4a37      	ldr	r2, [pc, #220]	@ (8008c08 <_printf_float+0x2dc>)
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	f43f af54 	beq.w	80089e2 <_printf_float+0xb6>
 8008b3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b3e:	4543      	cmp	r3, r8
 8008b40:	db02      	blt.n	8008b48 <_printf_float+0x21c>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	07d8      	lsls	r0, r3, #31
 8008b46:	d50f      	bpl.n	8008b68 <_printf_float+0x23c>
 8008b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f af45 	beq.w	80089e2 <_printf_float+0xb6>
 8008b58:	f04f 0900 	mov.w	r9, #0
 8008b5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b60:	f104 0a1a 	add.w	sl, r4, #26
 8008b64:	45c8      	cmp	r8, r9
 8008b66:	dc09      	bgt.n	8008b7c <_printf_float+0x250>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	079b      	lsls	r3, r3, #30
 8008b6c:	f100 8103 	bmi.w	8008d76 <_printf_float+0x44a>
 8008b70:	68e0      	ldr	r0, [r4, #12]
 8008b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b74:	4298      	cmp	r0, r3
 8008b76:	bfb8      	it	lt
 8008b78:	4618      	movlt	r0, r3
 8008b7a:	e734      	b.n	80089e6 <_printf_float+0xba>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4652      	mov	r2, sl
 8008b80:	4631      	mov	r1, r6
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b8      	blx	r7
 8008b86:	3001      	adds	r0, #1
 8008b88:	f43f af2b 	beq.w	80089e2 <_printf_float+0xb6>
 8008b8c:	f109 0901 	add.w	r9, r9, #1
 8008b90:	e7e8      	b.n	8008b64 <_printf_float+0x238>
 8008b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dc39      	bgt.n	8008c0c <_printf_float+0x2e0>
 8008b98:	4a1b      	ldr	r2, [pc, #108]	@ (8008c08 <_printf_float+0x2dc>)
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af1d 	beq.w	80089e2 <_printf_float+0xb6>
 8008ba8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bac:	ea59 0303 	orrs.w	r3, r9, r3
 8008bb0:	d102      	bne.n	8008bb8 <_printf_float+0x28c>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	07d9      	lsls	r1, r3, #31
 8008bb6:	d5d7      	bpl.n	8008b68 <_printf_float+0x23c>
 8008bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af0d 	beq.w	80089e2 <_printf_float+0xb6>
 8008bc8:	f04f 0a00 	mov.w	sl, #0
 8008bcc:	f104 0b1a 	add.w	fp, r4, #26
 8008bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd2:	425b      	negs	r3, r3
 8008bd4:	4553      	cmp	r3, sl
 8008bd6:	dc01      	bgt.n	8008bdc <_printf_float+0x2b0>
 8008bd8:	464b      	mov	r3, r9
 8008bda:	e793      	b.n	8008b04 <_printf_float+0x1d8>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	465a      	mov	r2, fp
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f aefb 	beq.w	80089e2 <_printf_float+0xb6>
 8008bec:	f10a 0a01 	add.w	sl, sl, #1
 8008bf0:	e7ee      	b.n	8008bd0 <_printf_float+0x2a4>
 8008bf2:	bf00      	nop
 8008bf4:	7fefffff 	.word	0x7fefffff
 8008bf8:	08010187 	.word	0x08010187
 8008bfc:	0801018b 	.word	0x0801018b
 8008c00:	0801018f 	.word	0x0801018f
 8008c04:	08010193 	.word	0x08010193
 8008c08:	080100c1 	.word	0x080100c1
 8008c0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c12:	4553      	cmp	r3, sl
 8008c14:	bfa8      	it	ge
 8008c16:	4653      	movge	r3, sl
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	4699      	mov	r9, r3
 8008c1c:	dc36      	bgt.n	8008c8c <_printf_float+0x360>
 8008c1e:	f04f 0b00 	mov.w	fp, #0
 8008c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c26:	f104 021a 	add.w	r2, r4, #26
 8008c2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c2c:	9306      	str	r3, [sp, #24]
 8008c2e:	eba3 0309 	sub.w	r3, r3, r9
 8008c32:	455b      	cmp	r3, fp
 8008c34:	dc31      	bgt.n	8008c9a <_printf_float+0x36e>
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	459a      	cmp	sl, r3
 8008c3a:	dc3a      	bgt.n	8008cb2 <_printf_float+0x386>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	07da      	lsls	r2, r3, #31
 8008c40:	d437      	bmi.n	8008cb2 <_printf_float+0x386>
 8008c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c44:	ebaa 0903 	sub.w	r9, sl, r3
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c4e:	4599      	cmp	r9, r3
 8008c50:	bfa8      	it	ge
 8008c52:	4699      	movge	r9, r3
 8008c54:	f1b9 0f00 	cmp.w	r9, #0
 8008c58:	dc33      	bgt.n	8008cc2 <_printf_float+0x396>
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c62:	f104 0b1a 	add.w	fp, r4, #26
 8008c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c68:	ebaa 0303 	sub.w	r3, sl, r3
 8008c6c:	eba3 0309 	sub.w	r3, r3, r9
 8008c70:	4543      	cmp	r3, r8
 8008c72:	f77f af79 	ble.w	8008b68 <_printf_float+0x23c>
 8008c76:	2301      	movs	r3, #1
 8008c78:	465a      	mov	r2, fp
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	f43f aeae 	beq.w	80089e2 <_printf_float+0xb6>
 8008c86:	f108 0801 	add.w	r8, r8, #1
 8008c8a:	e7ec      	b.n	8008c66 <_printf_float+0x33a>
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	d1c2      	bne.n	8008c1e <_printf_float+0x2f2>
 8008c98:	e6a3      	b.n	80089e2 <_printf_float+0xb6>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	9206      	str	r2, [sp, #24]
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f43f ae9c 	beq.w	80089e2 <_printf_float+0xb6>
 8008caa:	9a06      	ldr	r2, [sp, #24]
 8008cac:	f10b 0b01 	add.w	fp, fp, #1
 8008cb0:	e7bb      	b.n	8008c2a <_printf_float+0x2fe>
 8008cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d1c0      	bne.n	8008c42 <_printf_float+0x316>
 8008cc0:	e68f      	b.n	80089e2 <_printf_float+0xb6>
 8008cc2:	9a06      	ldr	r2, [sp, #24]
 8008cc4:	464b      	mov	r3, r9
 8008cc6:	4442      	add	r2, r8
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d1c3      	bne.n	8008c5a <_printf_float+0x32e>
 8008cd2:	e686      	b.n	80089e2 <_printf_float+0xb6>
 8008cd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cd8:	f1ba 0f01 	cmp.w	sl, #1
 8008cdc:	dc01      	bgt.n	8008ce2 <_printf_float+0x3b6>
 8008cde:	07db      	lsls	r3, r3, #31
 8008ce0:	d536      	bpl.n	8008d50 <_printf_float+0x424>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	47b8      	blx	r7
 8008cec:	3001      	adds	r0, #1
 8008cee:	f43f ae78 	beq.w	80089e2 <_printf_float+0xb6>
 8008cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f43f ae70 	beq.w	80089e2 <_printf_float+0xb6>
 8008d02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d06:	2200      	movs	r2, #0
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d0e:	f7f7 fefb 	bl	8000b08 <__aeabi_dcmpeq>
 8008d12:	b9c0      	cbnz	r0, 8008d46 <_printf_float+0x41a>
 8008d14:	4653      	mov	r3, sl
 8008d16:	f108 0201 	add.w	r2, r8, #1
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	d10c      	bne.n	8008d3e <_printf_float+0x412>
 8008d24:	e65d      	b.n	80089e2 <_printf_float+0xb6>
 8008d26:	2301      	movs	r3, #1
 8008d28:	465a      	mov	r2, fp
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b8      	blx	r7
 8008d30:	3001      	adds	r0, #1
 8008d32:	f43f ae56 	beq.w	80089e2 <_printf_float+0xb6>
 8008d36:	f108 0801 	add.w	r8, r8, #1
 8008d3a:	45d0      	cmp	r8, sl
 8008d3c:	dbf3      	blt.n	8008d26 <_printf_float+0x3fa>
 8008d3e:	464b      	mov	r3, r9
 8008d40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d44:	e6df      	b.n	8008b06 <_printf_float+0x1da>
 8008d46:	f04f 0800 	mov.w	r8, #0
 8008d4a:	f104 0b1a 	add.w	fp, r4, #26
 8008d4e:	e7f4      	b.n	8008d3a <_printf_float+0x40e>
 8008d50:	2301      	movs	r3, #1
 8008d52:	4642      	mov	r2, r8
 8008d54:	e7e1      	b.n	8008d1a <_printf_float+0x3ee>
 8008d56:	2301      	movs	r3, #1
 8008d58:	464a      	mov	r2, r9
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	f43f ae3e 	beq.w	80089e2 <_printf_float+0xb6>
 8008d66:	f108 0801 	add.w	r8, r8, #1
 8008d6a:	68e3      	ldr	r3, [r4, #12]
 8008d6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d6e:	1a5b      	subs	r3, r3, r1
 8008d70:	4543      	cmp	r3, r8
 8008d72:	dcf0      	bgt.n	8008d56 <_printf_float+0x42a>
 8008d74:	e6fc      	b.n	8008b70 <_printf_float+0x244>
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	f104 0919 	add.w	r9, r4, #25
 8008d7e:	e7f4      	b.n	8008d6a <_printf_float+0x43e>

08008d80 <_printf_common>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	4616      	mov	r6, r2
 8008d86:	4698      	mov	r8, r3
 8008d88:	688a      	ldr	r2, [r1, #8]
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfb8      	it	lt
 8008d94:	4613      	movlt	r3, r2
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b10a      	cbz	r2, 8008da6 <_printf_common+0x26>
 8008da2:	3301      	adds	r3, #1
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	0699      	lsls	r1, r3, #26
 8008daa:	bf42      	ittt	mi
 8008dac:	6833      	ldrmi	r3, [r6, #0]
 8008dae:	3302      	addmi	r3, #2
 8008db0:	6033      	strmi	r3, [r6, #0]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	f015 0506 	ands.w	r5, r5, #6
 8008db8:	d106      	bne.n	8008dc8 <_printf_common+0x48>
 8008dba:	f104 0a19 	add.w	sl, r4, #25
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	6832      	ldr	r2, [r6, #0]
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dc26      	bgt.n	8008e16 <_printf_common+0x96>
 8008dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dcc:	6822      	ldr	r2, [r4, #0]
 8008dce:	3b00      	subs	r3, #0
 8008dd0:	bf18      	it	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	0692      	lsls	r2, r2, #26
 8008dd6:	d42b      	bmi.n	8008e30 <_printf_common+0xb0>
 8008dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ddc:	4641      	mov	r1, r8
 8008dde:	4638      	mov	r0, r7
 8008de0:	47c8      	blx	r9
 8008de2:	3001      	adds	r0, #1
 8008de4:	d01e      	beq.n	8008e24 <_printf_common+0xa4>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	f003 0306 	and.w	r3, r3, #6
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	bf02      	ittt	eq
 8008df2:	68e5      	ldreq	r5, [r4, #12]
 8008df4:	6833      	ldreq	r3, [r6, #0]
 8008df6:	1aed      	subeq	r5, r5, r3
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	bf0c      	ite	eq
 8008dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e00:	2500      	movne	r5, #0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bfc4      	itt	gt
 8008e06:	1a9b      	subgt	r3, r3, r2
 8008e08:	18ed      	addgt	r5, r5, r3
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	341a      	adds	r4, #26
 8008e0e:	42b5      	cmp	r5, r6
 8008e10:	d11a      	bne.n	8008e48 <_printf_common+0xc8>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e008      	b.n	8008e28 <_printf_common+0xa8>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4652      	mov	r2, sl
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	47c8      	blx	r9
 8008e20:	3001      	adds	r0, #1
 8008e22:	d103      	bne.n	8008e2c <_printf_common+0xac>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	e7c6      	b.n	8008dbe <_printf_common+0x3e>
 8008e30:	18e1      	adds	r1, r4, r3
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	2030      	movs	r0, #48	@ 0x30
 8008e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e3a:	4422      	add	r2, r4
 8008e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e44:	3302      	adds	r3, #2
 8008e46:	e7c7      	b.n	8008dd8 <_printf_common+0x58>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	4638      	mov	r0, r7
 8008e50:	47c8      	blx	r9
 8008e52:	3001      	adds	r0, #1
 8008e54:	d0e6      	beq.n	8008e24 <_printf_common+0xa4>
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7d9      	b.n	8008e0e <_printf_common+0x8e>
	...

08008e5c <_printf_i>:
 8008e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	7e0f      	ldrb	r7, [r1, #24]
 8008e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e64:	2f78      	cmp	r7, #120	@ 0x78
 8008e66:	4691      	mov	r9, r2
 8008e68:	4680      	mov	r8, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e72:	d807      	bhi.n	8008e84 <_printf_i+0x28>
 8008e74:	2f62      	cmp	r7, #98	@ 0x62
 8008e76:	d80a      	bhi.n	8008e8e <_printf_i+0x32>
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	f000 80d2 	beq.w	8009022 <_printf_i+0x1c6>
 8008e7e:	2f58      	cmp	r7, #88	@ 0x58
 8008e80:	f000 80b9 	beq.w	8008ff6 <_printf_i+0x19a>
 8008e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e8c:	e03a      	b.n	8008f04 <_printf_i+0xa8>
 8008e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e92:	2b15      	cmp	r3, #21
 8008e94:	d8f6      	bhi.n	8008e84 <_printf_i+0x28>
 8008e96:	a101      	add	r1, pc, #4	@ (adr r1, 8008e9c <_printf_i+0x40>)
 8008e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008e85 	.word	0x08008e85
 8008ea8:	08008e85 	.word	0x08008e85
 8008eac:	08008e85 	.word	0x08008e85
 8008eb0:	08008e85 	.word	0x08008e85
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008e85 	.word	0x08008e85
 8008ebc:	08008e85 	.word	0x08008e85
 8008ec0:	08008e85 	.word	0x08008e85
 8008ec4:	08008e85 	.word	0x08008e85
 8008ec8:	08009009 	.word	0x08009009
 8008ecc:	08008f33 	.word	0x08008f33
 8008ed0:	08008fc3 	.word	0x08008fc3
 8008ed4:	08008e85 	.word	0x08008e85
 8008ed8:	08008e85 	.word	0x08008e85
 8008edc:	0800902b 	.word	0x0800902b
 8008ee0:	08008e85 	.word	0x08008e85
 8008ee4:	08008f33 	.word	0x08008f33
 8008ee8:	08008e85 	.word	0x08008e85
 8008eec:	08008e85 	.word	0x08008e85
 8008ef0:	08008fcb 	.word	0x08008fcb
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6032      	str	r2, [r6, #0]
 8008efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f04:	2301      	movs	r3, #1
 8008f06:	e09d      	b.n	8009044 <_printf_i+0x1e8>
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	6820      	ldr	r0, [r4, #0]
 8008f0c:	1d19      	adds	r1, r3, #4
 8008f0e:	6031      	str	r1, [r6, #0]
 8008f10:	0606      	lsls	r6, r0, #24
 8008f12:	d501      	bpl.n	8008f18 <_printf_i+0xbc>
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	e003      	b.n	8008f20 <_printf_i+0xc4>
 8008f18:	0645      	lsls	r5, r0, #25
 8008f1a:	d5fb      	bpl.n	8008f14 <_printf_i+0xb8>
 8008f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	da03      	bge.n	8008f2c <_printf_i+0xd0>
 8008f24:	232d      	movs	r3, #45	@ 0x2d
 8008f26:	426d      	negs	r5, r5
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2c:	4859      	ldr	r0, [pc, #356]	@ (8009094 <_printf_i+0x238>)
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e011      	b.n	8008f56 <_printf_i+0xfa>
 8008f32:	6821      	ldr	r1, [r4, #0]
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	0608      	lsls	r0, r1, #24
 8008f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f3c:	d402      	bmi.n	8008f44 <_printf_i+0xe8>
 8008f3e:	0649      	lsls	r1, r1, #25
 8008f40:	bf48      	it	mi
 8008f42:	b2ad      	uxthmi	r5, r5
 8008f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f46:	4853      	ldr	r0, [pc, #332]	@ (8009094 <_printf_i+0x238>)
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	bf14      	ite	ne
 8008f4c:	230a      	movne	r3, #10
 8008f4e:	2308      	moveq	r3, #8
 8008f50:	2100      	movs	r1, #0
 8008f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f56:	6866      	ldr	r6, [r4, #4]
 8008f58:	60a6      	str	r6, [r4, #8]
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	bfa2      	ittt	ge
 8008f5e:	6821      	ldrge	r1, [r4, #0]
 8008f60:	f021 0104 	bicge.w	r1, r1, #4
 8008f64:	6021      	strge	r1, [r4, #0]
 8008f66:	b90d      	cbnz	r5, 8008f6c <_printf_i+0x110>
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	d04b      	beq.n	8009004 <_printf_i+0x1a8>
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f72:	fb03 5711 	mls	r7, r3, r1, r5
 8008f76:	5dc7      	ldrb	r7, [r0, r7]
 8008f78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f7c:	462f      	mov	r7, r5
 8008f7e:	42bb      	cmp	r3, r7
 8008f80:	460d      	mov	r5, r1
 8008f82:	d9f4      	bls.n	8008f6e <_printf_i+0x112>
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d10b      	bne.n	8008fa0 <_printf_i+0x144>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	07df      	lsls	r7, r3, #31
 8008f8c:	d508      	bpl.n	8008fa0 <_printf_i+0x144>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	6861      	ldr	r1, [r4, #4]
 8008f92:	4299      	cmp	r1, r3
 8008f94:	bfde      	ittt	le
 8008f96:	2330      	movle	r3, #48	@ 0x30
 8008f98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008fa0:	1b92      	subs	r2, r2, r6
 8008fa2:	6122      	str	r2, [r4, #16]
 8008fa4:	f8cd a000 	str.w	sl, [sp]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	aa03      	add	r2, sp, #12
 8008fac:	4621      	mov	r1, r4
 8008fae:	4640      	mov	r0, r8
 8008fb0:	f7ff fee6 	bl	8008d80 <_printf_common>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d14a      	bne.n	800904e <_printf_i+0x1f2>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fbc:	b004      	add	sp, #16
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f043 0320 	orr.w	r3, r3, #32
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	4833      	ldr	r0, [pc, #204]	@ (8009098 <_printf_i+0x23c>)
 8008fcc:	2778      	movs	r7, #120	@ 0x78
 8008fce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6831      	ldr	r1, [r6, #0]
 8008fd6:	061f      	lsls	r7, r3, #24
 8008fd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fdc:	d402      	bmi.n	8008fe4 <_printf_i+0x188>
 8008fde:	065f      	lsls	r7, r3, #25
 8008fe0:	bf48      	it	mi
 8008fe2:	b2ad      	uxthmi	r5, r5
 8008fe4:	6031      	str	r1, [r6, #0]
 8008fe6:	07d9      	lsls	r1, r3, #31
 8008fe8:	bf44      	itt	mi
 8008fea:	f043 0320 	orrmi.w	r3, r3, #32
 8008fee:	6023      	strmi	r3, [r4, #0]
 8008ff0:	b11d      	cbz	r5, 8008ffa <_printf_i+0x19e>
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	e7ac      	b.n	8008f50 <_printf_i+0xf4>
 8008ff6:	4827      	ldr	r0, [pc, #156]	@ (8009094 <_printf_i+0x238>)
 8008ff8:	e7e9      	b.n	8008fce <_printf_i+0x172>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	f023 0320 	bic.w	r3, r3, #32
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	e7f6      	b.n	8008ff2 <_printf_i+0x196>
 8009004:	4616      	mov	r6, r2
 8009006:	e7bd      	b.n	8008f84 <_printf_i+0x128>
 8009008:	6833      	ldr	r3, [r6, #0]
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	6961      	ldr	r1, [r4, #20]
 800900e:	1d18      	adds	r0, r3, #4
 8009010:	6030      	str	r0, [r6, #0]
 8009012:	062e      	lsls	r6, r5, #24
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	d501      	bpl.n	800901c <_printf_i+0x1c0>
 8009018:	6019      	str	r1, [r3, #0]
 800901a:	e002      	b.n	8009022 <_printf_i+0x1c6>
 800901c:	0668      	lsls	r0, r5, #25
 800901e:	d5fb      	bpl.n	8009018 <_printf_i+0x1bc>
 8009020:	8019      	strh	r1, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	4616      	mov	r6, r2
 8009028:	e7bc      	b.n	8008fa4 <_printf_i+0x148>
 800902a:	6833      	ldr	r3, [r6, #0]
 800902c:	1d1a      	adds	r2, r3, #4
 800902e:	6032      	str	r2, [r6, #0]
 8009030:	681e      	ldr	r6, [r3, #0]
 8009032:	6862      	ldr	r2, [r4, #4]
 8009034:	2100      	movs	r1, #0
 8009036:	4630      	mov	r0, r6
 8009038:	f7f7 f8ea 	bl	8000210 <memchr>
 800903c:	b108      	cbz	r0, 8009042 <_printf_i+0x1e6>
 800903e:	1b80      	subs	r0, r0, r6
 8009040:	6060      	str	r0, [r4, #4]
 8009042:	6863      	ldr	r3, [r4, #4]
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	2300      	movs	r3, #0
 8009048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800904c:	e7aa      	b.n	8008fa4 <_printf_i+0x148>
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	4632      	mov	r2, r6
 8009052:	4649      	mov	r1, r9
 8009054:	4640      	mov	r0, r8
 8009056:	47d0      	blx	sl
 8009058:	3001      	adds	r0, #1
 800905a:	d0ad      	beq.n	8008fb8 <_printf_i+0x15c>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	079b      	lsls	r3, r3, #30
 8009060:	d413      	bmi.n	800908a <_printf_i+0x22e>
 8009062:	68e0      	ldr	r0, [r4, #12]
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	4298      	cmp	r0, r3
 8009068:	bfb8      	it	lt
 800906a:	4618      	movlt	r0, r3
 800906c:	e7a6      	b.n	8008fbc <_printf_i+0x160>
 800906e:	2301      	movs	r3, #1
 8009070:	4632      	mov	r2, r6
 8009072:	4649      	mov	r1, r9
 8009074:	4640      	mov	r0, r8
 8009076:	47d0      	blx	sl
 8009078:	3001      	adds	r0, #1
 800907a:	d09d      	beq.n	8008fb8 <_printf_i+0x15c>
 800907c:	3501      	adds	r5, #1
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	9903      	ldr	r1, [sp, #12]
 8009082:	1a5b      	subs	r3, r3, r1
 8009084:	42ab      	cmp	r3, r5
 8009086:	dcf2      	bgt.n	800906e <_printf_i+0x212>
 8009088:	e7eb      	b.n	8009062 <_printf_i+0x206>
 800908a:	2500      	movs	r5, #0
 800908c:	f104 0619 	add.w	r6, r4, #25
 8009090:	e7f5      	b.n	800907e <_printf_i+0x222>
 8009092:	bf00      	nop
 8009094:	08010197 	.word	0x08010197
 8009098:	080101a8 	.word	0x080101a8

0800909c <__sflush_r>:
 800909c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	0716      	lsls	r6, r2, #28
 80090a6:	4605      	mov	r5, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	d454      	bmi.n	8009156 <__sflush_r+0xba>
 80090ac:	684b      	ldr	r3, [r1, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dc02      	bgt.n	80090b8 <__sflush_r+0x1c>
 80090b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd48      	ble.n	800914a <__sflush_r+0xae>
 80090b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d045      	beq.n	800914a <__sflush_r+0xae>
 80090be:	2300      	movs	r3, #0
 80090c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090c4:	682f      	ldr	r7, [r5, #0]
 80090c6:	6a21      	ldr	r1, [r4, #32]
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	d030      	beq.n	800912e <__sflush_r+0x92>
 80090cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	0759      	lsls	r1, r3, #29
 80090d2:	d505      	bpl.n	80090e0 <__sflush_r+0x44>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090da:	b10b      	cbz	r3, 80090e0 <__sflush_r+0x44>
 80090dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b0      	blx	r6
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	d106      	bne.n	80090fe <__sflush_r+0x62>
 80090f0:	6829      	ldr	r1, [r5, #0]
 80090f2:	291d      	cmp	r1, #29
 80090f4:	d82b      	bhi.n	800914e <__sflush_r+0xb2>
 80090f6:	4a2a      	ldr	r2, [pc, #168]	@ (80091a0 <__sflush_r+0x104>)
 80090f8:	410a      	asrs	r2, r1
 80090fa:	07d6      	lsls	r6, r2, #31
 80090fc:	d427      	bmi.n	800914e <__sflush_r+0xb2>
 80090fe:	2200      	movs	r2, #0
 8009100:	6062      	str	r2, [r4, #4]
 8009102:	04d9      	lsls	r1, r3, #19
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	6022      	str	r2, [r4, #0]
 8009108:	d504      	bpl.n	8009114 <__sflush_r+0x78>
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	d101      	bne.n	8009112 <__sflush_r+0x76>
 800910e:	682b      	ldr	r3, [r5, #0]
 8009110:	b903      	cbnz	r3, 8009114 <__sflush_r+0x78>
 8009112:	6560      	str	r0, [r4, #84]	@ 0x54
 8009114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009116:	602f      	str	r7, [r5, #0]
 8009118:	b1b9      	cbz	r1, 800914a <__sflush_r+0xae>
 800911a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800911e:	4299      	cmp	r1, r3
 8009120:	d002      	beq.n	8009128 <__sflush_r+0x8c>
 8009122:	4628      	mov	r0, r5
 8009124:	f001 f98c 	bl	800a440 <_free_r>
 8009128:	2300      	movs	r3, #0
 800912a:	6363      	str	r3, [r4, #52]	@ 0x34
 800912c:	e00d      	b.n	800914a <__sflush_r+0xae>
 800912e:	2301      	movs	r3, #1
 8009130:	4628      	mov	r0, r5
 8009132:	47b0      	blx	r6
 8009134:	4602      	mov	r2, r0
 8009136:	1c50      	adds	r0, r2, #1
 8009138:	d1c9      	bne.n	80090ce <__sflush_r+0x32>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <__sflush_r+0x32>
 8009140:	2b1d      	cmp	r3, #29
 8009142:	d001      	beq.n	8009148 <__sflush_r+0xac>
 8009144:	2b16      	cmp	r3, #22
 8009146:	d11e      	bne.n	8009186 <__sflush_r+0xea>
 8009148:	602f      	str	r7, [r5, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	e022      	b.n	8009194 <__sflush_r+0xf8>
 800914e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009152:	b21b      	sxth	r3, r3
 8009154:	e01b      	b.n	800918e <__sflush_r+0xf2>
 8009156:	690f      	ldr	r7, [r1, #16]
 8009158:	2f00      	cmp	r7, #0
 800915a:	d0f6      	beq.n	800914a <__sflush_r+0xae>
 800915c:	0793      	lsls	r3, r2, #30
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	bf08      	it	eq
 8009162:	694b      	ldreq	r3, [r1, #20]
 8009164:	600f      	str	r7, [r1, #0]
 8009166:	bf18      	it	ne
 8009168:	2300      	movne	r3, #0
 800916a:	eba6 0807 	sub.w	r8, r6, r7
 800916e:	608b      	str	r3, [r1, #8]
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	dde9      	ble.n	800914a <__sflush_r+0xae>
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800917a:	4643      	mov	r3, r8
 800917c:	463a      	mov	r2, r7
 800917e:	4628      	mov	r0, r5
 8009180:	47b0      	blx	r6
 8009182:	2800      	cmp	r0, #0
 8009184:	dc08      	bgt.n	8009198 <__sflush_r+0xfc>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	4407      	add	r7, r0
 800919a:	eba8 0800 	sub.w	r8, r8, r0
 800919e:	e7e7      	b.n	8009170 <__sflush_r+0xd4>
 80091a0:	dfbffffe 	.word	0xdfbffffe

080091a4 <_fflush_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b913      	cbnz	r3, 80091b4 <_fflush_r+0x10>
 80091ae:	2500      	movs	r5, #0
 80091b0:	4628      	mov	r0, r5
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	b118      	cbz	r0, 80091be <_fflush_r+0x1a>
 80091b6:	6a03      	ldr	r3, [r0, #32]
 80091b8:	b90b      	cbnz	r3, 80091be <_fflush_r+0x1a>
 80091ba:	f000 f8a7 	bl	800930c <__sinit>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f3      	beq.n	80091ae <_fflush_r+0xa>
 80091c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091c8:	07d0      	lsls	r0, r2, #31
 80091ca:	d404      	bmi.n	80091d6 <_fflush_r+0x32>
 80091cc:	0599      	lsls	r1, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_fflush_r+0x32>
 80091d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d2:	f000 fab8 	bl	8009746 <__retarget_lock_acquire_recursive>
 80091d6:	4628      	mov	r0, r5
 80091d8:	4621      	mov	r1, r4
 80091da:	f7ff ff5f 	bl	800909c <__sflush_r>
 80091de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091e0:	07da      	lsls	r2, r3, #31
 80091e2:	4605      	mov	r5, r0
 80091e4:	d4e4      	bmi.n	80091b0 <_fflush_r+0xc>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	059b      	lsls	r3, r3, #22
 80091ea:	d4e1      	bmi.n	80091b0 <_fflush_r+0xc>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f000 faab 	bl	8009748 <__retarget_lock_release_recursive>
 80091f2:	e7dd      	b.n	80091b0 <_fflush_r+0xc>

080091f4 <std>:
 80091f4:	2300      	movs	r3, #0
 80091f6:	b510      	push	{r4, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	e9c0 3300 	strd	r3, r3, [r0]
 80091fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	@ 0x64
 8009208:	81c2      	strh	r2, [r0, #14]
 800920a:	6183      	str	r3, [r0, #24]
 800920c:	4619      	mov	r1, r3
 800920e:	2208      	movs	r2, #8
 8009210:	305c      	adds	r0, #92	@ 0x5c
 8009212:	f000 f9f9 	bl	8009608 <memset>
 8009216:	4b0d      	ldr	r3, [pc, #52]	@ (800924c <std+0x58>)
 8009218:	6263      	str	r3, [r4, #36]	@ 0x24
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <std+0x5c>)
 800921c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <std+0x60>)
 8009220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <std+0x64>)
 8009224:	6323      	str	r3, [r4, #48]	@ 0x30
 8009226:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <std+0x68>)
 8009228:	6224      	str	r4, [r4, #32]
 800922a:	429c      	cmp	r4, r3
 800922c:	d006      	beq.n	800923c <std+0x48>
 800922e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009232:	4294      	cmp	r4, r2
 8009234:	d002      	beq.n	800923c <std+0x48>
 8009236:	33d0      	adds	r3, #208	@ 0xd0
 8009238:	429c      	cmp	r4, r3
 800923a:	d105      	bne.n	8009248 <std+0x54>
 800923c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009244:	f000 ba7e 	b.w	8009744 <__retarget_lock_init_recursive>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	bf00      	nop
 800924c:	08009459 	.word	0x08009459
 8009250:	0800947b 	.word	0x0800947b
 8009254:	080094b3 	.word	0x080094b3
 8009258:	080094d7 	.word	0x080094d7
 800925c:	200011ac 	.word	0x200011ac

08009260 <stdio_exit_handler>:
 8009260:	4a02      	ldr	r2, [pc, #8]	@ (800926c <stdio_exit_handler+0xc>)
 8009262:	4903      	ldr	r1, [pc, #12]	@ (8009270 <stdio_exit_handler+0x10>)
 8009264:	4803      	ldr	r0, [pc, #12]	@ (8009274 <stdio_exit_handler+0x14>)
 8009266:	f000 b869 	b.w	800933c <_fwalk_sglue>
 800926a:	bf00      	nop
 800926c:	20000b1c 	.word	0x20000b1c
 8009270:	080091a5 	.word	0x080091a5
 8009274:	20000b2c 	.word	0x20000b2c

08009278 <cleanup_stdio>:
 8009278:	6841      	ldr	r1, [r0, #4]
 800927a:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <cleanup_stdio+0x34>)
 800927c:	4299      	cmp	r1, r3
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
 8009282:	d001      	beq.n	8009288 <cleanup_stdio+0x10>
 8009284:	f7ff ff8e 	bl	80091a4 <_fflush_r>
 8009288:	68a1      	ldr	r1, [r4, #8]
 800928a:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <cleanup_stdio+0x38>)
 800928c:	4299      	cmp	r1, r3
 800928e:	d002      	beq.n	8009296 <cleanup_stdio+0x1e>
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff ff87 	bl	80091a4 <_fflush_r>
 8009296:	68e1      	ldr	r1, [r4, #12]
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <cleanup_stdio+0x3c>)
 800929a:	4299      	cmp	r1, r3
 800929c:	d004      	beq.n	80092a8 <cleanup_stdio+0x30>
 800929e:	4620      	mov	r0, r4
 80092a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a4:	f7ff bf7e 	b.w	80091a4 <_fflush_r>
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	bf00      	nop
 80092ac:	200011ac 	.word	0x200011ac
 80092b0:	20001214 	.word	0x20001214
 80092b4:	2000127c 	.word	0x2000127c

080092b8 <global_stdio_init.part.0>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <global_stdio_init.part.0+0x30>)
 80092bc:	4c0b      	ldr	r4, [pc, #44]	@ (80092ec <global_stdio_init.part.0+0x34>)
 80092be:	4a0c      	ldr	r2, [pc, #48]	@ (80092f0 <global_stdio_init.part.0+0x38>)
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	4620      	mov	r0, r4
 80092c4:	2200      	movs	r2, #0
 80092c6:	2104      	movs	r1, #4
 80092c8:	f7ff ff94 	bl	80091f4 <std>
 80092cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092d0:	2201      	movs	r2, #1
 80092d2:	2109      	movs	r1, #9
 80092d4:	f7ff ff8e 	bl	80091f4 <std>
 80092d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092dc:	2202      	movs	r2, #2
 80092de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e2:	2112      	movs	r1, #18
 80092e4:	f7ff bf86 	b.w	80091f4 <std>
 80092e8:	200012e4 	.word	0x200012e4
 80092ec:	200011ac 	.word	0x200011ac
 80092f0:	08009261 	.word	0x08009261

080092f4 <__sfp_lock_acquire>:
 80092f4:	4801      	ldr	r0, [pc, #4]	@ (80092fc <__sfp_lock_acquire+0x8>)
 80092f6:	f000 ba26 	b.w	8009746 <__retarget_lock_acquire_recursive>
 80092fa:	bf00      	nop
 80092fc:	200012ed 	.word	0x200012ed

08009300 <__sfp_lock_release>:
 8009300:	4801      	ldr	r0, [pc, #4]	@ (8009308 <__sfp_lock_release+0x8>)
 8009302:	f000 ba21 	b.w	8009748 <__retarget_lock_release_recursive>
 8009306:	bf00      	nop
 8009308:	200012ed 	.word	0x200012ed

0800930c <__sinit>:
 800930c:	b510      	push	{r4, lr}
 800930e:	4604      	mov	r4, r0
 8009310:	f7ff fff0 	bl	80092f4 <__sfp_lock_acquire>
 8009314:	6a23      	ldr	r3, [r4, #32]
 8009316:	b11b      	cbz	r3, 8009320 <__sinit+0x14>
 8009318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800931c:	f7ff bff0 	b.w	8009300 <__sfp_lock_release>
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <__sinit+0x28>)
 8009322:	6223      	str	r3, [r4, #32]
 8009324:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <__sinit+0x2c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f5      	bne.n	8009318 <__sinit+0xc>
 800932c:	f7ff ffc4 	bl	80092b8 <global_stdio_init.part.0>
 8009330:	e7f2      	b.n	8009318 <__sinit+0xc>
 8009332:	bf00      	nop
 8009334:	08009279 	.word	0x08009279
 8009338:	200012e4 	.word	0x200012e4

0800933c <_fwalk_sglue>:
 800933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009340:	4607      	mov	r7, r0
 8009342:	4688      	mov	r8, r1
 8009344:	4614      	mov	r4, r2
 8009346:	2600      	movs	r6, #0
 8009348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800934c:	f1b9 0901 	subs.w	r9, r9, #1
 8009350:	d505      	bpl.n	800935e <_fwalk_sglue+0x22>
 8009352:	6824      	ldr	r4, [r4, #0]
 8009354:	2c00      	cmp	r4, #0
 8009356:	d1f7      	bne.n	8009348 <_fwalk_sglue+0xc>
 8009358:	4630      	mov	r0, r6
 800935a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d907      	bls.n	8009374 <_fwalk_sglue+0x38>
 8009364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009368:	3301      	adds	r3, #1
 800936a:	d003      	beq.n	8009374 <_fwalk_sglue+0x38>
 800936c:	4629      	mov	r1, r5
 800936e:	4638      	mov	r0, r7
 8009370:	47c0      	blx	r8
 8009372:	4306      	orrs	r6, r0
 8009374:	3568      	adds	r5, #104	@ 0x68
 8009376:	e7e9      	b.n	800934c <_fwalk_sglue+0x10>

08009378 <iprintf>:
 8009378:	b40f      	push	{r0, r1, r2, r3}
 800937a:	b507      	push	{r0, r1, r2, lr}
 800937c:	4906      	ldr	r1, [pc, #24]	@ (8009398 <iprintf+0x20>)
 800937e:	ab04      	add	r3, sp, #16
 8009380:	6808      	ldr	r0, [r1, #0]
 8009382:	f853 2b04 	ldr.w	r2, [r3], #4
 8009386:	6881      	ldr	r1, [r0, #8]
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	f001 fc4f 	bl	800ac2c <_vfiprintf_r>
 800938e:	b003      	add	sp, #12
 8009390:	f85d eb04 	ldr.w	lr, [sp], #4
 8009394:	b004      	add	sp, #16
 8009396:	4770      	bx	lr
 8009398:	20000b28 	.word	0x20000b28

0800939c <_puts_r>:
 800939c:	6a03      	ldr	r3, [r0, #32]
 800939e:	b570      	push	{r4, r5, r6, lr}
 80093a0:	6884      	ldr	r4, [r0, #8]
 80093a2:	4605      	mov	r5, r0
 80093a4:	460e      	mov	r6, r1
 80093a6:	b90b      	cbnz	r3, 80093ac <_puts_r+0x10>
 80093a8:	f7ff ffb0 	bl	800930c <__sinit>
 80093ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ae:	07db      	lsls	r3, r3, #31
 80093b0:	d405      	bmi.n	80093be <_puts_r+0x22>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	0598      	lsls	r0, r3, #22
 80093b6:	d402      	bmi.n	80093be <_puts_r+0x22>
 80093b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ba:	f000 f9c4 	bl	8009746 <__retarget_lock_acquire_recursive>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	0719      	lsls	r1, r3, #28
 80093c2:	d502      	bpl.n	80093ca <_puts_r+0x2e>
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d135      	bne.n	8009436 <_puts_r+0x9a>
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f8c5 	bl	800955c <__swsetup_r>
 80093d2:	b380      	cbz	r0, 8009436 <_puts_r+0x9a>
 80093d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80093d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093da:	07da      	lsls	r2, r3, #31
 80093dc:	d405      	bmi.n	80093ea <_puts_r+0x4e>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	059b      	lsls	r3, r3, #22
 80093e2:	d402      	bmi.n	80093ea <_puts_r+0x4e>
 80093e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093e6:	f000 f9af 	bl	8009748 <__retarget_lock_release_recursive>
 80093ea:	4628      	mov	r0, r5
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	da04      	bge.n	80093fc <_puts_r+0x60>
 80093f2:	69a2      	ldr	r2, [r4, #24]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	dc17      	bgt.n	8009428 <_puts_r+0x8c>
 80093f8:	290a      	cmp	r1, #10
 80093fa:	d015      	beq.n	8009428 <_puts_r+0x8c>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	6022      	str	r2, [r4, #0]
 8009402:	7019      	strb	r1, [r3, #0]
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800940a:	3b01      	subs	r3, #1
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	2900      	cmp	r1, #0
 8009410:	d1ed      	bne.n	80093ee <_puts_r+0x52>
 8009412:	2b00      	cmp	r3, #0
 8009414:	da11      	bge.n	800943a <_puts_r+0x9e>
 8009416:	4622      	mov	r2, r4
 8009418:	210a      	movs	r1, #10
 800941a:	4628      	mov	r0, r5
 800941c:	f000 f85f 	bl	80094de <__swbuf_r>
 8009420:	3001      	adds	r0, #1
 8009422:	d0d7      	beq.n	80093d4 <_puts_r+0x38>
 8009424:	250a      	movs	r5, #10
 8009426:	e7d7      	b.n	80093d8 <_puts_r+0x3c>
 8009428:	4622      	mov	r2, r4
 800942a:	4628      	mov	r0, r5
 800942c:	f000 f857 	bl	80094de <__swbuf_r>
 8009430:	3001      	adds	r0, #1
 8009432:	d1e7      	bne.n	8009404 <_puts_r+0x68>
 8009434:	e7ce      	b.n	80093d4 <_puts_r+0x38>
 8009436:	3e01      	subs	r6, #1
 8009438:	e7e4      	b.n	8009404 <_puts_r+0x68>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	220a      	movs	r2, #10
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	e7ee      	b.n	8009424 <_puts_r+0x88>
	...

08009448 <puts>:
 8009448:	4b02      	ldr	r3, [pc, #8]	@ (8009454 <puts+0xc>)
 800944a:	4601      	mov	r1, r0
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f7ff bfa5 	b.w	800939c <_puts_r>
 8009452:	bf00      	nop
 8009454:	20000b28 	.word	0x20000b28

08009458 <__sread>:
 8009458:	b510      	push	{r4, lr}
 800945a:	460c      	mov	r4, r1
 800945c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009460:	f000 f912 	bl	8009688 <_read_r>
 8009464:	2800      	cmp	r0, #0
 8009466:	bfab      	itete	ge
 8009468:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800946a:	89a3      	ldrhlt	r3, [r4, #12]
 800946c:	181b      	addge	r3, r3, r0
 800946e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009472:	bfac      	ite	ge
 8009474:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009476:	81a3      	strhlt	r3, [r4, #12]
 8009478:	bd10      	pop	{r4, pc}

0800947a <__swrite>:
 800947a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800947e:	461f      	mov	r7, r3
 8009480:	898b      	ldrh	r3, [r1, #12]
 8009482:	05db      	lsls	r3, r3, #23
 8009484:	4605      	mov	r5, r0
 8009486:	460c      	mov	r4, r1
 8009488:	4616      	mov	r6, r2
 800948a:	d505      	bpl.n	8009498 <__swrite+0x1e>
 800948c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009490:	2302      	movs	r3, #2
 8009492:	2200      	movs	r2, #0
 8009494:	f000 f8e6 	bl	8009664 <_lseek_r>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800949e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	4632      	mov	r2, r6
 80094a6:	463b      	mov	r3, r7
 80094a8:	4628      	mov	r0, r5
 80094aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ae:	f000 b90d 	b.w	80096cc <_write_r>

080094b2 <__sseek>:
 80094b2:	b510      	push	{r4, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ba:	f000 f8d3 	bl	8009664 <_lseek_r>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	bf15      	itete	ne
 80094c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094ce:	81a3      	strheq	r3, [r4, #12]
 80094d0:	bf18      	it	ne
 80094d2:	81a3      	strhne	r3, [r4, #12]
 80094d4:	bd10      	pop	{r4, pc}

080094d6 <__sclose>:
 80094d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094da:	f000 b8b3 	b.w	8009644 <_close_r>

080094de <__swbuf_r>:
 80094de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e0:	460e      	mov	r6, r1
 80094e2:	4614      	mov	r4, r2
 80094e4:	4605      	mov	r5, r0
 80094e6:	b118      	cbz	r0, 80094f0 <__swbuf_r+0x12>
 80094e8:	6a03      	ldr	r3, [r0, #32]
 80094ea:	b90b      	cbnz	r3, 80094f0 <__swbuf_r+0x12>
 80094ec:	f7ff ff0e 	bl	800930c <__sinit>
 80094f0:	69a3      	ldr	r3, [r4, #24]
 80094f2:	60a3      	str	r3, [r4, #8]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	071a      	lsls	r2, r3, #28
 80094f8:	d501      	bpl.n	80094fe <__swbuf_r+0x20>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	b943      	cbnz	r3, 8009510 <__swbuf_r+0x32>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f82b 	bl	800955c <__swsetup_r>
 8009506:	b118      	cbz	r0, 8009510 <__swbuf_r+0x32>
 8009508:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800950c:	4638      	mov	r0, r7
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	1a98      	subs	r0, r3, r2
 8009516:	6963      	ldr	r3, [r4, #20]
 8009518:	b2f6      	uxtb	r6, r6
 800951a:	4283      	cmp	r3, r0
 800951c:	4637      	mov	r7, r6
 800951e:	dc05      	bgt.n	800952c <__swbuf_r+0x4e>
 8009520:	4621      	mov	r1, r4
 8009522:	4628      	mov	r0, r5
 8009524:	f7ff fe3e 	bl	80091a4 <_fflush_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	d1ed      	bne.n	8009508 <__swbuf_r+0x2a>
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	3b01      	subs	r3, #1
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	6022      	str	r2, [r4, #0]
 8009538:	701e      	strb	r6, [r3, #0]
 800953a:	6962      	ldr	r2, [r4, #20]
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	429a      	cmp	r2, r3
 8009540:	d004      	beq.n	800954c <__swbuf_r+0x6e>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	07db      	lsls	r3, r3, #31
 8009546:	d5e1      	bpl.n	800950c <__swbuf_r+0x2e>
 8009548:	2e0a      	cmp	r6, #10
 800954a:	d1df      	bne.n	800950c <__swbuf_r+0x2e>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f7ff fe28 	bl	80091a4 <_fflush_r>
 8009554:	2800      	cmp	r0, #0
 8009556:	d0d9      	beq.n	800950c <__swbuf_r+0x2e>
 8009558:	e7d6      	b.n	8009508 <__swbuf_r+0x2a>
	...

0800955c <__swsetup_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4b29      	ldr	r3, [pc, #164]	@ (8009604 <__swsetup_r+0xa8>)
 8009560:	4605      	mov	r5, r0
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	460c      	mov	r4, r1
 8009566:	b118      	cbz	r0, 8009570 <__swsetup_r+0x14>
 8009568:	6a03      	ldr	r3, [r0, #32]
 800956a:	b90b      	cbnz	r3, 8009570 <__swsetup_r+0x14>
 800956c:	f7ff fece 	bl	800930c <__sinit>
 8009570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009574:	0719      	lsls	r1, r3, #28
 8009576:	d422      	bmi.n	80095be <__swsetup_r+0x62>
 8009578:	06da      	lsls	r2, r3, #27
 800957a:	d407      	bmi.n	800958c <__swsetup_r+0x30>
 800957c:	2209      	movs	r2, #9
 800957e:	602a      	str	r2, [r5, #0]
 8009580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800958a:	e033      	b.n	80095f4 <__swsetup_r+0x98>
 800958c:	0758      	lsls	r0, r3, #29
 800958e:	d512      	bpl.n	80095b6 <__swsetup_r+0x5a>
 8009590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009592:	b141      	cbz	r1, 80095a6 <__swsetup_r+0x4a>
 8009594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009598:	4299      	cmp	r1, r3
 800959a:	d002      	beq.n	80095a2 <__swsetup_r+0x46>
 800959c:	4628      	mov	r0, r5
 800959e:	f000 ff4f 	bl	800a440 <_free_r>
 80095a2:	2300      	movs	r3, #0
 80095a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	2300      	movs	r3, #0
 80095b0:	6063      	str	r3, [r4, #4]
 80095b2:	6923      	ldr	r3, [r4, #16]
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	f043 0308 	orr.w	r3, r3, #8
 80095bc:	81a3      	strh	r3, [r4, #12]
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	b94b      	cbnz	r3, 80095d6 <__swsetup_r+0x7a>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095cc:	d003      	beq.n	80095d6 <__swsetup_r+0x7a>
 80095ce:	4621      	mov	r1, r4
 80095d0:	4628      	mov	r0, r5
 80095d2:	f001 fc7b 	bl	800aecc <__smakebuf_r>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	f013 0201 	ands.w	r2, r3, #1
 80095de:	d00a      	beq.n	80095f6 <__swsetup_r+0x9a>
 80095e0:	2200      	movs	r2, #0
 80095e2:	60a2      	str	r2, [r4, #8]
 80095e4:	6962      	ldr	r2, [r4, #20]
 80095e6:	4252      	negs	r2, r2
 80095e8:	61a2      	str	r2, [r4, #24]
 80095ea:	6922      	ldr	r2, [r4, #16]
 80095ec:	b942      	cbnz	r2, 8009600 <__swsetup_r+0xa4>
 80095ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095f2:	d1c5      	bne.n	8009580 <__swsetup_r+0x24>
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
 80095f6:	0799      	lsls	r1, r3, #30
 80095f8:	bf58      	it	pl
 80095fa:	6962      	ldrpl	r2, [r4, #20]
 80095fc:	60a2      	str	r2, [r4, #8]
 80095fe:	e7f4      	b.n	80095ea <__swsetup_r+0x8e>
 8009600:	2000      	movs	r0, #0
 8009602:	e7f7      	b.n	80095f4 <__swsetup_r+0x98>
 8009604:	20000b28 	.word	0x20000b28

08009608 <memset>:
 8009608:	4402      	add	r2, r0
 800960a:	4603      	mov	r3, r0
 800960c:	4293      	cmp	r3, r2
 800960e:	d100      	bne.n	8009612 <memset+0xa>
 8009610:	4770      	bx	lr
 8009612:	f803 1b01 	strb.w	r1, [r3], #1
 8009616:	e7f9      	b.n	800960c <memset+0x4>

08009618 <strncmp>:
 8009618:	b510      	push	{r4, lr}
 800961a:	b16a      	cbz	r2, 8009638 <strncmp+0x20>
 800961c:	3901      	subs	r1, #1
 800961e:	1884      	adds	r4, r0, r2
 8009620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009624:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009628:	429a      	cmp	r2, r3
 800962a:	d103      	bne.n	8009634 <strncmp+0x1c>
 800962c:	42a0      	cmp	r0, r4
 800962e:	d001      	beq.n	8009634 <strncmp+0x1c>
 8009630:	2a00      	cmp	r2, #0
 8009632:	d1f5      	bne.n	8009620 <strncmp+0x8>
 8009634:	1ad0      	subs	r0, r2, r3
 8009636:	bd10      	pop	{r4, pc}
 8009638:	4610      	mov	r0, r2
 800963a:	e7fc      	b.n	8009636 <strncmp+0x1e>

0800963c <_localeconv_r>:
 800963c:	4800      	ldr	r0, [pc, #0]	@ (8009640 <_localeconv_r+0x4>)
 800963e:	4770      	bx	lr
 8009640:	20000c68 	.word	0x20000c68

08009644 <_close_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	@ (8009660 <_close_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f8 fc00 	bl	8001e54 <_close>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_close_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_close_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	200012e8 	.word	0x200012e8

08009664 <_lseek_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d07      	ldr	r5, [pc, #28]	@ (8009684 <_lseek_r+0x20>)
 8009668:	4604      	mov	r4, r0
 800966a:	4608      	mov	r0, r1
 800966c:	4611      	mov	r1, r2
 800966e:	2200      	movs	r2, #0
 8009670:	602a      	str	r2, [r5, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	f7f8 fbf8 	bl	8001e68 <_lseek>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_lseek_r+0x1e>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_lseek_r+0x1e>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	200012e8 	.word	0x200012e8

08009688 <_read_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4d07      	ldr	r5, [pc, #28]	@ (80096a8 <_read_r+0x20>)
 800968c:	4604      	mov	r4, r0
 800968e:	4608      	mov	r0, r1
 8009690:	4611      	mov	r1, r2
 8009692:	2200      	movs	r2, #0
 8009694:	602a      	str	r2, [r5, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	f7f8 fbce 	bl	8001e38 <_read>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d102      	bne.n	80096a6 <_read_r+0x1e>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	b103      	cbz	r3, 80096a6 <_read_r+0x1e>
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	200012e8 	.word	0x200012e8

080096ac <_sbrk_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4d06      	ldr	r5, [pc, #24]	@ (80096c8 <_sbrk_r+0x1c>)
 80096b0:	2300      	movs	r3, #0
 80096b2:	4604      	mov	r4, r0
 80096b4:	4608      	mov	r0, r1
 80096b6:	602b      	str	r3, [r5, #0]
 80096b8:	f7f8 fbd8 	bl	8001e6c <_sbrk>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_sbrk_r+0x1a>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_sbrk_r+0x1a>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200012e8 	.word	0x200012e8

080096cc <_write_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	@ (80096ec <_write_r+0x20>)
 80096d0:	4604      	mov	r4, r0
 80096d2:	4608      	mov	r0, r1
 80096d4:	4611      	mov	r1, r2
 80096d6:	2200      	movs	r2, #0
 80096d8:	602a      	str	r2, [r5, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	f7fb f9d0 	bl	8004a80 <_write>
 80096e0:	1c43      	adds	r3, r0, #1
 80096e2:	d102      	bne.n	80096ea <_write_r+0x1e>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	b103      	cbz	r3, 80096ea <_write_r+0x1e>
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	200012e8 	.word	0x200012e8

080096f0 <__errno>:
 80096f0:	4b01      	ldr	r3, [pc, #4]	@ (80096f8 <__errno+0x8>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000b28 	.word	0x20000b28

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009734 <__libc_init_array+0x38>)
 8009700:	4c0d      	ldr	r4, [pc, #52]	@ (8009738 <__libc_init_array+0x3c>)
 8009702:	1b64      	subs	r4, r4, r5
 8009704:	10a4      	asrs	r4, r4, #2
 8009706:	2600      	movs	r6, #0
 8009708:	42a6      	cmp	r6, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	4d0b      	ldr	r5, [pc, #44]	@ (800973c <__libc_init_array+0x40>)
 800970e:	4c0c      	ldr	r4, [pc, #48]	@ (8009740 <__libc_init_array+0x44>)
 8009710:	f001 fdec 	bl	800b2ec <_init>
 8009714:	1b64      	subs	r4, r4, r5
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	2600      	movs	r6, #0
 800971a:	42a6      	cmp	r6, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f855 3b04 	ldr.w	r3, [r5], #4
 8009724:	4798      	blx	r3
 8009726:	3601      	adds	r6, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f855 3b04 	ldr.w	r3, [r5], #4
 800972e:	4798      	blx	r3
 8009730:	3601      	adds	r6, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	0801a7a8 	.word	0x0801a7a8
 8009738:	0801a7a8 	.word	0x0801a7a8
 800973c:	0801a7a8 	.word	0x0801a7a8
 8009740:	0801a7ac 	.word	0x0801a7ac

08009744 <__retarget_lock_init_recursive>:
 8009744:	4770      	bx	lr

08009746 <__retarget_lock_acquire_recursive>:
 8009746:	4770      	bx	lr

08009748 <__retarget_lock_release_recursive>:
 8009748:	4770      	bx	lr

0800974a <memcpy>:
 800974a:	440a      	add	r2, r1
 800974c:	4291      	cmp	r1, r2
 800974e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009752:	d100      	bne.n	8009756 <memcpy+0xc>
 8009754:	4770      	bx	lr
 8009756:	b510      	push	{r4, lr}
 8009758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009760:	4291      	cmp	r1, r2
 8009762:	d1f9      	bne.n	8009758 <memcpy+0xe>
 8009764:	bd10      	pop	{r4, pc}
	...

08009768 <__assert_func>:
 8009768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800976a:	4614      	mov	r4, r2
 800976c:	461a      	mov	r2, r3
 800976e:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <__assert_func+0x2c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4605      	mov	r5, r0
 8009774:	68d8      	ldr	r0, [r3, #12]
 8009776:	b954      	cbnz	r4, 800978e <__assert_func+0x26>
 8009778:	4b07      	ldr	r3, [pc, #28]	@ (8009798 <__assert_func+0x30>)
 800977a:	461c      	mov	r4, r3
 800977c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009780:	9100      	str	r1, [sp, #0]
 8009782:	462b      	mov	r3, r5
 8009784:	4905      	ldr	r1, [pc, #20]	@ (800979c <__assert_func+0x34>)
 8009786:	f001 fb69 	bl	800ae5c <fiprintf>
 800978a:	f001 fbfd 	bl	800af88 <abort>
 800978e:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <__assert_func+0x38>)
 8009790:	e7f4      	b.n	800977c <__assert_func+0x14>
 8009792:	bf00      	nop
 8009794:	20000b28 	.word	0x20000b28
 8009798:	080101f4 	.word	0x080101f4
 800979c:	080101c6 	.word	0x080101c6
 80097a0:	080101b9 	.word	0x080101b9

080097a4 <quorem>:
 80097a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	6903      	ldr	r3, [r0, #16]
 80097aa:	690c      	ldr	r4, [r1, #16]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	4607      	mov	r7, r0
 80097b0:	db7e      	blt.n	80098b0 <quorem+0x10c>
 80097b2:	3c01      	subs	r4, #1
 80097b4:	f101 0814 	add.w	r8, r1, #20
 80097b8:	00a3      	lsls	r3, r4, #2
 80097ba:	f100 0514 	add.w	r5, r0, #20
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ce:	3301      	adds	r3, #1
 80097d0:	429a      	cmp	r2, r3
 80097d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80097da:	d32e      	bcc.n	800983a <quorem+0x96>
 80097dc:	f04f 0a00 	mov.w	sl, #0
 80097e0:	46c4      	mov	ip, r8
 80097e2:	46ae      	mov	lr, r5
 80097e4:	46d3      	mov	fp, sl
 80097e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097ea:	b298      	uxth	r0, r3
 80097ec:	fb06 a000 	mla	r0, r6, r0, sl
 80097f0:	0c02      	lsrs	r2, r0, #16
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	fb06 2303 	mla	r3, r6, r3, r2
 80097f8:	f8de 2000 	ldr.w	r2, [lr]
 80097fc:	b280      	uxth	r0, r0
 80097fe:	b292      	uxth	r2, r2
 8009800:	1a12      	subs	r2, r2, r0
 8009802:	445a      	add	r2, fp
 8009804:	f8de 0000 	ldr.w	r0, [lr]
 8009808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800980c:	b29b      	uxth	r3, r3
 800980e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009812:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009816:	b292      	uxth	r2, r2
 8009818:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800981c:	45e1      	cmp	r9, ip
 800981e:	f84e 2b04 	str.w	r2, [lr], #4
 8009822:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009826:	d2de      	bcs.n	80097e6 <quorem+0x42>
 8009828:	9b00      	ldr	r3, [sp, #0]
 800982a:	58eb      	ldr	r3, [r5, r3]
 800982c:	b92b      	cbnz	r3, 800983a <quorem+0x96>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	3b04      	subs	r3, #4
 8009832:	429d      	cmp	r5, r3
 8009834:	461a      	mov	r2, r3
 8009836:	d32f      	bcc.n	8009898 <quorem+0xf4>
 8009838:	613c      	str	r4, [r7, #16]
 800983a:	4638      	mov	r0, r7
 800983c:	f001 f8c4 	bl	800a9c8 <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	db25      	blt.n	8009890 <quorem+0xec>
 8009844:	4629      	mov	r1, r5
 8009846:	2000      	movs	r0, #0
 8009848:	f858 2b04 	ldr.w	r2, [r8], #4
 800984c:	f8d1 c000 	ldr.w	ip, [r1]
 8009850:	fa1f fe82 	uxth.w	lr, r2
 8009854:	fa1f f38c 	uxth.w	r3, ip
 8009858:	eba3 030e 	sub.w	r3, r3, lr
 800985c:	4403      	add	r3, r0
 800985e:	0c12      	lsrs	r2, r2, #16
 8009860:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009864:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009868:	b29b      	uxth	r3, r3
 800986a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800986e:	45c1      	cmp	r9, r8
 8009870:	f841 3b04 	str.w	r3, [r1], #4
 8009874:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009878:	d2e6      	bcs.n	8009848 <quorem+0xa4>
 800987a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800987e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009882:	b922      	cbnz	r2, 800988e <quorem+0xea>
 8009884:	3b04      	subs	r3, #4
 8009886:	429d      	cmp	r5, r3
 8009888:	461a      	mov	r2, r3
 800988a:	d30b      	bcc.n	80098a4 <quorem+0x100>
 800988c:	613c      	str	r4, [r7, #16]
 800988e:	3601      	adds	r6, #1
 8009890:	4630      	mov	r0, r6
 8009892:	b003      	add	sp, #12
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	3b04      	subs	r3, #4
 800989c:	2a00      	cmp	r2, #0
 800989e:	d1cb      	bne.n	8009838 <quorem+0x94>
 80098a0:	3c01      	subs	r4, #1
 80098a2:	e7c6      	b.n	8009832 <quorem+0x8e>
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d1ef      	bne.n	800988c <quorem+0xe8>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	e7ea      	b.n	8009886 <quorem+0xe2>
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7ee      	b.n	8009892 <quorem+0xee>
 80098b4:	0000      	movs	r0, r0
	...

080098b8 <_dtoa_r>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	69c7      	ldr	r7, [r0, #28]
 80098be:	b099      	sub	sp, #100	@ 0x64
 80098c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80098c4:	ec55 4b10 	vmov	r4, r5, d0
 80098c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80098ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80098cc:	4683      	mov	fp, r0
 80098ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80098d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098d2:	b97f      	cbnz	r7, 80098f4 <_dtoa_r+0x3c>
 80098d4:	2010      	movs	r0, #16
 80098d6:	f7fb f91d 	bl	8004b14 <__wrap_malloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80098e0:	b920      	cbnz	r0, 80098ec <_dtoa_r+0x34>
 80098e2:	4ba7      	ldr	r3, [pc, #668]	@ (8009b80 <_dtoa_r+0x2c8>)
 80098e4:	21ef      	movs	r1, #239	@ 0xef
 80098e6:	48a7      	ldr	r0, [pc, #668]	@ (8009b84 <_dtoa_r+0x2cc>)
 80098e8:	f7ff ff3e 	bl	8009768 <__assert_func>
 80098ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098f0:	6007      	str	r7, [r0, #0]
 80098f2:	60c7      	str	r7, [r0, #12]
 80098f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	b159      	cbz	r1, 8009914 <_dtoa_r+0x5c>
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	604a      	str	r2, [r1, #4]
 8009900:	2301      	movs	r3, #1
 8009902:	4093      	lsls	r3, r2
 8009904:	608b      	str	r3, [r1, #8]
 8009906:	4658      	mov	r0, fp
 8009908:	f000 fe24 	bl	800a554 <_Bfree>
 800990c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	1e2b      	subs	r3, r5, #0
 8009916:	bfb9      	ittee	lt
 8009918:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	9303      	strlt	r3, [sp, #12]
 800991e:	2300      	movge	r3, #0
 8009920:	6033      	strge	r3, [r6, #0]
 8009922:	9f03      	ldr	r7, [sp, #12]
 8009924:	4b98      	ldr	r3, [pc, #608]	@ (8009b88 <_dtoa_r+0x2d0>)
 8009926:	bfbc      	itt	lt
 8009928:	2201      	movlt	r2, #1
 800992a:	6032      	strlt	r2, [r6, #0]
 800992c:	43bb      	bics	r3, r7
 800992e:	d112      	bne.n	8009956 <_dtoa_r+0x9e>
 8009930:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009932:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800993c:	4323      	orrs	r3, r4
 800993e:	f000 854d 	beq.w	800a3dc <_dtoa_r+0xb24>
 8009942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009944:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b9c <_dtoa_r+0x2e4>
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 854f 	beq.w	800a3ec <_dtoa_r+0xb34>
 800994e:	f10a 0303 	add.w	r3, sl, #3
 8009952:	f000 bd49 	b.w	800a3e8 <_dtoa_r+0xb30>
 8009956:	ed9d 7b02 	vldr	d7, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	ec51 0b17 	vmov	r0, r1, d7
 8009960:	2300      	movs	r3, #0
 8009962:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009966:	f7f7 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800996a:	4680      	mov	r8, r0
 800996c:	b158      	cbz	r0, 8009986 <_dtoa_r+0xce>
 800996e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009970:	2301      	movs	r3, #1
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009976:	b113      	cbz	r3, 800997e <_dtoa_r+0xc6>
 8009978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800997a:	4b84      	ldr	r3, [pc, #528]	@ (8009b8c <_dtoa_r+0x2d4>)
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ba0 <_dtoa_r+0x2e8>
 8009982:	f000 bd33 	b.w	800a3ec <_dtoa_r+0xb34>
 8009986:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800998a:	aa16      	add	r2, sp, #88	@ 0x58
 800998c:	a917      	add	r1, sp, #92	@ 0x5c
 800998e:	4658      	mov	r0, fp
 8009990:	f001 f8ca 	bl	800ab28 <__d2b>
 8009994:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009998:	4681      	mov	r9, r0
 800999a:	2e00      	cmp	r6, #0
 800999c:	d077      	beq.n	8009a8e <_dtoa_r+0x1d6>
 800999e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80099a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80099b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099b8:	4619      	mov	r1, r3
 80099ba:	2200      	movs	r2, #0
 80099bc:	4b74      	ldr	r3, [pc, #464]	@ (8009b90 <_dtoa_r+0x2d8>)
 80099be:	f7f6 fc83 	bl	80002c8 <__aeabi_dsub>
 80099c2:	a369      	add	r3, pc, #420	@ (adr r3, 8009b68 <_dtoa_r+0x2b0>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009b70 <_dtoa_r+0x2b8>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fc7b 	bl	80002cc <__adddf3>
 80099d6:	4604      	mov	r4, r0
 80099d8:	4630      	mov	r0, r6
 80099da:	460d      	mov	r5, r1
 80099dc:	f7f6 fdc2 	bl	8000564 <__aeabi_i2d>
 80099e0:	a365      	add	r3, pc, #404	@ (adr r3, 8009b78 <_dtoa_r+0x2c0>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fe27 	bl	8000638 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc6b 	bl	80002cc <__adddf3>
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	f7f7 f8cd 	bl	8000b98 <__aeabi_d2iz>
 80099fe:	2200      	movs	r2, #0
 8009a00:	4607      	mov	r7, r0
 8009a02:	2300      	movs	r3, #0
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f7 f888 	bl	8000b1c <__aeabi_dcmplt>
 8009a0c:	b140      	cbz	r0, 8009a20 <_dtoa_r+0x168>
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f7f6 fda8 	bl	8000564 <__aeabi_i2d>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f7 f876 	bl	8000b08 <__aeabi_dcmpeq>
 8009a1c:	b900      	cbnz	r0, 8009a20 <_dtoa_r+0x168>
 8009a1e:	3f01      	subs	r7, #1
 8009a20:	2f16      	cmp	r7, #22
 8009a22:	d851      	bhi.n	8009ac8 <_dtoa_r+0x210>
 8009a24:	4b5b      	ldr	r3, [pc, #364]	@ (8009b94 <_dtoa_r+0x2dc>)
 8009a26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a32:	f7f7 f873 	bl	8000b1c <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d048      	beq.n	8009acc <_dtoa_r+0x214>
 8009a3a:	3f01      	subs	r7, #1
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a42:	1b9b      	subs	r3, r3, r6
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	bf44      	itt	mi
 8009a48:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a4c:	2300      	movmi	r3, #0
 8009a4e:	9208      	str	r2, [sp, #32]
 8009a50:	bf54      	ite	pl
 8009a52:	f04f 0800 	movpl.w	r8, #0
 8009a56:	9308      	strmi	r3, [sp, #32]
 8009a58:	2f00      	cmp	r7, #0
 8009a5a:	db39      	blt.n	8009ad0 <_dtoa_r+0x218>
 8009a5c:	9b08      	ldr	r3, [sp, #32]
 8009a5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009a60:	443b      	add	r3, r7
 8009a62:	9308      	str	r3, [sp, #32]
 8009a64:	2300      	movs	r3, #0
 8009a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	d864      	bhi.n	8009b38 <_dtoa_r+0x280>
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	bfc4      	itt	gt
 8009a72:	3b04      	subgt	r3, #4
 8009a74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a78:	f1a3 0302 	sub.w	r3, r3, #2
 8009a7c:	bfcc      	ite	gt
 8009a7e:	2400      	movgt	r4, #0
 8009a80:	2401      	movle	r4, #1
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d863      	bhi.n	8009b4e <_dtoa_r+0x296>
 8009a86:	e8df f003 	tbb	[pc, r3]
 8009a8a:	372a      	.short	0x372a
 8009a8c:	5535      	.short	0x5535
 8009a8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009a92:	441e      	add	r6, r3
 8009a94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	bfc1      	itttt	gt
 8009a9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009aa0:	409f      	lslgt	r7, r3
 8009aa2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009aa6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009aaa:	bfd6      	itet	le
 8009aac:	f1c3 0320 	rsble	r3, r3, #32
 8009ab0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009ab4:	fa04 f003 	lslle.w	r0, r4, r3
 8009ab8:	f7f6 fd44 	bl	8000544 <__aeabi_ui2d>
 8009abc:	2201      	movs	r2, #1
 8009abe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ac2:	3e01      	subs	r6, #1
 8009ac4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ac6:	e777      	b.n	80099b8 <_dtoa_r+0x100>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e7b8      	b.n	8009a3e <_dtoa_r+0x186>
 8009acc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ace:	e7b7      	b.n	8009a40 <_dtoa_r+0x188>
 8009ad0:	427b      	negs	r3, r7
 8009ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	eba8 0807 	sub.w	r8, r8, r7
 8009ada:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009adc:	e7c4      	b.n	8009a68 <_dtoa_r+0x1b0>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc35      	bgt.n	8009b54 <_dtoa_r+0x29c>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	461a      	mov	r2, r3
 8009af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009af2:	e00b      	b.n	8009b0c <_dtoa_r+0x254>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e7f3      	b.n	8009ae0 <_dtoa_r+0x228>
 8009af8:	2300      	movs	r3, #0
 8009afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009afe:	18fb      	adds	r3, r7, r3
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	bfb8      	it	lt
 8009b0a:	2301      	movlt	r3, #1
 8009b0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b10:	2100      	movs	r1, #0
 8009b12:	2204      	movs	r2, #4
 8009b14:	f102 0514 	add.w	r5, r2, #20
 8009b18:	429d      	cmp	r5, r3
 8009b1a:	d91f      	bls.n	8009b5c <_dtoa_r+0x2a4>
 8009b1c:	6041      	str	r1, [r0, #4]
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f000 fcd8 	bl	800a4d4 <_Balloc>
 8009b24:	4682      	mov	sl, r0
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d13c      	bne.n	8009ba4 <_dtoa_r+0x2ec>
 8009b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009b98 <_dtoa_r+0x2e0>)
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b32:	e6d8      	b.n	80098e6 <_dtoa_r+0x2e>
 8009b34:	2301      	movs	r3, #1
 8009b36:	e7e0      	b.n	8009afa <_dtoa_r+0x242>
 8009b38:	2401      	movs	r4, #1
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2312      	movs	r3, #18
 8009b4c:	e7d0      	b.n	8009af0 <_dtoa_r+0x238>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b52:	e7f5      	b.n	8009b40 <_dtoa_r+0x288>
 8009b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	9307      	str	r3, [sp, #28]
 8009b5a:	e7d7      	b.n	8009b0c <_dtoa_r+0x254>
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	0052      	lsls	r2, r2, #1
 8009b60:	e7d8      	b.n	8009b14 <_dtoa_r+0x25c>
 8009b62:	bf00      	nop
 8009b64:	f3af 8000 	nop.w
 8009b68:	636f4361 	.word	0x636f4361
 8009b6c:	3fd287a7 	.word	0x3fd287a7
 8009b70:	8b60c8b3 	.word	0x8b60c8b3
 8009b74:	3fc68a28 	.word	0x3fc68a28
 8009b78:	509f79fb 	.word	0x509f79fb
 8009b7c:	3fd34413 	.word	0x3fd34413
 8009b80:	08010118 	.word	0x08010118
 8009b84:	08010202 	.word	0x08010202
 8009b88:	7ff00000 	.word	0x7ff00000
 8009b8c:	080100c2 	.word	0x080100c2
 8009b90:	3ff80000 	.word	0x3ff80000
 8009b94:	080102f8 	.word	0x080102f8
 8009b98:	0801025a 	.word	0x0801025a
 8009b9c:	080101fe 	.word	0x080101fe
 8009ba0:	080100c1 	.word	0x080100c1
 8009ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ba8:	6018      	str	r0, [r3, #0]
 8009baa:	9b07      	ldr	r3, [sp, #28]
 8009bac:	2b0e      	cmp	r3, #14
 8009bae:	f200 80a4 	bhi.w	8009cfa <_dtoa_r+0x442>
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	f000 80a1 	beq.w	8009cfa <_dtoa_r+0x442>
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	dd33      	ble.n	8009c24 <_dtoa_r+0x36c>
 8009bbc:	4bad      	ldr	r3, [pc, #692]	@ (8009e74 <_dtoa_r+0x5bc>)
 8009bbe:	f007 020f 	and.w	r2, r7, #15
 8009bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc6:	ed93 7b00 	vldr	d7, [r3]
 8009bca:	05f8      	lsls	r0, r7, #23
 8009bcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009bd4:	d516      	bpl.n	8009c04 <_dtoa_r+0x34c>
 8009bd6:	4ba8      	ldr	r3, [pc, #672]	@ (8009e78 <_dtoa_r+0x5c0>)
 8009bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009be0:	f7f6 fe54 	bl	800088c <__aeabi_ddiv>
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	f004 040f 	and.w	r4, r4, #15
 8009bec:	2603      	movs	r6, #3
 8009bee:	4da2      	ldr	r5, [pc, #648]	@ (8009e78 <_dtoa_r+0x5c0>)
 8009bf0:	b954      	cbnz	r4, 8009c08 <_dtoa_r+0x350>
 8009bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bfa:	f7f6 fe47 	bl	800088c <__aeabi_ddiv>
 8009bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c02:	e028      	b.n	8009c56 <_dtoa_r+0x39e>
 8009c04:	2602      	movs	r6, #2
 8009c06:	e7f2      	b.n	8009bee <_dtoa_r+0x336>
 8009c08:	07e1      	lsls	r1, r4, #31
 8009c0a:	d508      	bpl.n	8009c1e <_dtoa_r+0x366>
 8009c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c14:	f7f6 fd10 	bl	8000638 <__aeabi_dmul>
 8009c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c1c:	3601      	adds	r6, #1
 8009c1e:	1064      	asrs	r4, r4, #1
 8009c20:	3508      	adds	r5, #8
 8009c22:	e7e5      	b.n	8009bf0 <_dtoa_r+0x338>
 8009c24:	f000 80d2 	beq.w	8009dcc <_dtoa_r+0x514>
 8009c28:	427c      	negs	r4, r7
 8009c2a:	4b92      	ldr	r3, [pc, #584]	@ (8009e74 <_dtoa_r+0x5bc>)
 8009c2c:	4d92      	ldr	r5, [pc, #584]	@ (8009e78 <_dtoa_r+0x5c0>)
 8009c2e:	f004 020f 	and.w	r2, r4, #15
 8009c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3e:	f7f6 fcfb 	bl	8000638 <__aeabi_dmul>
 8009c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c46:	1124      	asrs	r4, r4, #4
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2602      	movs	r6, #2
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	f040 80b2 	bne.w	8009db6 <_dtoa_r+0x4fe>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1d3      	bne.n	8009bfe <_dtoa_r+0x346>
 8009c56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80b7 	beq.w	8009dd0 <_dtoa_r+0x518>
 8009c62:	4b86      	ldr	r3, [pc, #536]	@ (8009e7c <_dtoa_r+0x5c4>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	4620      	mov	r0, r4
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7f6 ff57 	bl	8000b1c <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f000 80ae 	beq.w	8009dd0 <_dtoa_r+0x518>
 8009c74:	9b07      	ldr	r3, [sp, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 80aa 	beq.w	8009dd0 <_dtoa_r+0x518>
 8009c7c:	9b00      	ldr	r3, [sp, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	dd37      	ble.n	8009cf2 <_dtoa_r+0x43a>
 8009c82:	1e7b      	subs	r3, r7, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	4620      	mov	r0, r4
 8009c88:	4b7d      	ldr	r3, [pc, #500]	@ (8009e80 <_dtoa_r+0x5c8>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fcd3 	bl	8000638 <__aeabi_dmul>
 8009c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c96:	9c00      	ldr	r4, [sp, #0]
 8009c98:	3601      	adds	r6, #1
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7f6 fc62 	bl	8000564 <__aeabi_i2d>
 8009ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ca4:	f7f6 fcc8 	bl	8000638 <__aeabi_dmul>
 8009ca8:	4b76      	ldr	r3, [pc, #472]	@ (8009e84 <_dtoa_r+0x5cc>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	f7f6 fb0e 	bl	80002cc <__adddf3>
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cb6:	2c00      	cmp	r4, #0
 8009cb8:	f040 808d 	bne.w	8009dd6 <_dtoa_r+0x51e>
 8009cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc0:	4b71      	ldr	r3, [pc, #452]	@ (8009e88 <_dtoa_r+0x5d0>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f7f6 fb00 	bl	80002c8 <__aeabi_dsub>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4633      	mov	r3, r6
 8009cd4:	f7f6 ff40 	bl	8000b58 <__aeabi_dcmpgt>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f040 828b 	bne.w	800a1f4 <_dtoa_r+0x93c>
 8009cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ce8:	f7f6 ff18 	bl	8000b1c <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f040 8128 	bne.w	8009f42 <_dtoa_r+0x68a>
 8009cf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009cf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009cfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f2c0 815a 	blt.w	8009fb6 <_dtoa_r+0x6fe>
 8009d02:	2f0e      	cmp	r7, #14
 8009d04:	f300 8157 	bgt.w	8009fb6 <_dtoa_r+0x6fe>
 8009d08:	4b5a      	ldr	r3, [pc, #360]	@ (8009e74 <_dtoa_r+0x5bc>)
 8009d0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d0e:	ed93 7b00 	vldr	d7, [r3]
 8009d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	ed8d 7b00 	vstr	d7, [sp]
 8009d1a:	da03      	bge.n	8009d24 <_dtoa_r+0x46c>
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f340 8101 	ble.w	8009f26 <_dtoa_r+0x66e>
 8009d24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d28:	4656      	mov	r6, sl
 8009d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fdab 	bl	800088c <__aeabi_ddiv>
 8009d36:	f7f6 ff2f 	bl	8000b98 <__aeabi_d2iz>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	f7f6 fc12 	bl	8000564 <__aeabi_i2d>
 8009d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d44:	f7f6 fc78 	bl	8000638 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d54:	f7f6 fab8 	bl	80002c8 <__aeabi_dsub>
 8009d58:	f806 4b01 	strb.w	r4, [r6], #1
 8009d5c:	9d07      	ldr	r5, [sp, #28]
 8009d5e:	eba6 040a 	sub.w	r4, r6, sl
 8009d62:	42a5      	cmp	r5, r4
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	f040 8117 	bne.w	8009f9a <_dtoa_r+0x6e2>
 8009d6c:	f7f6 faae 	bl	80002cc <__adddf3>
 8009d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	f7f6 feee 	bl	8000b58 <__aeabi_dcmpgt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 80f9 	bne.w	8009f74 <_dtoa_r+0x6bc>
 8009d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 febd 	bl	8000b08 <__aeabi_dcmpeq>
 8009d8e:	b118      	cbz	r0, 8009d98 <_dtoa_r+0x4e0>
 8009d90:	f018 0f01 	tst.w	r8, #1
 8009d94:	f040 80ee 	bne.w	8009f74 <_dtoa_r+0x6bc>
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4658      	mov	r0, fp
 8009d9c:	f000 fbda 	bl	800a554 <_Bfree>
 8009da0:	2300      	movs	r3, #0
 8009da2:	7033      	strb	r3, [r6, #0]
 8009da4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009da6:	3701      	adds	r7, #1
 8009da8:	601f      	str	r7, [r3, #0]
 8009daa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 831d 	beq.w	800a3ec <_dtoa_r+0xb34>
 8009db2:	601e      	str	r6, [r3, #0]
 8009db4:	e31a      	b.n	800a3ec <_dtoa_r+0xb34>
 8009db6:	07e2      	lsls	r2, r4, #31
 8009db8:	d505      	bpl.n	8009dc6 <_dtoa_r+0x50e>
 8009dba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dbe:	f7f6 fc3b 	bl	8000638 <__aeabi_dmul>
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	1064      	asrs	r4, r4, #1
 8009dc8:	3508      	adds	r5, #8
 8009dca:	e73f      	b.n	8009c4c <_dtoa_r+0x394>
 8009dcc:	2602      	movs	r6, #2
 8009dce:	e742      	b.n	8009c56 <_dtoa_r+0x39e>
 8009dd0:	9c07      	ldr	r4, [sp, #28]
 8009dd2:	9704      	str	r7, [sp, #16]
 8009dd4:	e761      	b.n	8009c9a <_dtoa_r+0x3e2>
 8009dd6:	4b27      	ldr	r3, [pc, #156]	@ (8009e74 <_dtoa_r+0x5bc>)
 8009dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009de2:	4454      	add	r4, sl
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d053      	beq.n	8009e90 <_dtoa_r+0x5d8>
 8009de8:	4928      	ldr	r1, [pc, #160]	@ (8009e8c <_dtoa_r+0x5d4>)
 8009dea:	2000      	movs	r0, #0
 8009dec:	f7f6 fd4e 	bl	800088c <__aeabi_ddiv>
 8009df0:	4633      	mov	r3, r6
 8009df2:	462a      	mov	r2, r5
 8009df4:	f7f6 fa68 	bl	80002c8 <__aeabi_dsub>
 8009df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dfc:	4656      	mov	r6, sl
 8009dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e02:	f7f6 fec9 	bl	8000b98 <__aeabi_d2iz>
 8009e06:	4605      	mov	r5, r0
 8009e08:	f7f6 fbac 	bl	8000564 <__aeabi_i2d>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e14:	f7f6 fa58 	bl	80002c8 <__aeabi_dsub>
 8009e18:	3530      	adds	r5, #48	@ 0x30
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e22:	f806 5b01 	strb.w	r5, [r6], #1
 8009e26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e2a:	f7f6 fe77 	bl	8000b1c <__aeabi_dcmplt>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d171      	bne.n	8009f16 <_dtoa_r+0x65e>
 8009e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e36:	4911      	ldr	r1, [pc, #68]	@ (8009e7c <_dtoa_r+0x5c4>)
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f7f6 fa45 	bl	80002c8 <__aeabi_dsub>
 8009e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e42:	f7f6 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f040 8095 	bne.w	8009f76 <_dtoa_r+0x6be>
 8009e4c:	42a6      	cmp	r6, r4
 8009e4e:	f43f af50 	beq.w	8009cf2 <_dtoa_r+0x43a>
 8009e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e56:	4b0a      	ldr	r3, [pc, #40]	@ (8009e80 <_dtoa_r+0x5c8>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f7f6 fbed 	bl	8000638 <__aeabi_dmul>
 8009e5e:	4b08      	ldr	r3, [pc, #32]	@ (8009e80 <_dtoa_r+0x5c8>)
 8009e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e64:	2200      	movs	r2, #0
 8009e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e6a:	f7f6 fbe5 	bl	8000638 <__aeabi_dmul>
 8009e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e72:	e7c4      	b.n	8009dfe <_dtoa_r+0x546>
 8009e74:	080102f8 	.word	0x080102f8
 8009e78:	080102d0 	.word	0x080102d0
 8009e7c:	3ff00000 	.word	0x3ff00000
 8009e80:	40240000 	.word	0x40240000
 8009e84:	401c0000 	.word	0x401c0000
 8009e88:	40140000 	.word	0x40140000
 8009e8c:	3fe00000 	.word	0x3fe00000
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	f7f6 fbd0 	bl	8000638 <__aeabi_dmul>
 8009e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009e9e:	4656      	mov	r6, sl
 8009ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea4:	f7f6 fe78 	bl	8000b98 <__aeabi_d2iz>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	f7f6 fb5b 	bl	8000564 <__aeabi_i2d>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb6:	f7f6 fa07 	bl	80002c8 <__aeabi_dsub>
 8009eba:	3530      	adds	r5, #48	@ 0x30
 8009ebc:	f806 5b01 	strb.w	r5, [r6], #1
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	42a6      	cmp	r6, r4
 8009ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	d124      	bne.n	8009f1a <_dtoa_r+0x662>
 8009ed0:	4bac      	ldr	r3, [pc, #688]	@ (800a184 <_dtoa_r+0x8cc>)
 8009ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ed6:	f7f6 f9f9 	bl	80002cc <__adddf3>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee2:	f7f6 fe39 	bl	8000b58 <__aeabi_dcmpgt>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d145      	bne.n	8009f76 <_dtoa_r+0x6be>
 8009eea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009eee:	49a5      	ldr	r1, [pc, #660]	@ (800a184 <_dtoa_r+0x8cc>)
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	f7f6 f9e9 	bl	80002c8 <__aeabi_dsub>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efe:	f7f6 fe0d 	bl	8000b1c <__aeabi_dcmplt>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	f43f aef5 	beq.w	8009cf2 <_dtoa_r+0x43a>
 8009f08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f0a:	1e73      	subs	r3, r6, #1
 8009f0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f12:	2b30      	cmp	r3, #48	@ 0x30
 8009f14:	d0f8      	beq.n	8009f08 <_dtoa_r+0x650>
 8009f16:	9f04      	ldr	r7, [sp, #16]
 8009f18:	e73e      	b.n	8009d98 <_dtoa_r+0x4e0>
 8009f1a:	4b9b      	ldr	r3, [pc, #620]	@ (800a188 <_dtoa_r+0x8d0>)
 8009f1c:	f7f6 fb8c 	bl	8000638 <__aeabi_dmul>
 8009f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f24:	e7bc      	b.n	8009ea0 <_dtoa_r+0x5e8>
 8009f26:	d10c      	bne.n	8009f42 <_dtoa_r+0x68a>
 8009f28:	4b98      	ldr	r3, [pc, #608]	@ (800a18c <_dtoa_r+0x8d4>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f30:	f7f6 fb82 	bl	8000638 <__aeabi_dmul>
 8009f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f38:	f7f6 fe04 	bl	8000b44 <__aeabi_dcmpge>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f000 8157 	beq.w	800a1f0 <_dtoa_r+0x938>
 8009f42:	2400      	movs	r4, #0
 8009f44:	4625      	mov	r5, r4
 8009f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f48:	43db      	mvns	r3, r3
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	4656      	mov	r6, sl
 8009f4e:	2700      	movs	r7, #0
 8009f50:	4621      	mov	r1, r4
 8009f52:	4658      	mov	r0, fp
 8009f54:	f000 fafe 	bl	800a554 <_Bfree>
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	d0dc      	beq.n	8009f16 <_dtoa_r+0x65e>
 8009f5c:	b12f      	cbz	r7, 8009f6a <_dtoa_r+0x6b2>
 8009f5e:	42af      	cmp	r7, r5
 8009f60:	d003      	beq.n	8009f6a <_dtoa_r+0x6b2>
 8009f62:	4639      	mov	r1, r7
 8009f64:	4658      	mov	r0, fp
 8009f66:	f000 faf5 	bl	800a554 <_Bfree>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f000 faf1 	bl	800a554 <_Bfree>
 8009f72:	e7d0      	b.n	8009f16 <_dtoa_r+0x65e>
 8009f74:	9704      	str	r7, [sp, #16]
 8009f76:	4633      	mov	r3, r6
 8009f78:	461e      	mov	r6, r3
 8009f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7e:	2a39      	cmp	r2, #57	@ 0x39
 8009f80:	d107      	bne.n	8009f92 <_dtoa_r+0x6da>
 8009f82:	459a      	cmp	sl, r3
 8009f84:	d1f8      	bne.n	8009f78 <_dtoa_r+0x6c0>
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	3201      	adds	r2, #1
 8009f8a:	9204      	str	r2, [sp, #16]
 8009f8c:	2230      	movs	r2, #48	@ 0x30
 8009f8e:	f88a 2000 	strb.w	r2, [sl]
 8009f92:	781a      	ldrb	r2, [r3, #0]
 8009f94:	3201      	adds	r2, #1
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e7bd      	b.n	8009f16 <_dtoa_r+0x65e>
 8009f9a:	4b7b      	ldr	r3, [pc, #492]	@ (800a188 <_dtoa_r+0x8d0>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f7f6 fb4b 	bl	8000638 <__aeabi_dmul>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	460d      	mov	r5, r1
 8009faa:	f7f6 fdad 	bl	8000b08 <__aeabi_dcmpeq>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f aebb 	beq.w	8009d2a <_dtoa_r+0x472>
 8009fb4:	e6f0      	b.n	8009d98 <_dtoa_r+0x4e0>
 8009fb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	f000 80db 	beq.w	800a174 <_dtoa_r+0x8bc>
 8009fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc0:	2a01      	cmp	r2, #1
 8009fc2:	f300 80bf 	bgt.w	800a144 <_dtoa_r+0x88c>
 8009fc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	f000 80b7 	beq.w	800a13c <_dtoa_r+0x884>
 8009fce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fd4:	4646      	mov	r6, r8
 8009fd6:	9a08      	ldr	r2, [sp, #32]
 8009fd8:	2101      	movs	r1, #1
 8009fda:	441a      	add	r2, r3
 8009fdc:	4658      	mov	r0, fp
 8009fde:	4498      	add	r8, r3
 8009fe0:	9208      	str	r2, [sp, #32]
 8009fe2:	f000 fb6b 	bl	800a6bc <__i2b>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b15e      	cbz	r6, 800a002 <_dtoa_r+0x74a>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd08      	ble.n	800a002 <_dtoa_r+0x74a>
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	9a08      	ldr	r2, [sp, #32]
 8009ff4:	bfa8      	it	ge
 8009ff6:	4633      	movge	r3, r6
 8009ff8:	eba8 0803 	sub.w	r8, r8, r3
 8009ffc:	1af6      	subs	r6, r6, r3
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	9308      	str	r3, [sp, #32]
 800a002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a004:	b1f3      	cbz	r3, 800a044 <_dtoa_r+0x78c>
 800a006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80b7 	beq.w	800a17c <_dtoa_r+0x8c4>
 800a00e:	b18c      	cbz	r4, 800a034 <_dtoa_r+0x77c>
 800a010:	4629      	mov	r1, r5
 800a012:	4622      	mov	r2, r4
 800a014:	4658      	mov	r0, fp
 800a016:	f000 fc11 	bl	800a83c <__pow5mult>
 800a01a:	464a      	mov	r2, r9
 800a01c:	4601      	mov	r1, r0
 800a01e:	4605      	mov	r5, r0
 800a020:	4658      	mov	r0, fp
 800a022:	f000 fb61 	bl	800a6e8 <__multiply>
 800a026:	4649      	mov	r1, r9
 800a028:	9004      	str	r0, [sp, #16]
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 fa92 	bl	800a554 <_Bfree>
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	4699      	mov	r9, r3
 800a034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a036:	1b1a      	subs	r2, r3, r4
 800a038:	d004      	beq.n	800a044 <_dtoa_r+0x78c>
 800a03a:	4649      	mov	r1, r9
 800a03c:	4658      	mov	r0, fp
 800a03e:	f000 fbfd 	bl	800a83c <__pow5mult>
 800a042:	4681      	mov	r9, r0
 800a044:	2101      	movs	r1, #1
 800a046:	4658      	mov	r0, fp
 800a048:	f000 fb38 	bl	800a6bc <__i2b>
 800a04c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a04e:	4604      	mov	r4, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 81cf 	beq.w	800a3f4 <_dtoa_r+0xb3c>
 800a056:	461a      	mov	r2, r3
 800a058:	4601      	mov	r1, r0
 800a05a:	4658      	mov	r0, fp
 800a05c:	f000 fbee 	bl	800a83c <__pow5mult>
 800a060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a062:	2b01      	cmp	r3, #1
 800a064:	4604      	mov	r4, r0
 800a066:	f300 8095 	bgt.w	800a194 <_dtoa_r+0x8dc>
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f040 8087 	bne.w	800a180 <_dtoa_r+0x8c8>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f040 8089 	bne.w	800a190 <_dtoa_r+0x8d8>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a084:	0d1b      	lsrs	r3, r3, #20
 800a086:	051b      	lsls	r3, r3, #20
 800a088:	b12b      	cbz	r3, 800a096 <_dtoa_r+0x7de>
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	3301      	adds	r3, #1
 800a08e:	9308      	str	r3, [sp, #32]
 800a090:	f108 0801 	add.w	r8, r8, #1
 800a094:	2301      	movs	r3, #1
 800a096:	930a      	str	r3, [sp, #40]	@ 0x28
 800a098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 81b0 	beq.w	800a400 <_dtoa_r+0xb48>
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0a6:	6918      	ldr	r0, [r3, #16]
 800a0a8:	f000 fabc 	bl	800a624 <__hi0bits>
 800a0ac:	f1c0 0020 	rsb	r0, r0, #32
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	4418      	add	r0, r3
 800a0b4:	f010 001f 	ands.w	r0, r0, #31
 800a0b8:	d077      	beq.n	800a1aa <_dtoa_r+0x8f2>
 800a0ba:	f1c0 0320 	rsb	r3, r0, #32
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	dd6b      	ble.n	800a19a <_dtoa_r+0x8e2>
 800a0c2:	9b08      	ldr	r3, [sp, #32]
 800a0c4:	f1c0 001c 	rsb	r0, r0, #28
 800a0c8:	4403      	add	r3, r0
 800a0ca:	4480      	add	r8, r0
 800a0cc:	4406      	add	r6, r0
 800a0ce:	9308      	str	r3, [sp, #32]
 800a0d0:	f1b8 0f00 	cmp.w	r8, #0
 800a0d4:	dd05      	ble.n	800a0e2 <_dtoa_r+0x82a>
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4642      	mov	r2, r8
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f000 fc08 	bl	800a8f0 <__lshift>
 800a0e0:	4681      	mov	r9, r0
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd05      	ble.n	800a0f4 <_dtoa_r+0x83c>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4658      	mov	r0, fp
 800a0ee:	f000 fbff 	bl	800a8f0 <__lshift>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d059      	beq.n	800a1ae <_dtoa_r+0x8f6>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4648      	mov	r0, r9
 800a0fe:	f000 fc63 	bl	800a9c8 <__mcmp>
 800a102:	2800      	cmp	r0, #0
 800a104:	da53      	bge.n	800a1ae <_dtoa_r+0x8f6>
 800a106:	1e7b      	subs	r3, r7, #1
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	4649      	mov	r1, r9
 800a10c:	2300      	movs	r3, #0
 800a10e:	220a      	movs	r2, #10
 800a110:	4658      	mov	r0, fp
 800a112:	f000 fa41 	bl	800a598 <__multadd>
 800a116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a118:	4681      	mov	r9, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8172 	beq.w	800a404 <_dtoa_r+0xb4c>
 800a120:	2300      	movs	r3, #0
 800a122:	4629      	mov	r1, r5
 800a124:	220a      	movs	r2, #10
 800a126:	4658      	mov	r0, fp
 800a128:	f000 fa36 	bl	800a598 <__multadd>
 800a12c:	9b00      	ldr	r3, [sp, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	4605      	mov	r5, r0
 800a132:	dc67      	bgt.n	800a204 <_dtoa_r+0x94c>
 800a134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a136:	2b02      	cmp	r3, #2
 800a138:	dc41      	bgt.n	800a1be <_dtoa_r+0x906>
 800a13a:	e063      	b.n	800a204 <_dtoa_r+0x94c>
 800a13c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a13e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a142:	e746      	b.n	8009fd2 <_dtoa_r+0x71a>
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	1e5c      	subs	r4, r3, #1
 800a148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	bfbf      	itttt	lt
 800a14e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a150:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a152:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a154:	1ae3      	sublt	r3, r4, r3
 800a156:	bfb4      	ite	lt
 800a158:	18d2      	addlt	r2, r2, r3
 800a15a:	1b1c      	subge	r4, r3, r4
 800a15c:	9b07      	ldr	r3, [sp, #28]
 800a15e:	bfbc      	itt	lt
 800a160:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a162:	2400      	movlt	r4, #0
 800a164:	2b00      	cmp	r3, #0
 800a166:	bfb5      	itete	lt
 800a168:	eba8 0603 	sublt.w	r6, r8, r3
 800a16c:	9b07      	ldrge	r3, [sp, #28]
 800a16e:	2300      	movlt	r3, #0
 800a170:	4646      	movge	r6, r8
 800a172:	e730      	b.n	8009fd6 <_dtoa_r+0x71e>
 800a174:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a176:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a178:	4646      	mov	r6, r8
 800a17a:	e735      	b.n	8009fe8 <_dtoa_r+0x730>
 800a17c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a17e:	e75c      	b.n	800a03a <_dtoa_r+0x782>
 800a180:	2300      	movs	r3, #0
 800a182:	e788      	b.n	800a096 <_dtoa_r+0x7de>
 800a184:	3fe00000 	.word	0x3fe00000
 800a188:	40240000 	.word	0x40240000
 800a18c:	40140000 	.word	0x40140000
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	e780      	b.n	800a096 <_dtoa_r+0x7de>
 800a194:	2300      	movs	r3, #0
 800a196:	930a      	str	r3, [sp, #40]	@ 0x28
 800a198:	e782      	b.n	800a0a0 <_dtoa_r+0x7e8>
 800a19a:	d099      	beq.n	800a0d0 <_dtoa_r+0x818>
 800a19c:	9a08      	ldr	r2, [sp, #32]
 800a19e:	331c      	adds	r3, #28
 800a1a0:	441a      	add	r2, r3
 800a1a2:	4498      	add	r8, r3
 800a1a4:	441e      	add	r6, r3
 800a1a6:	9208      	str	r2, [sp, #32]
 800a1a8:	e792      	b.n	800a0d0 <_dtoa_r+0x818>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	e7f6      	b.n	800a19c <_dtoa_r+0x8e4>
 800a1ae:	9b07      	ldr	r3, [sp, #28]
 800a1b0:	9704      	str	r7, [sp, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dc20      	bgt.n	800a1f8 <_dtoa_r+0x940>
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	dd1e      	ble.n	800a1fc <_dtoa_r+0x944>
 800a1be:	9b00      	ldr	r3, [sp, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f47f aec0 	bne.w	8009f46 <_dtoa_r+0x68e>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	2205      	movs	r2, #5
 800a1ca:	4658      	mov	r0, fp
 800a1cc:	f000 f9e4 	bl	800a598 <__multadd>
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4648      	mov	r0, r9
 800a1d6:	f000 fbf7 	bl	800a9c8 <__mcmp>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	f77f aeb3 	ble.w	8009f46 <_dtoa_r+0x68e>
 800a1e0:	4656      	mov	r6, sl
 800a1e2:	2331      	movs	r3, #49	@ 0x31
 800a1e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	e6ae      	b.n	8009f4e <_dtoa_r+0x696>
 800a1f0:	9c07      	ldr	r4, [sp, #28]
 800a1f2:	9704      	str	r7, [sp, #16]
 800a1f4:	4625      	mov	r5, r4
 800a1f6:	e7f3      	b.n	800a1e0 <_dtoa_r+0x928>
 800a1f8:	9b07      	ldr	r3, [sp, #28]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 8104 	beq.w	800a40c <_dtoa_r+0xb54>
 800a204:	2e00      	cmp	r6, #0
 800a206:	dd05      	ble.n	800a214 <_dtoa_r+0x95c>
 800a208:	4629      	mov	r1, r5
 800a20a:	4632      	mov	r2, r6
 800a20c:	4658      	mov	r0, fp
 800a20e:	f000 fb6f 	bl	800a8f0 <__lshift>
 800a212:	4605      	mov	r5, r0
 800a214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d05a      	beq.n	800a2d0 <_dtoa_r+0xa18>
 800a21a:	6869      	ldr	r1, [r5, #4]
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 f959 	bl	800a4d4 <_Balloc>
 800a222:	4606      	mov	r6, r0
 800a224:	b928      	cbnz	r0, 800a232 <_dtoa_r+0x97a>
 800a226:	4b84      	ldr	r3, [pc, #528]	@ (800a438 <_dtoa_r+0xb80>)
 800a228:	4602      	mov	r2, r0
 800a22a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a22e:	f7ff bb5a 	b.w	80098e6 <_dtoa_r+0x2e>
 800a232:	692a      	ldr	r2, [r5, #16]
 800a234:	3202      	adds	r2, #2
 800a236:	0092      	lsls	r2, r2, #2
 800a238:	f105 010c 	add.w	r1, r5, #12
 800a23c:	300c      	adds	r0, #12
 800a23e:	f7ff fa84 	bl	800974a <memcpy>
 800a242:	2201      	movs	r2, #1
 800a244:	4631      	mov	r1, r6
 800a246:	4658      	mov	r0, fp
 800a248:	f000 fb52 	bl	800a8f0 <__lshift>
 800a24c:	f10a 0301 	add.w	r3, sl, #1
 800a250:	9307      	str	r3, [sp, #28]
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	4453      	add	r3, sl
 800a256:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	462f      	mov	r7, r5
 800a260:	930a      	str	r3, [sp, #40]	@ 0x28
 800a262:	4605      	mov	r5, r0
 800a264:	9b07      	ldr	r3, [sp, #28]
 800a266:	4621      	mov	r1, r4
 800a268:	3b01      	subs	r3, #1
 800a26a:	4648      	mov	r0, r9
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	f7ff fa99 	bl	80097a4 <quorem>
 800a272:	4639      	mov	r1, r7
 800a274:	9002      	str	r0, [sp, #8]
 800a276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a27a:	4648      	mov	r0, r9
 800a27c:	f000 fba4 	bl	800a9c8 <__mcmp>
 800a280:	462a      	mov	r2, r5
 800a282:	9008      	str	r0, [sp, #32]
 800a284:	4621      	mov	r1, r4
 800a286:	4658      	mov	r0, fp
 800a288:	f000 fbba 	bl	800aa00 <__mdiff>
 800a28c:	68c2      	ldr	r2, [r0, #12]
 800a28e:	4606      	mov	r6, r0
 800a290:	bb02      	cbnz	r2, 800a2d4 <_dtoa_r+0xa1c>
 800a292:	4601      	mov	r1, r0
 800a294:	4648      	mov	r0, r9
 800a296:	f000 fb97 	bl	800a9c8 <__mcmp>
 800a29a:	4602      	mov	r2, r0
 800a29c:	4631      	mov	r1, r6
 800a29e:	4658      	mov	r0, fp
 800a2a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2a2:	f000 f957 	bl	800a554 <_Bfree>
 800a2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2aa:	9e07      	ldr	r6, [sp, #28]
 800a2ac:	ea43 0102 	orr.w	r1, r3, r2
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b2:	4319      	orrs	r1, r3
 800a2b4:	d110      	bne.n	800a2d8 <_dtoa_r+0xa20>
 800a2b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2ba:	d029      	beq.n	800a310 <_dtoa_r+0xa58>
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd02      	ble.n	800a2c8 <_dtoa_r+0xa10>
 800a2c2:	9b02      	ldr	r3, [sp, #8]
 800a2c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a2c8:	9b00      	ldr	r3, [sp, #0]
 800a2ca:	f883 8000 	strb.w	r8, [r3]
 800a2ce:	e63f      	b.n	8009f50 <_dtoa_r+0x698>
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e7bb      	b.n	800a24c <_dtoa_r+0x994>
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	e7e1      	b.n	800a29c <_dtoa_r+0x9e4>
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	db04      	blt.n	800a2e8 <_dtoa_r+0xa30>
 800a2de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	d120      	bne.n	800a32a <_dtoa_r+0xa72>
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	dded      	ble.n	800a2c8 <_dtoa_r+0xa10>
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	4658      	mov	r0, fp
 800a2f2:	f000 fafd 	bl	800a8f0 <__lshift>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4681      	mov	r9, r0
 800a2fa:	f000 fb65 	bl	800a9c8 <__mcmp>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	dc03      	bgt.n	800a30a <_dtoa_r+0xa52>
 800a302:	d1e1      	bne.n	800a2c8 <_dtoa_r+0xa10>
 800a304:	f018 0f01 	tst.w	r8, #1
 800a308:	d0de      	beq.n	800a2c8 <_dtoa_r+0xa10>
 800a30a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a30e:	d1d8      	bne.n	800a2c2 <_dtoa_r+0xa0a>
 800a310:	9a00      	ldr	r2, [sp, #0]
 800a312:	2339      	movs	r3, #57	@ 0x39
 800a314:	7013      	strb	r3, [r2, #0]
 800a316:	4633      	mov	r3, r6
 800a318:	461e      	mov	r6, r3
 800a31a:	3b01      	subs	r3, #1
 800a31c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a320:	2a39      	cmp	r2, #57	@ 0x39
 800a322:	d052      	beq.n	800a3ca <_dtoa_r+0xb12>
 800a324:	3201      	adds	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e612      	b.n	8009f50 <_dtoa_r+0x698>
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	dd07      	ble.n	800a33e <_dtoa_r+0xa86>
 800a32e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a332:	d0ed      	beq.n	800a310 <_dtoa_r+0xa58>
 800a334:	9a00      	ldr	r2, [sp, #0]
 800a336:	f108 0301 	add.w	r3, r8, #1
 800a33a:	7013      	strb	r3, [r2, #0]
 800a33c:	e608      	b.n	8009f50 <_dtoa_r+0x698>
 800a33e:	9b07      	ldr	r3, [sp, #28]
 800a340:	9a07      	ldr	r2, [sp, #28]
 800a342:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a348:	4293      	cmp	r3, r2
 800a34a:	d028      	beq.n	800a39e <_dtoa_r+0xae6>
 800a34c:	4649      	mov	r1, r9
 800a34e:	2300      	movs	r3, #0
 800a350:	220a      	movs	r2, #10
 800a352:	4658      	mov	r0, fp
 800a354:	f000 f920 	bl	800a598 <__multadd>
 800a358:	42af      	cmp	r7, r5
 800a35a:	4681      	mov	r9, r0
 800a35c:	f04f 0300 	mov.w	r3, #0
 800a360:	f04f 020a 	mov.w	r2, #10
 800a364:	4639      	mov	r1, r7
 800a366:	4658      	mov	r0, fp
 800a368:	d107      	bne.n	800a37a <_dtoa_r+0xac2>
 800a36a:	f000 f915 	bl	800a598 <__multadd>
 800a36e:	4607      	mov	r7, r0
 800a370:	4605      	mov	r5, r0
 800a372:	9b07      	ldr	r3, [sp, #28]
 800a374:	3301      	adds	r3, #1
 800a376:	9307      	str	r3, [sp, #28]
 800a378:	e774      	b.n	800a264 <_dtoa_r+0x9ac>
 800a37a:	f000 f90d 	bl	800a598 <__multadd>
 800a37e:	4629      	mov	r1, r5
 800a380:	4607      	mov	r7, r0
 800a382:	2300      	movs	r3, #0
 800a384:	220a      	movs	r2, #10
 800a386:	4658      	mov	r0, fp
 800a388:	f000 f906 	bl	800a598 <__multadd>
 800a38c:	4605      	mov	r5, r0
 800a38e:	e7f0      	b.n	800a372 <_dtoa_r+0xaba>
 800a390:	9b00      	ldr	r3, [sp, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfcc      	ite	gt
 800a396:	461e      	movgt	r6, r3
 800a398:	2601      	movle	r6, #1
 800a39a:	4456      	add	r6, sl
 800a39c:	2700      	movs	r7, #0
 800a39e:	4649      	mov	r1, r9
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4658      	mov	r0, fp
 800a3a4:	f000 faa4 	bl	800a8f0 <__lshift>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4681      	mov	r9, r0
 800a3ac:	f000 fb0c 	bl	800a9c8 <__mcmp>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dcb0      	bgt.n	800a316 <_dtoa_r+0xa5e>
 800a3b4:	d102      	bne.n	800a3bc <_dtoa_r+0xb04>
 800a3b6:	f018 0f01 	tst.w	r8, #1
 800a3ba:	d1ac      	bne.n	800a316 <_dtoa_r+0xa5e>
 800a3bc:	4633      	mov	r3, r6
 800a3be:	461e      	mov	r6, r3
 800a3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c4:	2a30      	cmp	r2, #48	@ 0x30
 800a3c6:	d0fa      	beq.n	800a3be <_dtoa_r+0xb06>
 800a3c8:	e5c2      	b.n	8009f50 <_dtoa_r+0x698>
 800a3ca:	459a      	cmp	sl, r3
 800a3cc:	d1a4      	bne.n	800a318 <_dtoa_r+0xa60>
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	9304      	str	r3, [sp, #16]
 800a3d4:	2331      	movs	r3, #49	@ 0x31
 800a3d6:	f88a 3000 	strb.w	r3, [sl]
 800a3da:	e5b9      	b.n	8009f50 <_dtoa_r+0x698>
 800a3dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a43c <_dtoa_r+0xb84>
 800a3e2:	b11b      	cbz	r3, 800a3ec <_dtoa_r+0xb34>
 800a3e4:	f10a 0308 	add.w	r3, sl, #8
 800a3e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	b019      	add	sp, #100	@ 0x64
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	f77f ae37 	ble.w	800a06a <_dtoa_r+0x7b2>
 800a3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a400:	2001      	movs	r0, #1
 800a402:	e655      	b.n	800a0b0 <_dtoa_r+0x7f8>
 800a404:	9b00      	ldr	r3, [sp, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f77f aed6 	ble.w	800a1b8 <_dtoa_r+0x900>
 800a40c:	4656      	mov	r6, sl
 800a40e:	4621      	mov	r1, r4
 800a410:	4648      	mov	r0, r9
 800a412:	f7ff f9c7 	bl	80097a4 <quorem>
 800a416:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a41a:	f806 8b01 	strb.w	r8, [r6], #1
 800a41e:	9b00      	ldr	r3, [sp, #0]
 800a420:	eba6 020a 	sub.w	r2, r6, sl
 800a424:	4293      	cmp	r3, r2
 800a426:	ddb3      	ble.n	800a390 <_dtoa_r+0xad8>
 800a428:	4649      	mov	r1, r9
 800a42a:	2300      	movs	r3, #0
 800a42c:	220a      	movs	r2, #10
 800a42e:	4658      	mov	r0, fp
 800a430:	f000 f8b2 	bl	800a598 <__multadd>
 800a434:	4681      	mov	r9, r0
 800a436:	e7ea      	b.n	800a40e <_dtoa_r+0xb56>
 800a438:	0801025a 	.word	0x0801025a
 800a43c:	080101f5 	.word	0x080101f5

0800a440 <_free_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4605      	mov	r5, r0
 800a444:	2900      	cmp	r1, #0
 800a446:	d041      	beq.n	800a4cc <_free_r+0x8c>
 800a448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44c:	1f0c      	subs	r4, r1, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfb8      	it	lt
 800a452:	18e4      	addlt	r4, r4, r3
 800a454:	f7fe f990 	bl	8008778 <__malloc_lock>
 800a458:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d0 <_free_r+0x90>)
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	b933      	cbnz	r3, 800a46c <_free_r+0x2c>
 800a45e:	6063      	str	r3, [r4, #4]
 800a460:	6014      	str	r4, [r2, #0]
 800a462:	4628      	mov	r0, r5
 800a464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a468:	f7fe b98c 	b.w	8008784 <__malloc_unlock>
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d908      	bls.n	800a482 <_free_r+0x42>
 800a470:	6820      	ldr	r0, [r4, #0]
 800a472:	1821      	adds	r1, r4, r0
 800a474:	428b      	cmp	r3, r1
 800a476:	bf01      	itttt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	1809      	addeq	r1, r1, r0
 800a47e:	6021      	streq	r1, [r4, #0]
 800a480:	e7ed      	b.n	800a45e <_free_r+0x1e>
 800a482:	461a      	mov	r2, r3
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	b10b      	cbz	r3, 800a48c <_free_r+0x4c>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d9fa      	bls.n	800a482 <_free_r+0x42>
 800a48c:	6811      	ldr	r1, [r2, #0]
 800a48e:	1850      	adds	r0, r2, r1
 800a490:	42a0      	cmp	r0, r4
 800a492:	d10b      	bne.n	800a4ac <_free_r+0x6c>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	4401      	add	r1, r0
 800a498:	1850      	adds	r0, r2, r1
 800a49a:	4283      	cmp	r3, r0
 800a49c:	6011      	str	r1, [r2, #0]
 800a49e:	d1e0      	bne.n	800a462 <_free_r+0x22>
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	6053      	str	r3, [r2, #4]
 800a4a6:	4408      	add	r0, r1
 800a4a8:	6010      	str	r0, [r2, #0]
 800a4aa:	e7da      	b.n	800a462 <_free_r+0x22>
 800a4ac:	d902      	bls.n	800a4b4 <_free_r+0x74>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	e7d6      	b.n	800a462 <_free_r+0x22>
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	1821      	adds	r1, r4, r0
 800a4b8:	428b      	cmp	r3, r1
 800a4ba:	bf04      	itt	eq
 800a4bc:	6819      	ldreq	r1, [r3, #0]
 800a4be:	685b      	ldreq	r3, [r3, #4]
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	bf04      	itt	eq
 800a4c4:	1809      	addeq	r1, r1, r0
 800a4c6:	6021      	streq	r1, [r4, #0]
 800a4c8:	6054      	str	r4, [r2, #4]
 800a4ca:	e7ca      	b.n	800a462 <_free_r+0x22>
 800a4cc:	bd38      	pop	{r3, r4, r5, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200011a8 	.word	0x200011a8

0800a4d4 <_Balloc>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	69c6      	ldr	r6, [r0, #28]
 800a4d8:	4604      	mov	r4, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	b976      	cbnz	r6, 800a4fc <_Balloc+0x28>
 800a4de:	2010      	movs	r0, #16
 800a4e0:	f7fa fb18 	bl	8004b14 <__wrap_malloc>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	61e0      	str	r0, [r4, #28]
 800a4e8:	b920      	cbnz	r0, 800a4f4 <_Balloc+0x20>
 800a4ea:	4b18      	ldr	r3, [pc, #96]	@ (800a54c <_Balloc+0x78>)
 800a4ec:	4818      	ldr	r0, [pc, #96]	@ (800a550 <_Balloc+0x7c>)
 800a4ee:	216b      	movs	r1, #107	@ 0x6b
 800a4f0:	f7ff f93a 	bl	8009768 <__assert_func>
 800a4f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4f8:	6006      	str	r6, [r0, #0]
 800a4fa:	60c6      	str	r6, [r0, #12]
 800a4fc:	69e6      	ldr	r6, [r4, #28]
 800a4fe:	68f3      	ldr	r3, [r6, #12]
 800a500:	b183      	cbz	r3, 800a524 <_Balloc+0x50>
 800a502:	69e3      	ldr	r3, [r4, #28]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a50a:	b9b8      	cbnz	r0, 800a53c <_Balloc+0x68>
 800a50c:	2101      	movs	r1, #1
 800a50e:	fa01 f605 	lsl.w	r6, r1, r5
 800a512:	1d72      	adds	r2, r6, #5
 800a514:	0092      	lsls	r2, r2, #2
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fd3d 	bl	800af96 <_calloc_r>
 800a51c:	b160      	cbz	r0, 800a538 <_Balloc+0x64>
 800a51e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a522:	e00e      	b.n	800a542 <_Balloc+0x6e>
 800a524:	2221      	movs	r2, #33	@ 0x21
 800a526:	2104      	movs	r1, #4
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fd34 	bl	800af96 <_calloc_r>
 800a52e:	69e3      	ldr	r3, [r4, #28]
 800a530:	60f0      	str	r0, [r6, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e4      	bne.n	800a502 <_Balloc+0x2e>
 800a538:	2000      	movs	r0, #0
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	6802      	ldr	r2, [r0, #0]
 800a53e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a542:	2300      	movs	r3, #0
 800a544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a548:	e7f7      	b.n	800a53a <_Balloc+0x66>
 800a54a:	bf00      	nop
 800a54c:	08010118 	.word	0x08010118
 800a550:	0801026b 	.word	0x0801026b

0800a554 <_Bfree>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	69c6      	ldr	r6, [r0, #28]
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b976      	cbnz	r6, 800a57c <_Bfree+0x28>
 800a55e:	2010      	movs	r0, #16
 800a560:	f7fa fad8 	bl	8004b14 <__wrap_malloc>
 800a564:	4602      	mov	r2, r0
 800a566:	61e8      	str	r0, [r5, #28]
 800a568:	b920      	cbnz	r0, 800a574 <_Bfree+0x20>
 800a56a:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <_Bfree+0x3c>)
 800a56c:	4809      	ldr	r0, [pc, #36]	@ (800a594 <_Bfree+0x40>)
 800a56e:	218f      	movs	r1, #143	@ 0x8f
 800a570:	f7ff f8fa 	bl	8009768 <__assert_func>
 800a574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a578:	6006      	str	r6, [r0, #0]
 800a57a:	60c6      	str	r6, [r0, #12]
 800a57c:	b13c      	cbz	r4, 800a58e <_Bfree+0x3a>
 800a57e:	69eb      	ldr	r3, [r5, #28]
 800a580:	6862      	ldr	r2, [r4, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a588:	6021      	str	r1, [r4, #0]
 800a58a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	08010118 	.word	0x08010118
 800a594:	0801026b 	.word	0x0801026b

0800a598 <__multadd>:
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	690d      	ldr	r5, [r1, #16]
 800a59e:	4607      	mov	r7, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	461e      	mov	r6, r3
 800a5a4:	f101 0c14 	add.w	ip, r1, #20
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a5ae:	b299      	uxth	r1, r3
 800a5b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a5b4:	0c1e      	lsrs	r6, r3, #16
 800a5b6:	0c0b      	lsrs	r3, r1, #16
 800a5b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a5bc:	b289      	uxth	r1, r1
 800a5be:	3001      	adds	r0, #1
 800a5c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5c4:	4285      	cmp	r5, r0
 800a5c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ce:	dcec      	bgt.n	800a5aa <__multadd+0x12>
 800a5d0:	b30e      	cbz	r6, 800a616 <__multadd+0x7e>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	dc19      	bgt.n	800a60c <__multadd+0x74>
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	3101      	adds	r1, #1
 800a5de:	f7ff ff79 	bl	800a4d4 <_Balloc>
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	b928      	cbnz	r0, 800a5f2 <__multadd+0x5a>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a61c <__multadd+0x84>)
 800a5ea:	480d      	ldr	r0, [pc, #52]	@ (800a620 <__multadd+0x88>)
 800a5ec:	21ba      	movs	r1, #186	@ 0xba
 800a5ee:	f7ff f8bb 	bl	8009768 <__assert_func>
 800a5f2:	6922      	ldr	r2, [r4, #16]
 800a5f4:	3202      	adds	r2, #2
 800a5f6:	f104 010c 	add.w	r1, r4, #12
 800a5fa:	0092      	lsls	r2, r2, #2
 800a5fc:	300c      	adds	r0, #12
 800a5fe:	f7ff f8a4 	bl	800974a <memcpy>
 800a602:	4621      	mov	r1, r4
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff ffa5 	bl	800a554 <_Bfree>
 800a60a:	4644      	mov	r4, r8
 800a60c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a610:	3501      	adds	r5, #1
 800a612:	615e      	str	r6, [r3, #20]
 800a614:	6125      	str	r5, [r4, #16]
 800a616:	4620      	mov	r0, r4
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	0801025a 	.word	0x0801025a
 800a620:	0801026b 	.word	0x0801026b

0800a624 <__hi0bits>:
 800a624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a628:	4603      	mov	r3, r0
 800a62a:	bf36      	itet	cc
 800a62c:	0403      	lslcc	r3, r0, #16
 800a62e:	2000      	movcs	r0, #0
 800a630:	2010      	movcc	r0, #16
 800a632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a636:	bf3c      	itt	cc
 800a638:	021b      	lslcc	r3, r3, #8
 800a63a:	3008      	addcc	r0, #8
 800a63c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a640:	bf3c      	itt	cc
 800a642:	011b      	lslcc	r3, r3, #4
 800a644:	3004      	addcc	r0, #4
 800a646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64a:	bf3c      	itt	cc
 800a64c:	009b      	lslcc	r3, r3, #2
 800a64e:	3002      	addcc	r0, #2
 800a650:	2b00      	cmp	r3, #0
 800a652:	db05      	blt.n	800a660 <__hi0bits+0x3c>
 800a654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a658:	f100 0001 	add.w	r0, r0, #1
 800a65c:	bf08      	it	eq
 800a65e:	2020      	moveq	r0, #32
 800a660:	4770      	bx	lr

0800a662 <__lo0bits>:
 800a662:	6803      	ldr	r3, [r0, #0]
 800a664:	4602      	mov	r2, r0
 800a666:	f013 0007 	ands.w	r0, r3, #7
 800a66a:	d00b      	beq.n	800a684 <__lo0bits+0x22>
 800a66c:	07d9      	lsls	r1, r3, #31
 800a66e:	d421      	bmi.n	800a6b4 <__lo0bits+0x52>
 800a670:	0798      	lsls	r0, r3, #30
 800a672:	bf49      	itett	mi
 800a674:	085b      	lsrmi	r3, r3, #1
 800a676:	089b      	lsrpl	r3, r3, #2
 800a678:	2001      	movmi	r0, #1
 800a67a:	6013      	strmi	r3, [r2, #0]
 800a67c:	bf5c      	itt	pl
 800a67e:	6013      	strpl	r3, [r2, #0]
 800a680:	2002      	movpl	r0, #2
 800a682:	4770      	bx	lr
 800a684:	b299      	uxth	r1, r3
 800a686:	b909      	cbnz	r1, 800a68c <__lo0bits+0x2a>
 800a688:	0c1b      	lsrs	r3, r3, #16
 800a68a:	2010      	movs	r0, #16
 800a68c:	b2d9      	uxtb	r1, r3
 800a68e:	b909      	cbnz	r1, 800a694 <__lo0bits+0x32>
 800a690:	3008      	adds	r0, #8
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	0719      	lsls	r1, r3, #28
 800a696:	bf04      	itt	eq
 800a698:	091b      	lsreq	r3, r3, #4
 800a69a:	3004      	addeq	r0, #4
 800a69c:	0799      	lsls	r1, r3, #30
 800a69e:	bf04      	itt	eq
 800a6a0:	089b      	lsreq	r3, r3, #2
 800a6a2:	3002      	addeq	r0, #2
 800a6a4:	07d9      	lsls	r1, r3, #31
 800a6a6:	d403      	bmi.n	800a6b0 <__lo0bits+0x4e>
 800a6a8:	085b      	lsrs	r3, r3, #1
 800a6aa:	f100 0001 	add.w	r0, r0, #1
 800a6ae:	d003      	beq.n	800a6b8 <__lo0bits+0x56>
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	4770      	bx	lr
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	4770      	bx	lr
 800a6b8:	2020      	movs	r0, #32
 800a6ba:	4770      	bx	lr

0800a6bc <__i2b>:
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	460c      	mov	r4, r1
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	f7ff ff07 	bl	800a4d4 <_Balloc>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	b928      	cbnz	r0, 800a6d6 <__i2b+0x1a>
 800a6ca:	4b05      	ldr	r3, [pc, #20]	@ (800a6e0 <__i2b+0x24>)
 800a6cc:	4805      	ldr	r0, [pc, #20]	@ (800a6e4 <__i2b+0x28>)
 800a6ce:	f240 1145 	movw	r1, #325	@ 0x145
 800a6d2:	f7ff f849 	bl	8009768 <__assert_func>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	6144      	str	r4, [r0, #20]
 800a6da:	6103      	str	r3, [r0, #16]
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	0801025a 	.word	0x0801025a
 800a6e4:	0801026b 	.word	0x0801026b

0800a6e8 <__multiply>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	690a      	ldr	r2, [r1, #16]
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	bfa8      	it	ge
 800a6f6:	4623      	movge	r3, r4
 800a6f8:	460f      	mov	r7, r1
 800a6fa:	bfa4      	itt	ge
 800a6fc:	460c      	movge	r4, r1
 800a6fe:	461f      	movge	r7, r3
 800a700:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a704:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a708:	68a3      	ldr	r3, [r4, #8]
 800a70a:	6861      	ldr	r1, [r4, #4]
 800a70c:	eb0a 0609 	add.w	r6, sl, r9
 800a710:	42b3      	cmp	r3, r6
 800a712:	b085      	sub	sp, #20
 800a714:	bfb8      	it	lt
 800a716:	3101      	addlt	r1, #1
 800a718:	f7ff fedc 	bl	800a4d4 <_Balloc>
 800a71c:	b930      	cbnz	r0, 800a72c <__multiply+0x44>
 800a71e:	4602      	mov	r2, r0
 800a720:	4b44      	ldr	r3, [pc, #272]	@ (800a834 <__multiply+0x14c>)
 800a722:	4845      	ldr	r0, [pc, #276]	@ (800a838 <__multiply+0x150>)
 800a724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a728:	f7ff f81e 	bl	8009768 <__assert_func>
 800a72c:	f100 0514 	add.w	r5, r0, #20
 800a730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a734:	462b      	mov	r3, r5
 800a736:	2200      	movs	r2, #0
 800a738:	4543      	cmp	r3, r8
 800a73a:	d321      	bcc.n	800a780 <__multiply+0x98>
 800a73c:	f107 0114 	add.w	r1, r7, #20
 800a740:	f104 0214 	add.w	r2, r4, #20
 800a744:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a748:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a74c:	9302      	str	r3, [sp, #8]
 800a74e:	1b13      	subs	r3, r2, r4
 800a750:	3b15      	subs	r3, #21
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	3304      	adds	r3, #4
 800a758:	f104 0715 	add.w	r7, r4, #21
 800a75c:	42ba      	cmp	r2, r7
 800a75e:	bf38      	it	cc
 800a760:	2304      	movcc	r3, #4
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	9103      	str	r1, [sp, #12]
 800a768:	428b      	cmp	r3, r1
 800a76a:	d80c      	bhi.n	800a786 <__multiply+0x9e>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	dd03      	ble.n	800a778 <__multiply+0x90>
 800a770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a774:	2b00      	cmp	r3, #0
 800a776:	d05b      	beq.n	800a830 <__multiply+0x148>
 800a778:	6106      	str	r6, [r0, #16]
 800a77a:	b005      	add	sp, #20
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	f843 2b04 	str.w	r2, [r3], #4
 800a784:	e7d8      	b.n	800a738 <__multiply+0x50>
 800a786:	f8b1 a000 	ldrh.w	sl, [r1]
 800a78a:	f1ba 0f00 	cmp.w	sl, #0
 800a78e:	d024      	beq.n	800a7da <__multiply+0xf2>
 800a790:	f104 0e14 	add.w	lr, r4, #20
 800a794:	46a9      	mov	r9, r5
 800a796:	f04f 0c00 	mov.w	ip, #0
 800a79a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a79e:	f8d9 3000 	ldr.w	r3, [r9]
 800a7a2:	fa1f fb87 	uxth.w	fp, r7
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7b0:	f8d9 7000 	ldr.w	r7, [r9]
 800a7b4:	4463      	add	r3, ip
 800a7b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800a7be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7c8:	4572      	cmp	r2, lr
 800a7ca:	f849 3b04 	str.w	r3, [r9], #4
 800a7ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7d2:	d8e2      	bhi.n	800a79a <__multiply+0xb2>
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	f845 c003 	str.w	ip, [r5, r3]
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a7e0:	3104      	adds	r1, #4
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	d021      	beq.n	800a82c <__multiply+0x144>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	f104 0c14 	add.w	ip, r4, #20
 800a7ee:	46ae      	mov	lr, r5
 800a7f0:	f04f 0a00 	mov.w	sl, #0
 800a7f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a7f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a7fc:	fb09 770b 	mla	r7, r9, fp, r7
 800a800:	4457      	add	r7, sl
 800a802:	b29b      	uxth	r3, r3
 800a804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a808:	f84e 3b04 	str.w	r3, [lr], #4
 800a80c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a814:	f8be 3000 	ldrh.w	r3, [lr]
 800a818:	fb09 330a 	mla	r3, r9, sl, r3
 800a81c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a820:	4562      	cmp	r2, ip
 800a822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a826:	d8e5      	bhi.n	800a7f4 <__multiply+0x10c>
 800a828:	9f01      	ldr	r7, [sp, #4]
 800a82a:	51eb      	str	r3, [r5, r7]
 800a82c:	3504      	adds	r5, #4
 800a82e:	e799      	b.n	800a764 <__multiply+0x7c>
 800a830:	3e01      	subs	r6, #1
 800a832:	e79b      	b.n	800a76c <__multiply+0x84>
 800a834:	0801025a 	.word	0x0801025a
 800a838:	0801026b 	.word	0x0801026b

0800a83c <__pow5mult>:
 800a83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a840:	4615      	mov	r5, r2
 800a842:	f012 0203 	ands.w	r2, r2, #3
 800a846:	4607      	mov	r7, r0
 800a848:	460e      	mov	r6, r1
 800a84a:	d007      	beq.n	800a85c <__pow5mult+0x20>
 800a84c:	4c25      	ldr	r4, [pc, #148]	@ (800a8e4 <__pow5mult+0xa8>)
 800a84e:	3a01      	subs	r2, #1
 800a850:	2300      	movs	r3, #0
 800a852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a856:	f7ff fe9f 	bl	800a598 <__multadd>
 800a85a:	4606      	mov	r6, r0
 800a85c:	10ad      	asrs	r5, r5, #2
 800a85e:	d03d      	beq.n	800a8dc <__pow5mult+0xa0>
 800a860:	69fc      	ldr	r4, [r7, #28]
 800a862:	b97c      	cbnz	r4, 800a884 <__pow5mult+0x48>
 800a864:	2010      	movs	r0, #16
 800a866:	f7fa f955 	bl	8004b14 <__wrap_malloc>
 800a86a:	4602      	mov	r2, r0
 800a86c:	61f8      	str	r0, [r7, #28]
 800a86e:	b928      	cbnz	r0, 800a87c <__pow5mult+0x40>
 800a870:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e8 <__pow5mult+0xac>)
 800a872:	481e      	ldr	r0, [pc, #120]	@ (800a8ec <__pow5mult+0xb0>)
 800a874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a878:	f7fe ff76 	bl	8009768 <__assert_func>
 800a87c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a880:	6004      	str	r4, [r0, #0]
 800a882:	60c4      	str	r4, [r0, #12]
 800a884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a88c:	b94c      	cbnz	r4, 800a8a2 <__pow5mult+0x66>
 800a88e:	f240 2171 	movw	r1, #625	@ 0x271
 800a892:	4638      	mov	r0, r7
 800a894:	f7ff ff12 	bl	800a6bc <__i2b>
 800a898:	2300      	movs	r3, #0
 800a89a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a89e:	4604      	mov	r4, r0
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	f04f 0900 	mov.w	r9, #0
 800a8a6:	07eb      	lsls	r3, r5, #31
 800a8a8:	d50a      	bpl.n	800a8c0 <__pow5mult+0x84>
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f7ff ff1a 	bl	800a6e8 <__multiply>
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4680      	mov	r8, r0
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff fe4b 	bl	800a554 <_Bfree>
 800a8be:	4646      	mov	r6, r8
 800a8c0:	106d      	asrs	r5, r5, #1
 800a8c2:	d00b      	beq.n	800a8dc <__pow5mult+0xa0>
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	b938      	cbnz	r0, 800a8d8 <__pow5mult+0x9c>
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff ff0b 	bl	800a6e8 <__multiply>
 800a8d2:	6020      	str	r0, [r4, #0]
 800a8d4:	f8c0 9000 	str.w	r9, [r0]
 800a8d8:	4604      	mov	r4, r0
 800a8da:	e7e4      	b.n	800a8a6 <__pow5mult+0x6a>
 800a8dc:	4630      	mov	r0, r6
 800a8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	bf00      	nop
 800a8e4:	080102c4 	.word	0x080102c4
 800a8e8:	08010118 	.word	0x08010118
 800a8ec:	0801026b 	.word	0x0801026b

0800a8f0 <__lshift>:
 800a8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	6849      	ldr	r1, [r1, #4]
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8fe:	68a3      	ldr	r3, [r4, #8]
 800a900:	4607      	mov	r7, r0
 800a902:	4691      	mov	r9, r2
 800a904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a908:	f108 0601 	add.w	r6, r8, #1
 800a90c:	42b3      	cmp	r3, r6
 800a90e:	db0b      	blt.n	800a928 <__lshift+0x38>
 800a910:	4638      	mov	r0, r7
 800a912:	f7ff fddf 	bl	800a4d4 <_Balloc>
 800a916:	4605      	mov	r5, r0
 800a918:	b948      	cbnz	r0, 800a92e <__lshift+0x3e>
 800a91a:	4602      	mov	r2, r0
 800a91c:	4b28      	ldr	r3, [pc, #160]	@ (800a9c0 <__lshift+0xd0>)
 800a91e:	4829      	ldr	r0, [pc, #164]	@ (800a9c4 <__lshift+0xd4>)
 800a920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a924:	f7fe ff20 	bl	8009768 <__assert_func>
 800a928:	3101      	adds	r1, #1
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	e7ee      	b.n	800a90c <__lshift+0x1c>
 800a92e:	2300      	movs	r3, #0
 800a930:	f100 0114 	add.w	r1, r0, #20
 800a934:	f100 0210 	add.w	r2, r0, #16
 800a938:	4618      	mov	r0, r3
 800a93a:	4553      	cmp	r3, sl
 800a93c:	db33      	blt.n	800a9a6 <__lshift+0xb6>
 800a93e:	6920      	ldr	r0, [r4, #16]
 800a940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a944:	f104 0314 	add.w	r3, r4, #20
 800a948:	f019 091f 	ands.w	r9, r9, #31
 800a94c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a954:	d02b      	beq.n	800a9ae <__lshift+0xbe>
 800a956:	f1c9 0e20 	rsb	lr, r9, #32
 800a95a:	468a      	mov	sl, r1
 800a95c:	2200      	movs	r2, #0
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	fa00 f009 	lsl.w	r0, r0, r9
 800a964:	4310      	orrs	r0, r2
 800a966:	f84a 0b04 	str.w	r0, [sl], #4
 800a96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a96e:	459c      	cmp	ip, r3
 800a970:	fa22 f20e 	lsr.w	r2, r2, lr
 800a974:	d8f3      	bhi.n	800a95e <__lshift+0x6e>
 800a976:	ebac 0304 	sub.w	r3, ip, r4
 800a97a:	3b15      	subs	r3, #21
 800a97c:	f023 0303 	bic.w	r3, r3, #3
 800a980:	3304      	adds	r3, #4
 800a982:	f104 0015 	add.w	r0, r4, #21
 800a986:	4584      	cmp	ip, r0
 800a988:	bf38      	it	cc
 800a98a:	2304      	movcc	r3, #4
 800a98c:	50ca      	str	r2, [r1, r3]
 800a98e:	b10a      	cbz	r2, 800a994 <__lshift+0xa4>
 800a990:	f108 0602 	add.w	r6, r8, #2
 800a994:	3e01      	subs	r6, #1
 800a996:	4638      	mov	r0, r7
 800a998:	612e      	str	r6, [r5, #16]
 800a99a:	4621      	mov	r1, r4
 800a99c:	f7ff fdda 	bl	800a554 <_Bfree>
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	e7c5      	b.n	800a93a <__lshift+0x4a>
 800a9ae:	3904      	subs	r1, #4
 800a9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9b8:	459c      	cmp	ip, r3
 800a9ba:	d8f9      	bhi.n	800a9b0 <__lshift+0xc0>
 800a9bc:	e7ea      	b.n	800a994 <__lshift+0xa4>
 800a9be:	bf00      	nop
 800a9c0:	0801025a 	.word	0x0801025a
 800a9c4:	0801026b 	.word	0x0801026b

0800a9c8 <__mcmp>:
 800a9c8:	690a      	ldr	r2, [r1, #16]
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6900      	ldr	r0, [r0, #16]
 800a9ce:	1a80      	subs	r0, r0, r2
 800a9d0:	b530      	push	{r4, r5, lr}
 800a9d2:	d10e      	bne.n	800a9f2 <__mcmp+0x2a>
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	3114      	adds	r1, #20
 800a9d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9e8:	4295      	cmp	r5, r2
 800a9ea:	d003      	beq.n	800a9f4 <__mcmp+0x2c>
 800a9ec:	d205      	bcs.n	800a9fa <__mcmp+0x32>
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9f2:	bd30      	pop	{r4, r5, pc}
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	d3f3      	bcc.n	800a9e0 <__mcmp+0x18>
 800a9f8:	e7fb      	b.n	800a9f2 <__mcmp+0x2a>
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7f9      	b.n	800a9f2 <__mcmp+0x2a>
	...

0800aa00 <__mdiff>:
 800aa00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	4689      	mov	r9, r1
 800aa06:	4606      	mov	r6, r0
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	f7ff ffdb 	bl	800a9c8 <__mcmp>
 800aa12:	1e05      	subs	r5, r0, #0
 800aa14:	d112      	bne.n	800aa3c <__mdiff+0x3c>
 800aa16:	4629      	mov	r1, r5
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff fd5b 	bl	800a4d4 <_Balloc>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <__mdiff+0x2e>
 800aa22:	4b3f      	ldr	r3, [pc, #252]	@ (800ab20 <__mdiff+0x120>)
 800aa24:	f240 2137 	movw	r1, #567	@ 0x237
 800aa28:	483e      	ldr	r0, [pc, #248]	@ (800ab24 <__mdiff+0x124>)
 800aa2a:	f7fe fe9d 	bl	8009768 <__assert_func>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa34:	4610      	mov	r0, r2
 800aa36:	b003      	add	sp, #12
 800aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3c:	bfbc      	itt	lt
 800aa3e:	464b      	movlt	r3, r9
 800aa40:	46a1      	movlt	r9, r4
 800aa42:	4630      	mov	r0, r6
 800aa44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa48:	bfba      	itte	lt
 800aa4a:	461c      	movlt	r4, r3
 800aa4c:	2501      	movlt	r5, #1
 800aa4e:	2500      	movge	r5, #0
 800aa50:	f7ff fd40 	bl	800a4d4 <_Balloc>
 800aa54:	4602      	mov	r2, r0
 800aa56:	b918      	cbnz	r0, 800aa60 <__mdiff+0x60>
 800aa58:	4b31      	ldr	r3, [pc, #196]	@ (800ab20 <__mdiff+0x120>)
 800aa5a:	f240 2145 	movw	r1, #581	@ 0x245
 800aa5e:	e7e3      	b.n	800aa28 <__mdiff+0x28>
 800aa60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa64:	6926      	ldr	r6, [r4, #16]
 800aa66:	60c5      	str	r5, [r0, #12]
 800aa68:	f109 0310 	add.w	r3, r9, #16
 800aa6c:	f109 0514 	add.w	r5, r9, #20
 800aa70:	f104 0e14 	add.w	lr, r4, #20
 800aa74:	f100 0b14 	add.w	fp, r0, #20
 800aa78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	46d9      	mov	r9, fp
 800aa84:	f04f 0c00 	mov.w	ip, #0
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	fa1f f38a 	uxth.w	r3, sl
 800aa98:	4619      	mov	r1, r3
 800aa9a:	b283      	uxth	r3, r0
 800aa9c:	1acb      	subs	r3, r1, r3
 800aa9e:	0c00      	lsrs	r0, r0, #16
 800aaa0:	4463      	add	r3, ip
 800aaa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aab0:	4576      	cmp	r6, lr
 800aab2:	f849 3b04 	str.w	r3, [r9], #4
 800aab6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaba:	d8e5      	bhi.n	800aa88 <__mdiff+0x88>
 800aabc:	1b33      	subs	r3, r6, r4
 800aabe:	3b15      	subs	r3, #21
 800aac0:	f023 0303 	bic.w	r3, r3, #3
 800aac4:	3415      	adds	r4, #21
 800aac6:	3304      	adds	r3, #4
 800aac8:	42a6      	cmp	r6, r4
 800aaca:	bf38      	it	cc
 800aacc:	2304      	movcc	r3, #4
 800aace:	441d      	add	r5, r3
 800aad0:	445b      	add	r3, fp
 800aad2:	461e      	mov	r6, r3
 800aad4:	462c      	mov	r4, r5
 800aad6:	4544      	cmp	r4, r8
 800aad8:	d30e      	bcc.n	800aaf8 <__mdiff+0xf8>
 800aada:	f108 0103 	add.w	r1, r8, #3
 800aade:	1b49      	subs	r1, r1, r5
 800aae0:	f021 0103 	bic.w	r1, r1, #3
 800aae4:	3d03      	subs	r5, #3
 800aae6:	45a8      	cmp	r8, r5
 800aae8:	bf38      	it	cc
 800aaea:	2100      	movcc	r1, #0
 800aaec:	440b      	add	r3, r1
 800aaee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aaf2:	b191      	cbz	r1, 800ab1a <__mdiff+0x11a>
 800aaf4:	6117      	str	r7, [r2, #16]
 800aaf6:	e79d      	b.n	800aa34 <__mdiff+0x34>
 800aaf8:	f854 1b04 	ldr.w	r1, [r4], #4
 800aafc:	46e6      	mov	lr, ip
 800aafe:	0c08      	lsrs	r0, r1, #16
 800ab00:	fa1c fc81 	uxtah	ip, ip, r1
 800ab04:	4471      	add	r1, lr
 800ab06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab0a:	b289      	uxth	r1, r1
 800ab0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab10:	f846 1b04 	str.w	r1, [r6], #4
 800ab14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab18:	e7dd      	b.n	800aad6 <__mdiff+0xd6>
 800ab1a:	3f01      	subs	r7, #1
 800ab1c:	e7e7      	b.n	800aaee <__mdiff+0xee>
 800ab1e:	bf00      	nop
 800ab20:	0801025a 	.word	0x0801025a
 800ab24:	0801026b 	.word	0x0801026b

0800ab28 <__d2b>:
 800ab28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	2101      	movs	r1, #1
 800ab30:	ec59 8b10 	vmov	r8, r9, d0
 800ab34:	4616      	mov	r6, r2
 800ab36:	f7ff fccd 	bl	800a4d4 <_Balloc>
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	b930      	cbnz	r0, 800ab4c <__d2b+0x24>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	4b23      	ldr	r3, [pc, #140]	@ (800abd0 <__d2b+0xa8>)
 800ab42:	4824      	ldr	r0, [pc, #144]	@ (800abd4 <__d2b+0xac>)
 800ab44:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab48:	f7fe fe0e 	bl	8009768 <__assert_func>
 800ab4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab54:	b10d      	cbz	r5, 800ab5a <__d2b+0x32>
 800ab56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	f1b8 0300 	subs.w	r3, r8, #0
 800ab60:	d023      	beq.n	800abaa <__d2b+0x82>
 800ab62:	4668      	mov	r0, sp
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	f7ff fd7c 	bl	800a662 <__lo0bits>
 800ab6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab6e:	b1d0      	cbz	r0, 800aba6 <__d2b+0x7e>
 800ab70:	f1c0 0320 	rsb	r3, r0, #32
 800ab74:	fa02 f303 	lsl.w	r3, r2, r3
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	40c2      	lsrs	r2, r0
 800ab7c:	6163      	str	r3, [r4, #20]
 800ab7e:	9201      	str	r2, [sp, #4]
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	61a3      	str	r3, [r4, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bf0c      	ite	eq
 800ab88:	2201      	moveq	r2, #1
 800ab8a:	2202      	movne	r2, #2
 800ab8c:	6122      	str	r2, [r4, #16]
 800ab8e:	b1a5      	cbz	r5, 800abba <__d2b+0x92>
 800ab90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab94:	4405      	add	r5, r0
 800ab96:	603d      	str	r5, [r7, #0]
 800ab98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab9c:	6030      	str	r0, [r6, #0]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	b003      	add	sp, #12
 800aba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aba6:	6161      	str	r1, [r4, #20]
 800aba8:	e7ea      	b.n	800ab80 <__d2b+0x58>
 800abaa:	a801      	add	r0, sp, #4
 800abac:	f7ff fd59 	bl	800a662 <__lo0bits>
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	3020      	adds	r0, #32
 800abb6:	2201      	movs	r2, #1
 800abb8:	e7e8      	b.n	800ab8c <__d2b+0x64>
 800abba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abc2:	6038      	str	r0, [r7, #0]
 800abc4:	6918      	ldr	r0, [r3, #16]
 800abc6:	f7ff fd2d 	bl	800a624 <__hi0bits>
 800abca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abce:	e7e5      	b.n	800ab9c <__d2b+0x74>
 800abd0:	0801025a 	.word	0x0801025a
 800abd4:	0801026b 	.word	0x0801026b

0800abd8 <__sfputc_r>:
 800abd8:	6893      	ldr	r3, [r2, #8]
 800abda:	3b01      	subs	r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	b410      	push	{r4}
 800abe0:	6093      	str	r3, [r2, #8]
 800abe2:	da08      	bge.n	800abf6 <__sfputc_r+0x1e>
 800abe4:	6994      	ldr	r4, [r2, #24]
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	db01      	blt.n	800abee <__sfputc_r+0x16>
 800abea:	290a      	cmp	r1, #10
 800abec:	d103      	bne.n	800abf6 <__sfputc_r+0x1e>
 800abee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf2:	f7fe bc74 	b.w	80094de <__swbuf_r>
 800abf6:	6813      	ldr	r3, [r2, #0]
 800abf8:	1c58      	adds	r0, r3, #1
 800abfa:	6010      	str	r0, [r2, #0]
 800abfc:	7019      	strb	r1, [r3, #0]
 800abfe:	4608      	mov	r0, r1
 800ac00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <__sfputs_r>:
 800ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac08:	4606      	mov	r6, r0
 800ac0a:	460f      	mov	r7, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	18d5      	adds	r5, r2, r3
 800ac10:	42ac      	cmp	r4, r5
 800ac12:	d101      	bne.n	800ac18 <__sfputs_r+0x12>
 800ac14:	2000      	movs	r0, #0
 800ac16:	e007      	b.n	800ac28 <__sfputs_r+0x22>
 800ac18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1c:	463a      	mov	r2, r7
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7ff ffda 	bl	800abd8 <__sfputc_r>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d1f3      	bne.n	800ac10 <__sfputs_r+0xa>
 800ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac2c <_vfiprintf_r>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	460d      	mov	r5, r1
 800ac32:	b09d      	sub	sp, #116	@ 0x74
 800ac34:	4614      	mov	r4, r2
 800ac36:	4698      	mov	r8, r3
 800ac38:	4606      	mov	r6, r0
 800ac3a:	b118      	cbz	r0, 800ac44 <_vfiprintf_r+0x18>
 800ac3c:	6a03      	ldr	r3, [r0, #32]
 800ac3e:	b90b      	cbnz	r3, 800ac44 <_vfiprintf_r+0x18>
 800ac40:	f7fe fb64 	bl	800930c <__sinit>
 800ac44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	d405      	bmi.n	800ac56 <_vfiprintf_r+0x2a>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	059a      	lsls	r2, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_vfiprintf_r+0x2a>
 800ac50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac52:	f7fe fd78 	bl	8009746 <__retarget_lock_acquire_recursive>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	071b      	lsls	r3, r3, #28
 800ac5a:	d501      	bpl.n	800ac60 <_vfiprintf_r+0x34>
 800ac5c:	692b      	ldr	r3, [r5, #16]
 800ac5e:	b99b      	cbnz	r3, 800ac88 <_vfiprintf_r+0x5c>
 800ac60:	4629      	mov	r1, r5
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7fe fc7a 	bl	800955c <__swsetup_r>
 800ac68:	b170      	cbz	r0, 800ac88 <_vfiprintf_r+0x5c>
 800ac6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac6c:	07dc      	lsls	r4, r3, #31
 800ac6e:	d504      	bpl.n	800ac7a <_vfiprintf_r+0x4e>
 800ac70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac74:	b01d      	add	sp, #116	@ 0x74
 800ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	0598      	lsls	r0, r3, #22
 800ac7e:	d4f7      	bmi.n	800ac70 <_vfiprintf_r+0x44>
 800ac80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac82:	f7fe fd61 	bl	8009748 <__retarget_lock_release_recursive>
 800ac86:	e7f3      	b.n	800ac70 <_vfiprintf_r+0x44>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac96:	2330      	movs	r3, #48	@ 0x30
 800ac98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae48 <_vfiprintf_r+0x21c>
 800ac9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aca0:	f04f 0901 	mov.w	r9, #1
 800aca4:	4623      	mov	r3, r4
 800aca6:	469a      	mov	sl, r3
 800aca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acac:	b10a      	cbz	r2, 800acb2 <_vfiprintf_r+0x86>
 800acae:	2a25      	cmp	r2, #37	@ 0x25
 800acb0:	d1f9      	bne.n	800aca6 <_vfiprintf_r+0x7a>
 800acb2:	ebba 0b04 	subs.w	fp, sl, r4
 800acb6:	d00b      	beq.n	800acd0 <_vfiprintf_r+0xa4>
 800acb8:	465b      	mov	r3, fp
 800acba:	4622      	mov	r2, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7ff ffa1 	bl	800ac06 <__sfputs_r>
 800acc4:	3001      	adds	r0, #1
 800acc6:	f000 80a7 	beq.w	800ae18 <_vfiprintf_r+0x1ec>
 800acca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800accc:	445a      	add	r2, fp
 800acce:	9209      	str	r2, [sp, #36]	@ 0x24
 800acd0:	f89a 3000 	ldrb.w	r3, [sl]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 809f 	beq.w	800ae18 <_vfiprintf_r+0x1ec>
 800acda:	2300      	movs	r3, #0
 800acdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ace0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace4:	f10a 0a01 	add.w	sl, sl, #1
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	9307      	str	r3, [sp, #28]
 800acec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800acf2:	4654      	mov	r4, sl
 800acf4:	2205      	movs	r2, #5
 800acf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acfa:	4853      	ldr	r0, [pc, #332]	@ (800ae48 <_vfiprintf_r+0x21c>)
 800acfc:	f7f5 fa88 	bl	8000210 <memchr>
 800ad00:	9a04      	ldr	r2, [sp, #16]
 800ad02:	b9d8      	cbnz	r0, 800ad3c <_vfiprintf_r+0x110>
 800ad04:	06d1      	lsls	r1, r2, #27
 800ad06:	bf44      	itt	mi
 800ad08:	2320      	movmi	r3, #32
 800ad0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad0e:	0713      	lsls	r3, r2, #28
 800ad10:	bf44      	itt	mi
 800ad12:	232b      	movmi	r3, #43	@ 0x2b
 800ad14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad18:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad1e:	d015      	beq.n	800ad4c <_vfiprintf_r+0x120>
 800ad20:	9a07      	ldr	r2, [sp, #28]
 800ad22:	4654      	mov	r4, sl
 800ad24:	2000      	movs	r0, #0
 800ad26:	f04f 0c0a 	mov.w	ip, #10
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad30:	3b30      	subs	r3, #48	@ 0x30
 800ad32:	2b09      	cmp	r3, #9
 800ad34:	d94b      	bls.n	800adce <_vfiprintf_r+0x1a2>
 800ad36:	b1b0      	cbz	r0, 800ad66 <_vfiprintf_r+0x13a>
 800ad38:	9207      	str	r2, [sp, #28]
 800ad3a:	e014      	b.n	800ad66 <_vfiprintf_r+0x13a>
 800ad3c:	eba0 0308 	sub.w	r3, r0, r8
 800ad40:	fa09 f303 	lsl.w	r3, r9, r3
 800ad44:	4313      	orrs	r3, r2
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	46a2      	mov	sl, r4
 800ad4a:	e7d2      	b.n	800acf2 <_vfiprintf_r+0xc6>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	1d19      	adds	r1, r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	9103      	str	r1, [sp, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bfbb      	ittet	lt
 800ad58:	425b      	neglt	r3, r3
 800ad5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad5e:	9307      	strge	r3, [sp, #28]
 800ad60:	9307      	strlt	r3, [sp, #28]
 800ad62:	bfb8      	it	lt
 800ad64:	9204      	strlt	r2, [sp, #16]
 800ad66:	7823      	ldrb	r3, [r4, #0]
 800ad68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad6a:	d10a      	bne.n	800ad82 <_vfiprintf_r+0x156>
 800ad6c:	7863      	ldrb	r3, [r4, #1]
 800ad6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad70:	d132      	bne.n	800add8 <_vfiprintf_r+0x1ac>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	9203      	str	r2, [sp, #12]
 800ad7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad7e:	3402      	adds	r4, #2
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae58 <_vfiprintf_r+0x22c>
 800ad86:	7821      	ldrb	r1, [r4, #0]
 800ad88:	2203      	movs	r2, #3
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	f7f5 fa40 	bl	8000210 <memchr>
 800ad90:	b138      	cbz	r0, 800ada2 <_vfiprintf_r+0x176>
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	eba0 000a 	sub.w	r0, r0, sl
 800ad98:	2240      	movs	r2, #64	@ 0x40
 800ad9a:	4082      	lsls	r2, r0
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	3401      	adds	r4, #1
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4829      	ldr	r0, [pc, #164]	@ (800ae4c <_vfiprintf_r+0x220>)
 800ada8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adac:	2206      	movs	r2, #6
 800adae:	f7f5 fa2f 	bl	8000210 <memchr>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d03f      	beq.n	800ae36 <_vfiprintf_r+0x20a>
 800adb6:	4b26      	ldr	r3, [pc, #152]	@ (800ae50 <_vfiprintf_r+0x224>)
 800adb8:	bb1b      	cbnz	r3, 800ae02 <_vfiprintf_r+0x1d6>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	3307      	adds	r3, #7
 800adbe:	f023 0307 	bic.w	r3, r3, #7
 800adc2:	3308      	adds	r3, #8
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc8:	443b      	add	r3, r7
 800adca:	9309      	str	r3, [sp, #36]	@ 0x24
 800adcc:	e76a      	b.n	800aca4 <_vfiprintf_r+0x78>
 800adce:	fb0c 3202 	mla	r2, ip, r2, r3
 800add2:	460c      	mov	r4, r1
 800add4:	2001      	movs	r0, #1
 800add6:	e7a8      	b.n	800ad2a <_vfiprintf_r+0xfe>
 800add8:	2300      	movs	r3, #0
 800adda:	3401      	adds	r4, #1
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	4619      	mov	r1, r3
 800ade0:	f04f 0c0a 	mov.w	ip, #10
 800ade4:	4620      	mov	r0, r4
 800ade6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adea:	3a30      	subs	r2, #48	@ 0x30
 800adec:	2a09      	cmp	r2, #9
 800adee:	d903      	bls.n	800adf8 <_vfiprintf_r+0x1cc>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0c6      	beq.n	800ad82 <_vfiprintf_r+0x156>
 800adf4:	9105      	str	r1, [sp, #20]
 800adf6:	e7c4      	b.n	800ad82 <_vfiprintf_r+0x156>
 800adf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adfc:	4604      	mov	r4, r0
 800adfe:	2301      	movs	r3, #1
 800ae00:	e7f0      	b.n	800ade4 <_vfiprintf_r+0x1b8>
 800ae02:	ab03      	add	r3, sp, #12
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	462a      	mov	r2, r5
 800ae08:	4b12      	ldr	r3, [pc, #72]	@ (800ae54 <_vfiprintf_r+0x228>)
 800ae0a:	a904      	add	r1, sp, #16
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7fd fd8d 	bl	800892c <_printf_float>
 800ae12:	4607      	mov	r7, r0
 800ae14:	1c78      	adds	r0, r7, #1
 800ae16:	d1d6      	bne.n	800adc6 <_vfiprintf_r+0x19a>
 800ae18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae1a:	07d9      	lsls	r1, r3, #31
 800ae1c:	d405      	bmi.n	800ae2a <_vfiprintf_r+0x1fe>
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	059a      	lsls	r2, r3, #22
 800ae22:	d402      	bmi.n	800ae2a <_vfiprintf_r+0x1fe>
 800ae24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae26:	f7fe fc8f 	bl	8009748 <__retarget_lock_release_recursive>
 800ae2a:	89ab      	ldrh	r3, [r5, #12]
 800ae2c:	065b      	lsls	r3, r3, #25
 800ae2e:	f53f af1f 	bmi.w	800ac70 <_vfiprintf_r+0x44>
 800ae32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae34:	e71e      	b.n	800ac74 <_vfiprintf_r+0x48>
 800ae36:	ab03      	add	r3, sp, #12
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4b05      	ldr	r3, [pc, #20]	@ (800ae54 <_vfiprintf_r+0x228>)
 800ae3e:	a904      	add	r1, sp, #16
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7fe f80b 	bl	8008e5c <_printf_i>
 800ae46:	e7e4      	b.n	800ae12 <_vfiprintf_r+0x1e6>
 800ae48:	080103c0 	.word	0x080103c0
 800ae4c:	080103ca 	.word	0x080103ca
 800ae50:	0800892d 	.word	0x0800892d
 800ae54:	0800ac07 	.word	0x0800ac07
 800ae58:	080103c6 	.word	0x080103c6

0800ae5c <fiprintf>:
 800ae5c:	b40e      	push	{r1, r2, r3}
 800ae5e:	b503      	push	{r0, r1, lr}
 800ae60:	4601      	mov	r1, r0
 800ae62:	ab03      	add	r3, sp, #12
 800ae64:	4805      	ldr	r0, [pc, #20]	@ (800ae7c <fiprintf+0x20>)
 800ae66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	f7ff fedd 	bl	800ac2c <_vfiprintf_r>
 800ae72:	b002      	add	sp, #8
 800ae74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae78:	b003      	add	sp, #12
 800ae7a:	4770      	bx	lr
 800ae7c:	20000b28 	.word	0x20000b28

0800ae80 <__swhatbuf_r>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	460c      	mov	r4, r1
 800ae84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	b096      	sub	sp, #88	@ 0x58
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	461e      	mov	r6, r3
 800ae90:	da0d      	bge.n	800aeae <__swhatbuf_r+0x2e>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae98:	f04f 0100 	mov.w	r1, #0
 800ae9c:	bf14      	ite	ne
 800ae9e:	2340      	movne	r3, #64	@ 0x40
 800aea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aea4:	2000      	movs	r0, #0
 800aea6:	6031      	str	r1, [r6, #0]
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	b016      	add	sp, #88	@ 0x58
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	466a      	mov	r2, sp
 800aeb0:	f000 f848 	bl	800af44 <_fstat_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	dbec      	blt.n	800ae92 <__swhatbuf_r+0x12>
 800aeb8:	9901      	ldr	r1, [sp, #4]
 800aeba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aebe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aec2:	4259      	negs	r1, r3
 800aec4:	4159      	adcs	r1, r3
 800aec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeca:	e7eb      	b.n	800aea4 <__swhatbuf_r+0x24>

0800aecc <__smakebuf_r>:
 800aecc:	898b      	ldrh	r3, [r1, #12]
 800aece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aed0:	079d      	lsls	r5, r3, #30
 800aed2:	4606      	mov	r6, r0
 800aed4:	460c      	mov	r4, r1
 800aed6:	d507      	bpl.n	800aee8 <__smakebuf_r+0x1c>
 800aed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	2301      	movs	r3, #1
 800aee2:	6163      	str	r3, [r4, #20]
 800aee4:	b003      	add	sp, #12
 800aee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee8:	ab01      	add	r3, sp, #4
 800aeea:	466a      	mov	r2, sp
 800aeec:	f7ff ffc8 	bl	800ae80 <__swhatbuf_r>
 800aef0:	9f00      	ldr	r7, [sp, #0]
 800aef2:	4605      	mov	r5, r0
 800aef4:	4639      	mov	r1, r7
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7fd fbbe 	bl	8008678 <_malloc_r>
 800aefc:	b948      	cbnz	r0, 800af12 <__smakebuf_r+0x46>
 800aefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af02:	059a      	lsls	r2, r3, #22
 800af04:	d4ee      	bmi.n	800aee4 <__smakebuf_r+0x18>
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	f043 0302 	orr.w	r3, r3, #2
 800af0e:	81a3      	strh	r3, [r4, #12]
 800af10:	e7e2      	b.n	800aed8 <__smakebuf_r+0xc>
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	6020      	str	r0, [r4, #0]
 800af16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	9b01      	ldr	r3, [sp, #4]
 800af1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af22:	b15b      	cbz	r3, 800af3c <__smakebuf_r+0x70>
 800af24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f81d 	bl	800af68 <_isatty_r>
 800af2e:	b128      	cbz	r0, 800af3c <__smakebuf_r+0x70>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	431d      	orrs	r5, r3
 800af40:	81a5      	strh	r5, [r4, #12]
 800af42:	e7cf      	b.n	800aee4 <__smakebuf_r+0x18>

0800af44 <_fstat_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	@ (800af64 <_fstat_r+0x20>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f6 ff82 	bl	8001e5a <_fstat>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d102      	bne.n	800af60 <_fstat_r+0x1c>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b103      	cbz	r3, 800af60 <_fstat_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	200012e8 	.word	0x200012e8

0800af68 <_isatty_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d06      	ldr	r5, [pc, #24]	@ (800af84 <_isatty_r+0x1c>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f6 ff76 	bl	8001e64 <_isatty>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_isatty_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_isatty_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	200012e8 	.word	0x200012e8

0800af88 <abort>:
 800af88:	b508      	push	{r3, lr}
 800af8a:	2006      	movs	r0, #6
 800af8c:	f000 f85e 	bl	800b04c <raise>
 800af90:	2001      	movs	r0, #1
 800af92:	f7f6 ff4b 	bl	8001e2c <_exit>

0800af96 <_calloc_r>:
 800af96:	b570      	push	{r4, r5, r6, lr}
 800af98:	fba1 5402 	umull	r5, r4, r1, r2
 800af9c:	b93c      	cbnz	r4, 800afae <_calloc_r+0x18>
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7fd fb6a 	bl	8008678 <_malloc_r>
 800afa4:	4606      	mov	r6, r0
 800afa6:	b928      	cbnz	r0, 800afb4 <_calloc_r+0x1e>
 800afa8:	2600      	movs	r6, #0
 800afaa:	4630      	mov	r0, r6
 800afac:	bd70      	pop	{r4, r5, r6, pc}
 800afae:	220c      	movs	r2, #12
 800afb0:	6002      	str	r2, [r0, #0]
 800afb2:	e7f9      	b.n	800afa8 <_calloc_r+0x12>
 800afb4:	462a      	mov	r2, r5
 800afb6:	4621      	mov	r1, r4
 800afb8:	f7fe fb26 	bl	8009608 <memset>
 800afbc:	e7f5      	b.n	800afaa <_calloc_r+0x14>

0800afbe <__ascii_mbtowc>:
 800afbe:	b082      	sub	sp, #8
 800afc0:	b901      	cbnz	r1, 800afc4 <__ascii_mbtowc+0x6>
 800afc2:	a901      	add	r1, sp, #4
 800afc4:	b142      	cbz	r2, 800afd8 <__ascii_mbtowc+0x1a>
 800afc6:	b14b      	cbz	r3, 800afdc <__ascii_mbtowc+0x1e>
 800afc8:	7813      	ldrb	r3, [r2, #0]
 800afca:	600b      	str	r3, [r1, #0]
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	1e10      	subs	r0, r2, #0
 800afd0:	bf18      	it	ne
 800afd2:	2001      	movne	r0, #1
 800afd4:	b002      	add	sp, #8
 800afd6:	4770      	bx	lr
 800afd8:	4610      	mov	r0, r2
 800afda:	e7fb      	b.n	800afd4 <__ascii_mbtowc+0x16>
 800afdc:	f06f 0001 	mvn.w	r0, #1
 800afe0:	e7f8      	b.n	800afd4 <__ascii_mbtowc+0x16>

0800afe2 <__ascii_wctomb>:
 800afe2:	4603      	mov	r3, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	b141      	cbz	r1, 800affa <__ascii_wctomb+0x18>
 800afe8:	2aff      	cmp	r2, #255	@ 0xff
 800afea:	d904      	bls.n	800aff6 <__ascii_wctomb+0x14>
 800afec:	228a      	movs	r2, #138	@ 0x8a
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aff4:	4770      	bx	lr
 800aff6:	700a      	strb	r2, [r1, #0]
 800aff8:	2001      	movs	r0, #1
 800affa:	4770      	bx	lr

0800affc <_raise_r>:
 800affc:	291f      	cmp	r1, #31
 800affe:	b538      	push	{r3, r4, r5, lr}
 800b000:	4605      	mov	r5, r0
 800b002:	460c      	mov	r4, r1
 800b004:	d904      	bls.n	800b010 <_raise_r+0x14>
 800b006:	2316      	movs	r3, #22
 800b008:	6003      	str	r3, [r0, #0]
 800b00a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b012:	b112      	cbz	r2, 800b01a <_raise_r+0x1e>
 800b014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b018:	b94b      	cbnz	r3, 800b02e <_raise_r+0x32>
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 f830 	bl	800b080 <_getpid_r>
 800b020:	4622      	mov	r2, r4
 800b022:	4601      	mov	r1, r0
 800b024:	4628      	mov	r0, r5
 800b026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b02a:	f000 b817 	b.w	800b05c <_kill_r>
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d00a      	beq.n	800b048 <_raise_r+0x4c>
 800b032:	1c59      	adds	r1, r3, #1
 800b034:	d103      	bne.n	800b03e <_raise_r+0x42>
 800b036:	2316      	movs	r3, #22
 800b038:	6003      	str	r3, [r0, #0]
 800b03a:	2001      	movs	r0, #1
 800b03c:	e7e7      	b.n	800b00e <_raise_r+0x12>
 800b03e:	2100      	movs	r1, #0
 800b040:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b044:	4620      	mov	r0, r4
 800b046:	4798      	blx	r3
 800b048:	2000      	movs	r0, #0
 800b04a:	e7e0      	b.n	800b00e <_raise_r+0x12>

0800b04c <raise>:
 800b04c:	4b02      	ldr	r3, [pc, #8]	@ (800b058 <raise+0xc>)
 800b04e:	4601      	mov	r1, r0
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	f7ff bfd3 	b.w	800affc <_raise_r>
 800b056:	bf00      	nop
 800b058:	20000b28 	.word	0x20000b28

0800b05c <_kill_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d07      	ldr	r5, [pc, #28]	@ (800b07c <_kill_r+0x20>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	4611      	mov	r1, r2
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	f7f6 fed7 	bl	8001e1c <_kill>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	d102      	bne.n	800b078 <_kill_r+0x1c>
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	b103      	cbz	r3, 800b078 <_kill_r+0x1c>
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	bd38      	pop	{r3, r4, r5, pc}
 800b07a:	bf00      	nop
 800b07c:	200012e8 	.word	0x200012e8

0800b080 <_getpid_r>:
 800b080:	f7f6 beca 	b.w	8001e18 <_getpid>

0800b084 <expf>:
 800b084:	b508      	push	{r3, lr}
 800b086:	ed2d 8b02 	vpush	{d8}
 800b08a:	eef0 8a40 	vmov.f32	s17, s0
 800b08e:	f000 f85f 	bl	800b150 <__ieee754_expf>
 800b092:	eeb0 8a40 	vmov.f32	s16, s0
 800b096:	eeb0 0a68 	vmov.f32	s0, s17
 800b09a:	f000 f829 	bl	800b0f0 <finitef>
 800b09e:	b160      	cbz	r0, 800b0ba <expf+0x36>
 800b0a0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800b0e0 <expf+0x5c>
 800b0a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	dd0a      	ble.n	800b0c4 <expf+0x40>
 800b0ae:	f7fe fb1f 	bl	80096f0 <__errno>
 800b0b2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800b0e4 <expf+0x60>
 800b0b6:	2322      	movs	r3, #34	@ 0x22
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b0be:	ecbd 8b02 	vpop	{d8}
 800b0c2:	bd08      	pop	{r3, pc}
 800b0c4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b0e8 <expf+0x64>
 800b0c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d0:	d5f3      	bpl.n	800b0ba <expf+0x36>
 800b0d2:	f7fe fb0d 	bl	80096f0 <__errno>
 800b0d6:	2322      	movs	r3, #34	@ 0x22
 800b0d8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800b0ec <expf+0x68>
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	e7ec      	b.n	800b0ba <expf+0x36>
 800b0e0:	42b17217 	.word	0x42b17217
 800b0e4:	7f800000 	.word	0x7f800000
 800b0e8:	c2cff1b5 	.word	0xc2cff1b5
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <finitef>:
 800b0f0:	ee10 3a10 	vmov	r3, s0
 800b0f4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b0f8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b0fc:	bfac      	ite	ge
 800b0fe:	2000      	movge	r0, #0
 800b100:	2001      	movlt	r0, #1
 800b102:	4770      	bx	lr

0800b104 <with_errnof>:
 800b104:	b510      	push	{r4, lr}
 800b106:	ed2d 8b02 	vpush	{d8}
 800b10a:	eeb0 8a40 	vmov.f32	s16, s0
 800b10e:	4604      	mov	r4, r0
 800b110:	f7fe faee 	bl	80096f0 <__errno>
 800b114:	eeb0 0a48 	vmov.f32	s0, s16
 800b118:	ecbd 8b02 	vpop	{d8}
 800b11c:	6004      	str	r4, [r0, #0]
 800b11e:	bd10      	pop	{r4, pc}

0800b120 <xflowf>:
 800b120:	b130      	cbz	r0, 800b130 <xflowf+0x10>
 800b122:	eef1 7a40 	vneg.f32	s15, s0
 800b126:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b12a:	2022      	movs	r0, #34	@ 0x22
 800b12c:	f7ff bfea 	b.w	800b104 <with_errnof>
 800b130:	eef0 7a40 	vmov.f32	s15, s0
 800b134:	e7f7      	b.n	800b126 <xflowf+0x6>
	...

0800b138 <__math_uflowf>:
 800b138:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b140 <__math_uflowf+0x8>
 800b13c:	f7ff bff0 	b.w	800b120 <xflowf>
 800b140:	10000000 	.word	0x10000000

0800b144 <__math_oflowf>:
 800b144:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b14c <__math_oflowf+0x8>
 800b148:	f7ff bfea 	b.w	800b120 <xflowf>
 800b14c:	70000000 	.word	0x70000000

0800b150 <__ieee754_expf>:
 800b150:	ee10 2a10 	vmov	r2, s0
 800b154:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800b158:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b15c:	d902      	bls.n	800b164 <__ieee754_expf+0x14>
 800b15e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b162:	4770      	bx	lr
 800b164:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b168:	d106      	bne.n	800b178 <__ieee754_expf+0x28>
 800b16a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b2a4 <__ieee754_expf+0x154>
 800b16e:	2900      	cmp	r1, #0
 800b170:	bf18      	it	ne
 800b172:	eeb0 0a67 	vmovne.f32	s0, s15
 800b176:	4770      	bx	lr
 800b178:	484b      	ldr	r0, [pc, #300]	@ (800b2a8 <__ieee754_expf+0x158>)
 800b17a:	4282      	cmp	r2, r0
 800b17c:	dd02      	ble.n	800b184 <__ieee754_expf+0x34>
 800b17e:	2000      	movs	r0, #0
 800b180:	f7ff bfe0 	b.w	800b144 <__math_oflowf>
 800b184:	2a00      	cmp	r2, #0
 800b186:	da05      	bge.n	800b194 <__ieee754_expf+0x44>
 800b188:	4a48      	ldr	r2, [pc, #288]	@ (800b2ac <__ieee754_expf+0x15c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d902      	bls.n	800b194 <__ieee754_expf+0x44>
 800b18e:	2000      	movs	r0, #0
 800b190:	f7ff bfd2 	b.w	800b138 <__math_uflowf>
 800b194:	4a46      	ldr	r2, [pc, #280]	@ (800b2b0 <__ieee754_expf+0x160>)
 800b196:	4293      	cmp	r3, r2
 800b198:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800b19c:	d952      	bls.n	800b244 <__ieee754_expf+0xf4>
 800b19e:	4a45      	ldr	r2, [pc, #276]	@ (800b2b4 <__ieee754_expf+0x164>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b1a6:	d834      	bhi.n	800b212 <__ieee754_expf+0xc2>
 800b1a8:	4b43      	ldr	r3, [pc, #268]	@ (800b2b8 <__ieee754_expf+0x168>)
 800b1aa:	4413      	add	r3, r2
 800b1ac:	ed93 7a00 	vldr	s14, [r3]
 800b1b0:	4b42      	ldr	r3, [pc, #264]	@ (800b2bc <__ieee754_expf+0x16c>)
 800b1b2:	4413      	add	r3, r2
 800b1b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b1b8:	f1c1 0201 	rsb	r2, r1, #1
 800b1bc:	edd3 7a00 	vldr	s15, [r3]
 800b1c0:	1a52      	subs	r2, r2, r1
 800b1c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b1c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b1ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b2c0 <__ieee754_expf+0x170>
 800b1ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2c4 <__ieee754_expf+0x174>
 800b1d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b1d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b2c8 <__ieee754_expf+0x178>
 800b1da:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1de:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b2cc <__ieee754_expf+0x17c>
 800b1e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b1e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b2d0 <__ieee754_expf+0x180>
 800b1ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1ee:	eef0 6a40 	vmov.f32	s13, s0
 800b1f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b1f6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b1fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b1fe:	bb92      	cbnz	r2, 800b266 <__ieee754_expf+0x116>
 800b200:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b204:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b208:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b20c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b210:	4770      	bx	lr
 800b212:	4b30      	ldr	r3, [pc, #192]	@ (800b2d4 <__ieee754_expf+0x184>)
 800b214:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b2d8 <__ieee754_expf+0x188>
 800b218:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b2dc <__ieee754_expf+0x18c>
 800b21c:	4413      	add	r3, r2
 800b21e:	edd3 7a00 	vldr	s15, [r3]
 800b222:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b226:	eeb0 7a40 	vmov.f32	s14, s0
 800b22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b22e:	ee17 2a90 	vmov	r2, s15
 800b232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b236:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b23a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b2e0 <__ieee754_expf+0x190>
 800b23e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b242:	e7be      	b.n	800b1c2 <__ieee754_expf+0x72>
 800b244:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b248:	d20b      	bcs.n	800b262 <__ieee754_expf+0x112>
 800b24a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b2e4 <__ieee754_expf+0x194>
 800b24e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b252:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dd02      	ble.n	800b262 <__ieee754_expf+0x112>
 800b25c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b260:	4770      	bx	lr
 800b262:	2200      	movs	r2, #0
 800b264:	e7af      	b.n	800b1c6 <__ieee754_expf+0x76>
 800b266:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b26a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b26e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b272:	bfb8      	it	lt
 800b274:	3264      	addlt	r2, #100	@ 0x64
 800b276:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b27a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b27e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b282:	ee17 3a90 	vmov	r3, s15
 800b286:	bfab      	itete	ge
 800b288:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b28c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b290:	ee00 3a10 	vmovge	s0, r3
 800b294:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b2e8 <__ieee754_expf+0x198>
 800b298:	bfbc      	itt	lt
 800b29a:	ee00 3a10 	vmovlt	s0, r3
 800b29e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b2a2:	4770      	bx	lr
 800b2a4:	00000000 	.word	0x00000000
 800b2a8:	42b17217 	.word	0x42b17217
 800b2ac:	42cff1b5 	.word	0x42cff1b5
 800b2b0:	3eb17218 	.word	0x3eb17218
 800b2b4:	3f851591 	.word	0x3f851591
 800b2b8:	080104e4 	.word	0x080104e4
 800b2bc:	080104dc 	.word	0x080104dc
 800b2c0:	3331bb4c 	.word	0x3331bb4c
 800b2c4:	b5ddea0e 	.word	0xb5ddea0e
 800b2c8:	388ab355 	.word	0x388ab355
 800b2cc:	bb360b61 	.word	0xbb360b61
 800b2d0:	3e2aaaab 	.word	0x3e2aaaab
 800b2d4:	080104ec 	.word	0x080104ec
 800b2d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800b2dc:	3f317180 	.word	0x3f317180
 800b2e0:	3717f7d1 	.word	0x3717f7d1
 800b2e4:	7149f2ca 	.word	0x7149f2ca
 800b2e8:	0d800000 	.word	0x0d800000

0800b2ec <_init>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_fini>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr
